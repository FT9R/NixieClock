
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000011ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000117a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800100  00800100  000011ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a34  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bca  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd5  00000000  00000000  000039ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00004790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000787  00000000  00000000  00005263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000059ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
       4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
       6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
       8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
       a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
       c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
       e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
      10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
      12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
      14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
      16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
      18:	bc c0       	rjmp	.+376    	; 0x192 <__vector_12>
      1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
      1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
      1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
      20:	74 c1       	rjmp	.+744    	; 0x30a <__vector_16>
      22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
      24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
      26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf ef       	ldi	r28, 0xFF	; 255
      2e:	d2 e0       	ldi	r29, 0x02	; 2
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
      34:	21 e0       	ldi	r18, 0x01	; 1
      36:	a0 e0       	ldi	r26, 0x00	; 0
      38:	b1 e0       	ldi	r27, 0x01	; 1
      3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
      3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
      3e:	a0 36       	cpi	r26, 0x60	; 96
      40:	b2 07       	cpc	r27, r18
      42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
      44:	ee d1       	rcall	.+988    	; 0x422 <main>
      46:	97 c8       	rjmp	.-3794   	; 0xfffff176 <__eeprom_end+0xff7ef176>

00000048 <__bad_interrupt>:
      48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <AnodeSwitch>:
#include "indication.h"

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
      4a:	9f ef       	ldi	r25, 0xFF	; 255
      4c:	98 0f       	add	r25, r24
      4e:	96 30       	cpi	r25, 0x06	; 6
      50:	38 f4       	brcc	.+14     	; 0x60 <AnodeSwitch+0x16>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
      52:	9b b1       	in	r25, 0x0b	; 11
      54:	9f 71       	andi	r25, 0x1F	; 31
      56:	82 95       	swap	r24
      58:	88 0f       	add	r24, r24
      5a:	80 7e       	andi	r24, 0xE0	; 224
      5c:	89 2b       	or	r24, r25
      5e:	8b b9       	out	0x0b, r24	; 11
}
      60:	08 95       	ret

00000062 <CathodeSwitch>:

void CathodeSwitch(uint8_t cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
      62:	8a 30       	cpi	r24, 0x0A	; 10
      64:	28 f4       	brcc	.+10     	; 0x70 <CathodeSwitch+0xe>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
      66:	9b b1       	in	r25, 0x0b	; 11
      68:	91 7e       	andi	r25, 0xE1	; 225
      6a:	88 0f       	add	r24, r24
      6c:	89 2b       	or	r24, r25
      6e:	8b b9       	out	0x0b, r24	; 11
}
      70:	08 95       	ret

00000072 <Display_DeadTime>:

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
      72:	8b b1       	in	r24, 0x0b	; 11
      74:	81 70       	andi	r24, 0x01	; 1
      76:	88 61       	ori	r24, 0x18	; 24
      78:	8b b9       	out	0x0b, r24	; 11
}
      7a:	08 95       	ret

0000007c <SoftStart>:

void SoftStart(struct Indication_s *indication, struct Voltage_s *voltage)
{
      7c:	cf 92       	push	r12
      7e:	df 92       	push	r13
      80:	ef 92       	push	r14
      82:	ff 92       	push	r15
      84:	cf 93       	push	r28
      86:	df 93       	push	r29
    if ((!indication->pause) && (!indication->isTurnedOff) && (voltage->pid.setPoint <= VOUT_TASK))
      88:	fc 01       	movw	r30, r24
      8a:	20 85       	ldd	r18, Z+8	; 0x08
      8c:	21 11       	cpse	r18, r1
      8e:	1c c0       	rjmp	.+56     	; 0xc8 <SoftStart+0x4c>
      90:	81 85       	ldd	r24, Z+9	; 0x09
      92:	81 11       	cpse	r24, r1
      94:	19 c0       	rjmp	.+50     	; 0xc8 <SoftStart+0x4c>
      96:	eb 01       	movw	r28, r22
      98:	cd a8       	ldd	r12, Y+53	; 0x35
      9a:	de a8       	ldd	r13, Y+54	; 0x36
      9c:	ef a8       	ldd	r14, Y+55	; 0x37
      9e:	f8 ac       	ldd	r15, Y+56	; 0x38
      a0:	20 e0       	ldi	r18, 0x00	; 0
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	44 e3       	ldi	r20, 0x34	; 52
      a6:	53 e4       	ldi	r21, 0x43	; 67
      a8:	c7 01       	movw	r24, r14
      aa:	b6 01       	movw	r22, r12
      ac:	13 d7       	rcall	.+3622   	; 0xed4 <__cmpsf2>
      ae:	18 16       	cp	r1, r24
      b0:	5c f0       	brlt	.+22     	; 0xc8 <SoftStart+0x4c>
        voltage->pid.setPoint += 0.01;
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	37 ed       	ldi	r19, 0xD7	; 215
      b6:	43 e2       	ldi	r20, 0x23	; 35
      b8:	5c e3       	ldi	r21, 0x3C	; 60
      ba:	c7 01       	movw	r24, r14
      bc:	b6 01       	movw	r22, r12
      be:	a6 d6       	rcall	.+3404   	; 0xe0c <__addsf3>
      c0:	6d ab       	std	Y+53, r22	; 0x35
      c2:	7e ab       	std	Y+54, r23	; 0x36
      c4:	8f ab       	std	Y+55, r24	; 0x37
      c6:	98 af       	std	Y+56, r25	; 0x38
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	ff 90       	pop	r15
      ce:	ef 90       	pop	r14
      d0:	df 90       	pop	r13
      d2:	cf 90       	pop	r12
      d4:	08 95       	ret

000000d6 <SoftTurnoff>:

void SoftTurnoff(struct Indication_s *indication, struct Voltage_s *voltage)
{
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
    if ((indication->isTurnedOff) && (voltage->pid.setPoint > 0.0))
      e2:	fc 01       	movw	r30, r24
      e4:	81 85       	ldd	r24, Z+9	; 0x09
      e6:	88 23       	and	r24, r24
      e8:	c1 f0       	breq	.+48     	; 0x11a <SoftTurnoff+0x44>
      ea:	eb 01       	movw	r28, r22
      ec:	cd a8       	ldd	r12, Y+53	; 0x35
      ee:	de a8       	ldd	r13, Y+54	; 0x36
      f0:	ef a8       	ldd	r14, Y+55	; 0x37
      f2:	f8 ac       	ldd	r15, Y+56	; 0x38
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	a9 01       	movw	r20, r18
      fa:	c7 01       	movw	r24, r14
      fc:	b6 01       	movw	r22, r12
      fe:	cc d7       	rcall	.+3992   	; 0x1098 <__gesf2>
     100:	18 16       	cp	r1, r24
     102:	5c f4       	brge	.+22     	; 0x11a <SoftTurnoff+0x44>
        voltage->pid.setPoint -= 0.005;
     104:	2a e0       	ldi	r18, 0x0A	; 10
     106:	37 ed       	ldi	r19, 0xD7	; 215
     108:	43 ea       	ldi	r20, 0xA3	; 163
     10a:	5b e3       	ldi	r21, 0x3B	; 59
     10c:	c7 01       	movw	r24, r14
     10e:	b6 01       	movw	r22, r12
     110:	7c d6       	rcall	.+3320   	; 0xe0a <__subsf3>
     112:	6d ab       	std	Y+53, r22	; 0x35
     114:	7e ab       	std	Y+54, r23	; 0x36
     116:	8f ab       	std	Y+55, r24	; 0x37
     118:	98 af       	std	Y+56, r25	; 0x38
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret

00000128 <IO_Init>:
#include "init.h"

void IO_Init(void)
{
    /* PORTA */
    MODIFY_REG(DDRA, 0xFF, (1 << 2) | (1 << 3)); // LDP and RDP
     128:	8d b1       	in	r24, 0x0d	; 13
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	8d b9       	out	0x0d, r24	; 13
    CLEAR_REG(PORTA);
     12e:	1e b8       	out	0x0e, r1	; 14
    CLEAR_BIT(DDRA, 1 << 0); // TimeRes
     130:	68 98       	cbi	0x0d, 0	; 13
    SET_BIT(PORTA, 1 << 0); // Pull up
     132:	70 9a       	sbi	0x0e, 0	; 14

    /* PORTB */
    SET_BIT(DDRB, 1 << 2); // Boost PWM
     134:	22 9a       	sbi	0x04, 2	; 4
    CLEAR_REG(PORTB);
     136:	15 b8       	out	0x05, r1	; 5

    /* PORTD */
    MODIFY_REG(DDRD, 0xFF, 0xFF);
     138:	8a b1       	in	r24, 0x0a	; 10
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	8a b9       	out	0x0a, r24	; 10
    CLEAR_REG(PORTD);
     13e:	1b b8       	out	0x0b, r1	; 11
}
     140:	08 95       	ret

00000142 <TIMx_Init>:

void TIMx_Init(uint8_t timx)
{
    switch (timx)
     142:	88 23       	and	r24, r24
     144:	c1 f0       	breq	.+48     	; 0x176 <TIMx_Init+0x34>
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	a9 f4       	brne	.+42     	; 0x174 <TIMx_Init+0x32>
        SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
        OCR0A = 173 - 1;
        break;

    case 1: // F = 31.25kHz; T = 32us
        SET_BIT(TCCR1A, 1 << WGM11); // Fast PWM, 9-bit
     14a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
        SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     154:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     158:	80 62       	ori	r24, 0x20	; 32
     15a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
        SET_BIT(TCCR1B, 1 << CS10); // clk/1
     15e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     162:	81 60       	ori	r24, 0x01	; 1
     164:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
        SET_BIT(TCCR1B, 1 << WGM12); // Fast PWM, 9-bit
     168:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     16c:	88 60       	ori	r24, 0x08	; 8
     16e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
        break;
    }
     172:	08 95       	ret
     174:	08 95       	ret
void TIMx_Init(uint8_t timx)
{
    switch (timx)
    {
    case 0: // F = 1445Hz; T = 692us
        SET_BIT(TCCR0A, (1 << CS00) | (1 << CS01)); // clk/64
     176:	85 b5       	in	r24, 0x25	; 37
     178:	83 60       	ori	r24, 0x03	; 3
     17a:	85 bd       	out	0x25, r24	; 37
        SET_BIT(TCCR0A, 1 << CTC0); // CTC EN
     17c:	85 b5       	in	r24, 0x25	; 37
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	85 bd       	out	0x25, r24	; 37
        SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
     182:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
     186:	82 60       	ori	r24, 0x02	; 2
     188:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
        OCR0A = 173 - 1;
     18c:	8c ea       	ldi	r24, 0xAC	; 172
     18e:	87 bd       	out	0x27, r24	; 39
        break;
     190:	08 95       	ret

00000192 <__vector_12>:
#include "main.h"

ISR(TIMER0_COMPA_vect)
{
     192:	1f 92       	push	r1
     194:	0f 92       	push	r0
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	0f 92       	push	r0
     19a:	11 24       	eor	r1, r1
     19c:	2f 93       	push	r18
     19e:	3f 93       	push	r19
     1a0:	4f 93       	push	r20
     1a2:	5f 93       	push	r21
     1a4:	6f 93       	push	r22
     1a6:	7f 93       	push	r23
     1a8:	8f 93       	push	r24
     1aa:	9f 93       	push	r25
     1ac:	af 93       	push	r26
     1ae:	bf 93       	push	r27
     1b0:	ef 93       	push	r30
     1b2:	ff 93       	push	r31
    if (indication.pause)
     1b4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x8>
     1b8:	81 11       	cpse	r24, r1
     1ba:	27 c0       	rjmp	.+78     	; 0x20a <__DATA_REGION_LENGTH__+0xa>
     1bc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
        return;

    switch (indication.dispMode)
     1c0:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <indication+0x7>
     1c4:	91 30       	cpi	r25, 0x01	; 1
     1c6:	91 f1       	breq	.+100    	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
     1c8:	08 f4       	brcc	.+2      	; 0x1cc <__vector_12+0x3a>
     1ca:	44 c0       	rjmp	.+136    	; 0x254 <__DATA_REGION_LENGTH__+0x54>
     1cc:	92 30       	cpi	r25, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <__vector_12+0x40>
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__DATA_REGION_LENGTH__+0x54>
            break;
        }
        break;
    }

    if (++indication.counter > 12)
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	8d 30       	cpi	r24, 0x0D	; 13
     1d6:	08 f0       	brcs	.+2      	; 0x1da <__vector_12+0x48>
        indication.counter = 1;
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <indication+0x6>
    ++cad.counter;
     1de:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cad>
     1e2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <cad+0x1>
     1e6:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <cad+0x2>
     1ea:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <cad+0x3>
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	a1 1d       	adc	r26, r1
     1f2:	b1 1d       	adc	r27, r1
     1f4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cad>
     1f8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <cad+0x1>
     1fc:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <cad+0x2>
     200:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <cad+0x3>
    voltage.pid.run = true;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <voltage+0x3d>
}
     20a:	ff 91       	pop	r31
     20c:	ef 91       	pop	r30
     20e:	bf 91       	pop	r27
     210:	af 91       	pop	r26
     212:	9f 91       	pop	r25
     214:	8f 91       	pop	r24
     216:	7f 91       	pop	r23
     218:	6f 91       	pop	r22
     21a:	5f 91       	pop	r21
     21c:	4f 91       	pop	r20
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti
            break;
        }
        break;

    case DISPLAY_TEMPERATURE:
        switch (indication.counter)
     22c:	ef ef       	ldi	r30, 0xFF	; 255
     22e:	e8 0f       	add	r30, r24
     230:	ec 30       	cpi	r30, 0x0C	; 12
     232:	78 f6       	brcc	.-98     	; 0x1d2 <__vector_12+0x40>
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e2 5e       	subi	r30, 0xE2	; 226
     238:	fe 4f       	sbci	r31, 0xFE	; 254
     23a:	09 94       	ijmp
     23c:	24 c0       	rjmp	.+72     	; 0x286 <__DATA_REGION_LENGTH__+0x86>
     23e:	1f c0       	rjmp	.+62     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     240:	1e c0       	rjmp	.+60     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     242:	3a c0       	rjmp	.+116    	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     244:	1c c0       	rjmp	.+56     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     246:	1b c0       	rjmp	.+54     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     248:	2e c0       	rjmp	.+92     	; 0x2a6 <__DATA_REGION_LENGTH__+0xa6>
     24a:	19 c0       	rjmp	.+50     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     24c:	18 c0       	rjmp	.+48     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     24e:	23 c0       	rjmp	.+70     	; 0x296 <__DATA_REGION_LENGTH__+0x96>
     250:	16 c0       	rjmp	.+44     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     252:	15 c0       	rjmp	.+42     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>

    switch (indication.dispMode)
    {
    case DISPLAY_TIME:
    case DISPLAY_CAD:
        switch (indication.counter)
     254:	ef ef       	ldi	r30, 0xFF	; 255
     256:	e8 0f       	add	r30, r24
     258:	ec 30       	cpi	r30, 0x0C	; 12
     25a:	08 f0       	brcs	.+2      	; 0x25e <__DATA_REGION_LENGTH__+0x5e>
     25c:	ba cf       	rjmp	.-140    	; 0x1d2 <__vector_12+0x40>
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	ed 5c       	subi	r30, 0xCD	; 205
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	09 94       	ijmp
     266:	49 c0       	rjmp	.+146    	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
     268:	0a c0       	rjmp	.+20     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     26a:	3f c0       	rjmp	.+126    	; 0x2ea <__DATA_REGION_LENGTH__+0xea>
     26c:	08 c0       	rjmp	.+16     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     26e:	0b c0       	rjmp	.+22     	; 0x286 <__DATA_REGION_LENGTH__+0x86>
     270:	06 c0       	rjmp	.+12     	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     272:	33 c0       	rjmp	.+102    	; 0x2da <__DATA_REGION_LENGTH__+0xda>
     274:	04 c0       	rjmp	.+8      	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     276:	29 c0       	rjmp	.+82     	; 0x2ca <__DATA_REGION_LENGTH__+0xca>
     278:	02 c0       	rjmp	.+4      	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     27a:	0d c0       	rjmp	.+26     	; 0x296 <__DATA_REGION_LENGTH__+0x96>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
        case 4:
        case 6:
        case 8:
        case 10:
        case 12:
            Display_DeadTime();
     27e:	f9 de       	rcall	.-526    	; 0x72 <Display_DeadTime>
     280:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     284:	a6 cf       	rjmp	.-180    	; 0x1d2 <__vector_12+0x40>
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit2);
            break;
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	e0 de       	rcall	.-576    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit3);
     28a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x2>
     28e:	e9 de       	rcall	.-558    	; 0x62 <CathodeSwitch>
     290:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     294:	9e cf       	rjmp	.-196    	; 0x1d2 <__vector_12+0x40>
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit5);
            break;
        case 11:
            AnodeSwitch((indication.counter + 1) / 2);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	d8 de       	rcall	.-592    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit6);
     29a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication+0x5>
     29e:	e1 de       	rcall	.-574    	; 0x62 <CathodeSwitch>
     2a0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2a4:	96 cf       	rjmp	.-212    	; 0x1d2 <__vector_12+0x40>
            AnodeSwitch(4u);
            CathodeSwitch(indication.digit4);
            SET_BIT(PORTA, 1 << 3); // RDP turn on
            break;
        case 7:
            AnodeSwitch(5u);
     2a6:	85 e0       	ldi	r24, 0x05	; 5
     2a8:	d0 de       	rcall	.-608    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit5);
     2aa:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x4>
     2ae:	d9 de       	rcall	.-590    	; 0x62 <CathodeSwitch>
            CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     2b0:	73 98       	cbi	0x0e, 3	; 14
     2b2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2b6:	8d cf       	rjmp	.-230    	; 0x1d2 <__vector_12+0x40>
        case 1:
            AnodeSwitch(3u);
            CathodeSwitch(indication.digit3);
            break;
        case 4:
            AnodeSwitch(4u);
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	c7 de       	rcall	.-626    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit4);
     2bc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x3>
     2c0:	d0 de       	rcall	.-608    	; 0x62 <CathodeSwitch>
            SET_BIT(PORTA, 1 << 3); // RDP turn on
     2c2:	73 9a       	sbi	0x0e, 3	; 14
     2c4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2c8:	84 cf       	rjmp	.-248    	; 0x1d2 <__vector_12+0x40>
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit4);
            break;
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
     2ca:	85 e0       	ldi	r24, 0x05	; 5
     2cc:	be de       	rcall	.-644    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit5);
     2ce:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x4>
     2d2:	c7 de       	rcall	.-626    	; 0x62 <CathodeSwitch>
     2d4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2d8:	7c cf       	rjmp	.-264    	; 0x1d2 <__vector_12+0x40>
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit3);
            break;
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
     2da:	84 e0       	ldi	r24, 0x04	; 4
     2dc:	b6 de       	rcall	.-660    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit4);
     2de:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x3>
     2e2:	bf de       	rcall	.-642    	; 0x62 <CathodeSwitch>
     2e4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2e8:	74 cf       	rjmp	.-280    	; 0x1d2 <__vector_12+0x40>
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit1);
            break;
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	ae de       	rcall	.-676    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit2);
     2ee:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <indication+0x1>
     2f2:	b7 de       	rcall	.-658    	; 0x62 <CathodeSwitch>
     2f4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2f8:	6c cf       	rjmp	.-296    	; 0x1d2 <__vector_12+0x40>
    case DISPLAY_TIME:
    case DISPLAY_CAD:
        switch (indication.counter)
        {
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	a6 de       	rcall	.-692    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit1);
     2fe:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <indication>
     302:	af de       	rcall	.-674    	; 0x62 <CathodeSwitch>
     304:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     308:	64 cf       	rjmp	.-312    	; 0x1d2 <__vector_12+0x40>

0000030a <__vector_16>:
    ++cad.counter;
    voltage.pid.run = true;
}

ISR(ADC_vect)
{
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
    if (++voltage.adc.counter <= ADC_SAMPLES) // Get ADC_sum by x samples
     32c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <voltage+0x10>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	28 0f       	add	r18, r24
     334:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <voltage+0x10>
     338:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <voltage+0xc>
     33c:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <voltage+0xd>
     340:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <voltage+0xe>
     344:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <voltage+0xf>
     348:	25 31       	cpi	r18, 0x15	; 21
     34a:	b0 f5       	brcc	.+108    	; 0x3b8 <__vector_16+0xae>
        voltage.adc.sum += ADC;
     34c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
     350:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
     354:	ab 01       	movw	r20, r22
     356:	bc 01       	movw	r22, r24
     358:	42 0f       	add	r20, r18
     35a:	53 1f       	adc	r21, r19
     35c:	61 1d       	adc	r22, r1
     35e:	71 1d       	adc	r23, r1
     360:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <voltage+0xc>
     364:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <voltage+0xd>
     368:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <voltage+0xe>
     36c:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <voltage+0xf>
     370:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <voltage+0x4>
     374:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <voltage+0x5>
     378:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <voltage+0x6>
     37c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <voltage+0x7>
        voltage.adc.value = voltage.adc.mean * VREF / 1024;
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
        voltage.adc.sum = 0;
        voltage.adc.counter = 0;
    }
    if (voltage.adc.valueScaled > 200.0)
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	48 e4       	ldi	r20, 0x48	; 72
     386:	53 e4       	ldi	r21, 0x43	; 67
     388:	87 d6       	rcall	.+3342   	; 0x1098 <__gesf2>
     38a:	18 16       	cp	r1, r24
     38c:	24 f4       	brge	.+8      	; 0x396 <__vector_16+0x8c>
        OCR1B = 0; // Output voltage limitation
     38e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     392:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
}
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti
{
    if (++voltage.adc.counter <= ADC_SAMPLES) // Get ADC_sum by x samples
        voltage.adc.sum += ADC;
    else
    {
        voltage.adc.mean = voltage.adc.sum / ADC_SAMPLES;
     3b8:	24 e1       	ldi	r18, 0x14	; 20
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	02 d5       	rcall	.+2564   	; 0xdc6 <__udivmodsi4>
     3c2:	ca 01       	movw	r24, r20
     3c4:	b9 01       	movw	r22, r18
     3c6:	b6 d5       	rcall	.+2924   	; 0xf34 <__floatunsisf>
     3c8:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <voltage+0x8>
     3cc:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <voltage+0x9>
     3d0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <voltage+0xa>
     3d4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <voltage+0xb>
        voltage.adc.value = voltage.adc.mean * VREF / 1024;
     3d8:	2d ec       	ldi	r18, 0xCD	; 205
     3da:	3c ec       	ldi	r19, 0xCC	; 204
     3dc:	4c e8       	ldi	r20, 0x8C	; 140
     3de:	5a e3       	ldi	r21, 0x3A	; 58
     3e0:	5f d6       	rcall	.+3262   	; 0x10a0 <__mulsf3>
     3e2:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <voltage>
     3e6:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <voltage+0x1>
     3ea:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <voltage+0x2>
     3ee:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <voltage+0x3>
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	43 e5       	ldi	r20, 0x53	; 83
     3f8:	53 e4       	ldi	r21, 0x43	; 67
     3fa:	52 d6       	rcall	.+3236   	; 0x10a0 <__mulsf3>
     3fc:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <voltage+0x4>
     400:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <voltage+0x5>
     404:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <voltage+0x6>
     408:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <voltage+0x7>
        voltage.adc.sum = 0;
     40c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <voltage+0xc>
     410:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <voltage+0xd>
     414:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <voltage+0xe>
     418:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <voltage+0xf>
        voltage.adc.counter = 0;
     41c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <voltage+0x10>
     420:	af cf       	rjmp	.-162    	; 0x380 <__vector_16+0x76>

00000422 <main>:
        OCR1B = 0; // Output voltage limitation
}

int main(void)
{
    voltage.pid.pidData.Kp = K_P;
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	97 ed       	ldi	r25, 0xD7	; 215
     426:	a3 e2       	ldi	r26, 0x23	; 35
     428:	bc e3       	ldi	r27, 0x3C	; 60
     42a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <voltage+0x29>
     42e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <voltage+0x2a>
     432:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <voltage+0x2b>
     436:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <voltage+0x2c>
    voltage.pid.pidData.Ki = K_I;
     43a:	87 e1       	ldi	r24, 0x17	; 23
     43c:	97 eb       	ldi	r25, 0xB7	; 183
     43e:	a1 e5       	ldi	r26, 0x51	; 81
     440:	b8 e3       	ldi	r27, 0x38	; 56
     442:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <voltage+0x2d>
     446:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <voltage+0x2e>
     44a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <voltage+0x2f>
     44e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <voltage+0x30>
    voltage.pid.pidData.Kd = K_D;
     452:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <voltage+0x31>
     456:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <voltage+0x32>
     45a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <voltage+0x33>
     45e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <voltage+0x34>
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	8e e1       	ldi	r24, 0x1E	; 30
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	fb d3       	rcall	.+2038   	; 0xc66 <arm_pid_init_f32>
    IO_Init();
     470:	5b de       	rcall	.-842    	; 0x128 <IO_Init>
    TIMx_Init(0u);
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	66 de       	rcall	.-820    	; 0x142 <TIMx_Init>
    TIMx_Init(1u);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	64 de       	rcall	.-824    	; 0x142 <TIMx_Init>
    ADC_Init();
     47a:	8a d3       	rcall	.+1812   	; 0xb90 <ADC_Init>
    I2C_Init();
     47c:	56 d4       	rcall	.+2220   	; 0xd2a <I2C_Init>
    sei();
     47e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	83 ed       	ldi	r24, 0xD3	; 211
     484:	90 e3       	ldi	r25, 0x30	; 48
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <main+0x64>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x6e>
     490:	00 00       	nop
    _delay_ms(1000);

    /* PCF8563 CLKOUT turnoff */
    I2C_Start();
     492:	4f d4       	rcall	.+2206   	; 0xd32 <I2C_Start>
    I2C_SendByte(0xA2); // Device address + write bit
     494:	82 ea       	ldi	r24, 0xA2	; 162
     496:	59 d4       	rcall	.+2226   	; 0xd4a <I2C_SendByte>
    I2C_SendByte(0x0D); // Pointer
     498:	8d e0       	ldi	r24, 0x0D	; 13
     49a:	57 d4       	rcall	.+2222   	; 0xd4a <I2C_SendByte>
    I2C_SendByte(0x00); // CLKOUT output is set high-impedance
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	55 d4       	rcall	.+2218   	; 0xd4a <I2C_SendByte>
    I2C_Stop();
     4a0:	50 d4       	rcall	.+2208   	; 0xd42 <I2C_Stop>

    /* Read reference temperature */
    I2C_Start();
     4a2:	47 d4       	rcall	.+2190   	; 0xd32 <I2C_Start>
    I2C_SendByte(0x90); // Device address + write bit
     4a4:	80 e9       	ldi	r24, 0x90	; 144
     4a6:	51 d4       	rcall	.+2210   	; 0xd4a <I2C_SendByte>
    I2C_SendByte(0x00); // Pointer
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	4f d4       	rcall	.+2206   	; 0xd4a <I2C_SendByte>
    I2C_Start(); // Restart
     4ac:	42 d4       	rcall	.+2180   	; 0xd32 <I2C_Start>
    I2C_SendByte(0x91); // Device address + read bit
     4ae:	81 e9       	ldi	r24, 0x91	; 145
     4b0:	4c d4       	rcall	.+2200   	; 0xd4a <I2C_SendByte>
    temperature.msb = I2C_ReadByte();
     4b2:	55 d4       	rcall	.+2218   	; 0xd5e <I2C_ReadByte>
     4b4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
    temperature.lsb = I2C_ReadLastByte();
     4b8:	5c d4       	rcall	.+2232   	; 0xd72 <I2C_ReadLastByte>
     4ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
    I2C_Stop();
     4be:	41 d4       	rcall	.+2178   	; 0xd42 <I2C_Stop>
    temperature.valueRef = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     4c0:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     4c4:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     4c8:	76 27       	eor	r23, r22
     4ca:	67 27       	eor	r22, r23
     4cc:	76 27       	eor	r23, r22
     4ce:	76 95       	lsr	r23
     4d0:	67 95       	ror	r22
     4d2:	72 95       	swap	r23
     4d4:	62 95       	swap	r22
     4d6:	6f 70       	andi	r22, 0x0F	; 15
     4d8:	67 27       	eor	r22, r23
     4da:	7f 70       	andi	r23, 0x0F	; 15
     4dc:	67 27       	eor	r22, r23
     4de:	07 2e       	mov	r0, r23
     4e0:	00 0c       	add	r0, r0
     4e2:	88 0b       	sbc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	28 d5       	rcall	.+2640   	; 0xf38 <__floatsisf>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4a ef       	ldi	r20, 0xFA	; 250
     4ee:	52 e4       	ldi	r21, 0x42	; 66
     4f0:	d7 d5       	rcall	.+2990   	; 0x10a0 <__mulsf3>
     4f2:	f4 d4       	rcall	.+2536   	; 0xedc <__fixunssfsi>
     4f4:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <temperature+0x3>
     4f8:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <temperature+0x2>
    temperature.value = temperature.valueRef;
     4fc:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     500:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
        if (!temperature.isCompensated)
        {
            if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
                ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
            if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
                ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
     504:	c1 e0       	ldi	r28, 0x01	; 1
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
                {
                case 1:
                    indication.digit1 = (cad.counter / (1445 * 2 / 10)) % 10;
     506:	3a e0       	ldi	r19, 0x0A	; 10
     508:	83 2e       	mov	r8, r19
     50a:	91 2c       	mov	r9, r1
     50c:	a1 2c       	mov	r10, r1
     50e:	b1 2c       	mov	r11, r1
     510:	49 e6       	ldi	r20, 0x69	; 105
     512:	44 2e       	mov	r4, r20
     514:	55 24       	eor	r5, r5
     516:	53 94       	inc	r5
     518:	61 2c       	mov	r6, r1
     51a:	71 2c       	mov	r7, r1
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensationFactor;
                    }

                    indication.digit3 = temperature.value / 10000;
     51c:	50 e1       	ldi	r21, 0x10	; 16
     51e:	25 2e       	mov	r2, r21
     520:	57 e2       	ldi	r21, 0x27	; 39
     522:	35 2e       	mov	r3, r21
                    indication.digit4 = (temperature.value / 1000) % 10;
     524:	0a e0       	ldi	r16, 0x0A	; 10
     526:	10 e0       	ldi	r17, 0x00	; 0
    // I2C_SendByte(RTC_DECtoBCD(10)); // Hour
    // I2C_Stop();

    while (1)
    {
        SoftStart(&indication, &voltage);
     528:	6d e0       	ldi	r22, 0x0D	; 13
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	85 e5       	ldi	r24, 0x55	; 85
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	a5 dd       	rcall	.-1206   	; 0x7c <SoftStart>
        // voltage.pid.setPoint = VOUT_TASK; // Manual control

        /* Get time */
        I2C_Start();
     532:	ff d3       	rcall	.+2046   	; 0xd32 <I2C_Start>
        I2C_SendByte(0xA2); // Device address + write bit
     534:	82 ea       	ldi	r24, 0xA2	; 162
     536:	09 d4       	rcall	.+2066   	; 0xd4a <I2C_SendByte>
        I2C_SendByte(0x02); // Pointer
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	07 d4       	rcall	.+2062   	; 0xd4a <I2C_SendByte>
        I2C_Start(); // Restart
     53c:	fa d3       	rcall	.+2036   	; 0xd32 <I2C_Start>
        I2C_SendByte(0xA3); // Device address + read bit
     53e:	83 ea       	ldi	r24, 0xA3	; 163
     540:	04 d4       	rcall	.+2056   	; 0xd4a <I2C_SendByte>
        time.sec = RTC_BCDtoDEC((I2C_ReadByte()) & 0x7F);
     542:	0d d4       	rcall	.+2074   	; 0xd5e <I2C_ReadByte>
     544:	8f 77       	andi	r24, 0x7F	; 127
     546:	e0 d3       	rcall	.+1984   	; 0xd08 <RTC_BCDtoDEC>
     548:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <time>
        time.min = RTC_BCDtoDEC((I2C_ReadByte()) & 0x7F);
     54c:	08 d4       	rcall	.+2064   	; 0xd5e <I2C_ReadByte>
     54e:	8f 77       	andi	r24, 0x7F	; 127
     550:	db d3       	rcall	.+1974   	; 0xd08 <RTC_BCDtoDEC>
     552:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <time+0x1>
        time.hour = RTC_BCDtoDEC((I2C_ReadLastByte()) & 0x3F);
     556:	0d d4       	rcall	.+2074   	; 0xd72 <I2C_ReadLastByte>
     558:	8f 73       	andi	r24, 0x3F	; 63
     55a:	d6 d3       	rcall	.+1964   	; 0xd08 <RTC_BCDtoDEC>
     55c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <time+0x2>
        I2C_Stop();
     560:	f0 d3       	rcall	.+2016   	; 0xd42 <I2C_Stop>

        /* TimeRes */
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
     562:	60 99       	sbic	0x0c, 0	; 12
     564:	b4 c0       	rjmp	.+360    	; 0x6ce <main+0x2ac>
        {
            if (++buttonCounter == 0xFF)
     566:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	8f 3f       	cpi	r24, 0xFF	; 255
     56e:	09 f4       	brne	.+2      	; 0x572 <main+0x150>
     570:	27 c1       	rjmp	.+590    	; 0x7c0 <main+0x39e>
     572:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        // }
        // if ((time.adjusted) && (time.hour == 12))
        //     time.adjusted = false;

        /* Temperature compensation */
        if (!temperature.isCompensated)
     576:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
     57a:	81 11       	cpse	r24, r1
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <main+0x18a>
     57e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <temperature+0xa>
     582:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <temperature+0x6>
     586:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <temperature+0x7>
        {
            if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
     58a:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <time>
     58e:	30 ff       	sbrs	r19, 0
     590:	cf c0       	rjmp	.+414    	; 0x730 <main+0x30e>
     592:	22 23       	and	r18, r18
     594:	39 f0       	breq	.+14     	; 0x5a4 <main+0x182>
                ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperature+0x7>
     59c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperature+0x6>
     5a0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temperature+0xa>
            if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
                ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
            if (temperature.compensationCounter == 3600)
     5a4:	80 31       	cpi	r24, 0x10	; 16
     5a6:	9e 40       	sbci	r25, 0x0E	; 14
     5a8:	09 f4       	brne	.+2      	; 0x5ac <main+0x18a>
     5aa:	cf c0       	rjmp	.+414    	; 0x74a <main+0x328>
                temperature.isCompensated = true; // Temperature is compensated after 3600 sec (60 min)
            }
        }

        /* Daily turnoff */
        if (time.hour < 6)
     5ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     5b0:	86 30       	cpi	r24, 0x06	; 6
     5b2:	08 f4       	brcc	.+2      	; 0x5b6 <main+0x194>
     5b4:	8f c0       	rjmp	.+286    	; 0x6d4 <main+0x2b2>
                    CLEAR_BIT(PORTD, 1 << 0);
            }
        }
        else
        {
            indication.pause = false, indication.isTurnedOff = false;
     5b6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <indication+0x8>
     5ba:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <indication+0x9>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
     5be:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0xa>
     5c2:	81 11       	cpse	r24, r1
     5c4:	10 c0       	rjmp	.+32     	; 0x5e6 <main+0x1c4>
            {
                OCR1B = 0;
     5c6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     5ca:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     5ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     5d2:	80 62       	ori	r24, 0x20	; 32
     5d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                CLEAR_BIT(PORTD, 1 << 0);
     5d8:	58 98       	cbi	0x0b, 0	; 11
                indication.pwmOutputStatus = CONNECTED;
     5da:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <indication+0xa>
            }
        }

        if (!indication.pause)
     5de:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x8>
     5e2:	81 11       	cpse	r24, r1
     5e4:	a1 cf       	rjmp	.-190    	; 0x528 <main+0x106>
        {

            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
     5e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <voltage+0x3d>
     5ea:	81 11       	cpse	r24, r1
     5ec:	32 c1       	rjmp	.+612    	; 0x852 <main+0x430>
                OCR1B = voltage.pid.processValue * 0x1FF;
                voltage.pid.run = false;
            }

            /* Prepare time */
            if (indication.dispMode == DISPLAY_TIME)
     5ee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <indication+0x7>
     5f2:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     5f6:	26 ef       	ldi	r18, 0xF6	; 246
     5f8:	2d 0f       	add	r18, r29
     5fa:	81 11       	cpse	r24, r1
     5fc:	f3 c0       	rjmp	.+486    	; 0x7e4 <main+0x3c2>
            {
                indication.digit1 = time.hour / 10;
     5fe:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     602:	6a e0       	ldi	r22, 0x0A	; 10
     604:	c0 d3       	rcall	.+1920   	; 0xd86 <__udivmodqi4>
     606:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <indication>
                indication.digit2 = time.hour % 10;
     60a:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <indication+0x1>
                indication.digit3 = time.min / 10;
     60e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     612:	b9 d3       	rcall	.+1906   	; 0xd86 <__udivmodqi4>
     614:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <indication+0x2>
                indication.digit4 = time.min % 10;
     618:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <indication+0x3>
                indication.digit5 = time.sec / 10;
     61c:	8d 2f       	mov	r24, r29
     61e:	b3 d3       	rcall	.+1894   	; 0xd86 <__udivmodqi4>
     620:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <indication+0x4>
                indication.digit6 = time.sec % 10;
     624:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <indication+0x5>
            }

            /* Prepare temperature */
            if ((time.sec > 9) && (time.sec < 15))
     628:	25 30       	cpi	r18, 0x05	; 5
     62a:	08 f4       	brcc	.+2      	; 0x62e <main+0x20c>
     62c:	e1 c0       	rjmp	.+450    	; 0x7f0 <main+0x3ce>
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     62e:	8d ed       	ldi	r24, 0xDD	; 221
     630:	8d 0f       	add	r24, r29
     632:	85 30       	cpi	r24, 0x05	; 5
     634:	08 f0       	brcs	.+2      	; 0x638 <main+0x216>
     636:	78 cf       	rjmp	.-272    	; 0x528 <main+0x106>
            {
                if (indication.dispMode != DISPLAY_CAD)
                    indication.dispMode = DISPLAY_CAD, cad.counter = 0;
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <indication+0x7>
     63e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     642:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     646:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     64a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     64e:	60 e0       	ldi	r22, 0x00	; 0
                indication.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
     650:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <indication>
                indication.digit2 = indication.digit1;
     654:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication+0x1>
                indication.digit3 = indication.digit1;
     658:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                indication.digit4 = indication.digit1;
     65c:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x3>
                indication.digit5 = indication.digit1;
     660:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x4>
                indication.digit6 = indication.digit1;
     664:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x5>
                indication.digit6 = 0;
                cad.counter = 0;
                cad.updateStage = 1;
                cad.update = true;
            }
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
     668:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
     66c:	88 23       	and	r24, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <main+0x250>
     670:	5b cf       	rjmp	.-330    	; 0x528 <main+0x106>
            {
                switch (cad.updateStage)
     672:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cad+0x4>
     676:	83 30       	cpi	r24, 0x03	; 3
     678:	09 f4       	brne	.+2      	; 0x67c <main+0x25a>
     67a:	36 c2       	rjmp	.+1132   	; 0xae8 <main+0x6c6>
     67c:	08 f4       	brcc	.+2      	; 0x680 <main+0x25e>
     67e:	5b c2       	rjmp	.+1206   	; 0xb36 <main+0x714>
     680:	85 30       	cpi	r24, 0x05	; 5
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x264>
     684:	0b c2       	rjmp	.+1046   	; 0xa9c <main+0x67a>
     686:	08 f4       	brcc	.+2      	; 0x68a <main+0x268>
     688:	e2 c1       	rjmp	.+964    	; 0xa4e <main+0x62c>
     68a:	86 30       	cpi	r24, 0x06	; 6
     68c:	09 f0       	breq	.+2      	; 0x690 <main+0x26e>
     68e:	4c cf       	rjmp	.-360    	; 0x528 <main+0x106>
                    if ((time.sec / 10) == indication.digit5)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 6:
                    indication.digit6 = (cad.counter / (1445 * 2 / 10)) % 10;
     690:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     694:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     698:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     69c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     6a0:	21 e2       	ldi	r18, 0x21	; 33
     6a2:	31 e0       	ldi	r19, 0x01	; 1
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	8e d3       	rcall	.+1820   	; 0xdc6 <__udivmodsi4>
     6aa:	ca 01       	movw	r24, r20
     6ac:	b9 01       	movw	r22, r18
     6ae:	a5 01       	movw	r20, r10
     6b0:	94 01       	movw	r18, r8
     6b2:	89 d3       	rcall	.+1810   	; 0xdc6 <__udivmodsi4>
     6b4:	26 2f       	mov	r18, r22
     6b6:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x5>
                    if ((time.sec % 10) == indication.digit6)
     6ba:	8d 2f       	mov	r24, r29
     6bc:	6a e0       	ldi	r22, 0x0A	; 10
     6be:	63 d3       	rcall	.+1734   	; 0xd86 <__udivmodqi4>
     6c0:	92 13       	cpse	r25, r18
     6c2:	32 cf       	rjmp	.-412    	; 0x528 <main+0x106>
                        cad.update = false, indication.dispMode = DISPLAY_TIME;
     6c4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cad+0x5>
     6c8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <indication+0x7>
     6cc:	2d cf       	rjmp	.-422    	; 0x528 <main+0x106>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
                I2C_Stop();
            }
        }
        else
            buttonCounter = 0;
     6ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d2:	51 cf       	rjmp	.-350    	; 0x576 <main+0x154>
        }

        /* Daily turnoff */
        if (time.hour < 6)
        {
            indication.isTurnedOff = true;
     6d4:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <indication+0x9>
            SoftTurnoff(&indication, &voltage);
     6d8:	6d e0       	ldi	r22, 0x0D	; 13
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	85 e5       	ldi	r24, 0x55	; 85
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	fa dc       	rcall	.-1548   	; 0xd6 <SoftTurnoff>
            if (voltage.pid.setPoint < 100.0)
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	48 ec       	ldi	r20, 0xC8	; 200
     6e8:	52 e4       	ldi	r21, 0x42	; 66
     6ea:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     6ee:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     6f2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     6f6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     6fa:	ec d3       	rcall	.+2008   	; 0xed4 <__cmpsf2>
     6fc:	87 ff       	sbrs	r24, 7
     6fe:	6f cf       	rjmp	.-290    	; 0x5de <main+0x1bc>
            {
                indication.pause = true, Display_DeadTime();
     700:	c0 93 5d 01 	sts	0x015D, r28	; 0x80015d <indication+0x8>
     704:	b6 dc       	rcall	.-1684   	; 0x72 <Display_DeadTime>
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
     706:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0xa>
     70a:	88 23       	and	r24, r24
     70c:	59 f0       	breq	.+22     	; 0x724 <main+0x302>
                {
                    OCR1B = 0;
     70e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     712:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                    CLEAR_BIT(TCCR1A, 1 << COM1B1); // OC1A/OC1B disconnected
     716:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     71a:	8f 7d       	andi	r24, 0xDF	; 223
     71c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                    indication.pwmOutputStatus = DISCONNECTED;
     720:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <indication+0xa>
                }
                if (time.sec % 2) // Turnoff status LED blink
     724:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <time>
     728:	80 ff       	sbrs	r24, 0
     72a:	91 c0       	rjmp	.+290    	; 0x84e <main+0x42c>
                    SET_BIT(PORTD, 1 << 0);
     72c:	58 9a       	sbi	0x0b, 0	; 11
     72e:	57 cf       	rjmp	.-338    	; 0x5de <main+0x1bc>
        /* Temperature compensation */
        if (!temperature.isCompensated)
        {
            if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
                ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
            if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
     730:	21 11       	cpse	r18, r1
     732:	38 cf       	rjmp	.-400    	; 0x5a4 <main+0x182>
                ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperature+0x7>
     73a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperature+0x6>
     73e:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <temperature+0xa>
            if (temperature.compensationCounter == 3600)
     742:	80 31       	cpi	r24, 0x10	; 16
     744:	9e 40       	sbci	r25, 0x0E	; 14
     746:	09 f0       	breq	.+2      	; 0x74a <main+0x328>
     748:	31 cf       	rjmp	.-414    	; 0x5ac <main+0x18a>
            {
                I2C_Start();
     74a:	f3 d2       	rcall	.+1510   	; 0xd32 <I2C_Start>
                I2C_SendByte(0x90); // Device address + write bit
     74c:	80 e9       	ldi	r24, 0x90	; 144
     74e:	fd d2       	rcall	.+1530   	; 0xd4a <I2C_SendByte>
                I2C_SendByte(0x00); // Pointer
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	fb d2       	rcall	.+1526   	; 0xd4a <I2C_SendByte>
                I2C_Start(); // Restart
     754:	ee d2       	rcall	.+1500   	; 0xd32 <I2C_Start>
                I2C_SendByte(0x91); // Device address + read bit
     756:	81 e9       	ldi	r24, 0x91	; 145
     758:	f8 d2       	rcall	.+1520   	; 0xd4a <I2C_SendByte>
                temperature.msb = I2C_ReadByte();
     75a:	01 d3       	rcall	.+1538   	; 0xd5e <I2C_ReadByte>
     75c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                temperature.lsb = I2C_ReadLastByte();
     760:	08 d3       	rcall	.+1552   	; 0xd72 <I2C_ReadLastByte>
     762:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                I2C_Stop();
     766:	ed d2       	rcall	.+1498   	; 0xd42 <I2C_Stop>
                temperature.value = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     768:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     76c:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     770:	76 27       	eor	r23, r22
     772:	67 27       	eor	r22, r23
     774:	76 27       	eor	r23, r22
     776:	76 95       	lsr	r23
     778:	67 95       	ror	r22
     77a:	72 95       	swap	r23
     77c:	62 95       	swap	r22
     77e:	6f 70       	andi	r22, 0x0F	; 15
     780:	67 27       	eor	r22, r23
     782:	7f 70       	andi	r23, 0x0F	; 15
     784:	67 27       	eor	r22, r23
     786:	07 2e       	mov	r0, r23
     788:	00 0c       	add	r0, r0
     78a:	88 0b       	sbc	r24, r24
     78c:	99 0b       	sbc	r25, r25
     78e:	d4 d3       	rcall	.+1960   	; 0xf38 <__floatsisf>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	4a ef       	ldi	r20, 0xFA	; 250
     796:	52 e4       	ldi	r21, 0x42	; 66
     798:	83 d4       	rcall	.+2310   	; 0x10a0 <__mulsf3>
     79a:	a0 d3       	rcall	.+1856   	; 0xedc <__fixunssfsi>
     79c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     7a0:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
                temperature.compensationFactor = temperature.valueRef - temperature.value;
     7a4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temperature+0x2>
     7a8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temperature+0x3>
     7ac:	c9 01       	movw	r24, r18
     7ae:	86 1b       	sub	r24, r22
     7b0:	97 0b       	sbc	r25, r23
     7b2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperature+0x5>
     7b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperature+0x4>
                temperature.isCompensated = true; // Temperature is compensated after 3600 sec (60 min)
     7ba:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <temperature+0xb>
     7be:	f6 ce       	rjmp	.-532    	; 0x5ac <main+0x18a>
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
        {
            if (++buttonCounter == 0xFF)
            {
                buttonCounter = 0;
     7c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                I2C_Start();
     7c4:	b6 d2       	rcall	.+1388   	; 0xd32 <I2C_Start>
                I2C_SendByte(0xA2); // Device address + write bit
     7c6:	82 ea       	ldi	r24, 0xA2	; 162
     7c8:	c0 d2       	rcall	.+1408   	; 0xd4a <I2C_SendByte>
                I2C_SendByte(0x02); // Pointer
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	be d2       	rcall	.+1404   	; 0xd4a <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Sec
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	a6 d2       	rcall	.+1356   	; 0xd1e <RTC_DECtoBCD>
     7d2:	bb d2       	rcall	.+1398   	; 0xd4a <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Min
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	a3 d2       	rcall	.+1350   	; 0xd1e <RTC_DECtoBCD>
     7d8:	b8 d2       	rcall	.+1392   	; 0xd4a <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
     7da:	84 e1       	ldi	r24, 0x14	; 20
     7dc:	a0 d2       	rcall	.+1344   	; 0xd1e <RTC_DECtoBCD>
     7de:	b5 d2       	rcall	.+1386   	; 0xd4a <I2C_SendByte>
                I2C_Stop();
     7e0:	b0 d2       	rcall	.+1376   	; 0xd42 <I2C_Stop>
     7e2:	c9 ce       	rjmp	.-622    	; 0x576 <main+0x154>
                indication.digit5 = time.sec / 10;
                indication.digit6 = time.sec % 10;
            }

            /* Prepare temperature */
            if ((time.sec > 9) && (time.sec < 15))
     7e4:	25 30       	cpi	r18, 0x05	; 5
     7e6:	08 f0       	brcs	.+2      	; 0x7ea <main+0x3c8>
     7e8:	73 c0       	rjmp	.+230    	; 0x8d0 <main+0x4ae>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <main+0x3ce>
     7ee:	9c ce       	rjmp	.-712    	; 0x528 <main+0x106>
                {
                    /* Read temperature */
                    if (temperature.isCompensated)
     7f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
     7f4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <temperature>
     7f8:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <temperature+0x1>
     7fc:	81 11       	cpse	r24, r1
     7fe:	d7 c0       	rjmp	.+430    	; 0x9ae <main+0x58c>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensationFactor;
                    }

                    indication.digit3 = temperature.value / 10000;
     800:	c9 01       	movw	r24, r18
     802:	b1 01       	movw	r22, r2
     804:	cc d2       	rcall	.+1432   	; 0xd9e <__udivmodhi4>
     806:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                    indication.digit4 = (temperature.value / 1000) % 10;
     80a:	c9 01       	movw	r24, r18
     80c:	68 ee       	ldi	r22, 0xE8	; 232
     80e:	73 e0       	ldi	r23, 0x03	; 3
     810:	c6 d2       	rcall	.+1420   	; 0xd9e <__udivmodhi4>
     812:	cb 01       	movw	r24, r22
     814:	b8 01       	movw	r22, r16
     816:	c3 d2       	rcall	.+1414   	; 0xd9e <__udivmodhi4>
     818:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <indication+0x3>
                    indication.digit5 = (temperature.value / 100) % 10;
     81c:	c9 01       	movw	r24, r18
     81e:	64 e6       	ldi	r22, 0x64	; 100
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	bd d2       	rcall	.+1402   	; 0xd9e <__udivmodhi4>
     824:	cb 01       	movw	r24, r22
     826:	b8 01       	movw	r22, r16
     828:	ba d2       	rcall	.+1396   	; 0xd9e <__udivmodhi4>
     82a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <indication+0x4>
                    indication.digit6 = (temperature.value / 10) % 10;
     82e:	c9 01       	movw	r24, r18
     830:	b8 01       	movw	r22, r16
     832:	b5 d2       	rcall	.+1386   	; 0xd9e <__udivmodhi4>
     834:	cb 01       	movw	r24, r22
     836:	b8 01       	movw	r22, r16
     838:	b2 d2       	rcall	.+1380   	; 0xd9e <__udivmodhi4>
     83a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication+0x5>
                    indication.dispMode = DISPLAY_TEMPERATURE;
     83e:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <indication+0x7>
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     842:	8d ed       	ldi	r24, 0xDD	; 221
     844:	8d 0f       	add	r24, r29
     846:	85 30       	cpi	r24, 0x05	; 5
     848:	08 f4       	brcc	.+2      	; 0x84c <main+0x42a>
     84a:	f6 ce       	rjmp	.-532    	; 0x638 <main+0x216>
     84c:	6d ce       	rjmp	.-806    	; 0x528 <main+0x106>
                    indication.pwmOutputStatus = DISCONNECTED;
                }
                if (time.sec % 2) // Turnoff status LED blink
                    SET_BIT(PORTD, 1 << 0);
                else
                    CLEAR_BIT(PORTD, 1 << 0);
     84e:	58 98       	cbi	0x0b, 0	; 11
     850:	c6 ce       	rjmp	.-628    	; 0x5de <main+0x1bc>

            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);
     852:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <voltage+0x4>
     856:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <voltage+0x5>
     85a:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <voltage+0x6>
     85e:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <voltage+0x7>
     862:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     866:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     86a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     86e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     872:	cb d2       	rcall	.+1430   	; 0xe0a <__subsf3>
     874:	ab 01       	movw	r20, r22
     876:	bc 01       	movw	r22, r24
     878:	8e e1       	ldi	r24, 0x1E	; 30
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	9a d1       	rcall	.+820    	; 0xbb2 <arm_pid_f32>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	a9 01       	movw	r20, r18
     888:	25 d3       	rcall	.+1610   	; 0xed4 <__cmpsf2>
     88a:	87 fd       	sbrc	r24, 7
     88c:	85 c0       	rjmp	.+266    	; 0x998 <main+0x576>
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
     88e:	23 e3       	ldi	r18, 0x33	; 51
     890:	33 e3       	ldi	r19, 0x33	; 51
     892:	43 e3       	ldi	r20, 0x33	; 51
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	fe d3       	rcall	.+2044   	; 0x1098 <__gesf2>
     89c:	18 16       	cp	r1, r24
     89e:	0c f4       	brge	.+2      	; 0x8a2 <main+0x480>
     8a0:	c7 c0       	rjmp	.+398    	; 0xa30 <main+0x60e>
        {

            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
     8a2:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <voltage+0x39>
     8a6:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <voltage+0x3a>
     8aa:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <voltage+0x3b>
     8ae:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <voltage+0x3c>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e8       	ldi	r19, 0x80	; 128
     8b6:	4f ef       	ldi	r20, 0xFF	; 255
     8b8:	53 e4       	ldi	r21, 0x43	; 67
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	f0 d3       	rcall	.+2016   	; 0x10a0 <__mulsf3>
     8c0:	0d d3       	rcall	.+1562   	; 0xedc <__fixunssfsi>
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;

                OCR1B = voltage.pid.processValue * 0x1FF;
     8c2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     8c6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                voltage.pid.run = false;
     8ca:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <voltage+0x3d>
     8ce:	8f ce       	rjmp	.-738    	; 0x5ee <main+0x1cc>
                    indication.digit5 = (temperature.value / 100) % 10;
                    indication.digit6 = (temperature.value / 10) % 10;
                    indication.dispMode = DISPLAY_TEMPERATURE;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <main+0x4be>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);
     8d4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <indication+0x7>
     8d8:	73 98       	cbi	0x0e, 3	; 14
     8da:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     8de:	80 e0       	ldi	r24, 0x00	; 0

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     8e0:	9d ed       	ldi	r25, 0xDD	; 221
     8e2:	9d 0f       	add	r25, r29
     8e4:	95 30       	cpi	r25, 0x05	; 5
     8e6:	a0 f4       	brcc	.+40     	; 0x910 <main+0x4ee>
            {
                if (indication.dispMode != DISPLAY_CAD)
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	09 f0       	breq	.+2      	; 0x8ee <main+0x4cc>
     8ec:	a5 ce       	rjmp	.-694    	; 0x638 <main+0x216>
     8ee:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     8f2:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     8f6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     8fa:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     8fe:	a3 01       	movw	r20, r6
     900:	92 01       	movw	r18, r4
     902:	61 d2       	rcall	.+1218   	; 0xdc6 <__udivmodsi4>
     904:	ca 01       	movw	r24, r20
     906:	b9 01       	movw	r22, r18
     908:	a5 01       	movw	r20, r10
     90a:	94 01       	movw	r18, r8
     90c:	5c d2       	rcall	.+1208   	; 0xdc6 <__udivmodsi4>
     90e:	a0 ce       	rjmp	.-704    	; 0x650 <main+0x22e>
                indication.digit3 = indication.digit1;
                indication.digit4 = indication.digit1;
                indication.digit5 = indication.digit1;
                indication.digit6 = indication.digit1;
            }
            else if ((indication.dispMode == DISPLAY_CAD) && (!cad.update))
     910:	82 30       	cpi	r24, 0x02	; 2
     912:	09 f0       	breq	.+2      	; 0x916 <main+0x4f4>
     914:	09 ce       	rjmp	.-1006   	; 0x528 <main+0x106>
     916:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
     91a:	81 11       	cpse	r24, r1
     91c:	aa ce       	rjmp	.-684    	; 0x672 <main+0x250>
            {
                indication.digit1 = 0;
                indication.digit2 = 0;
     91e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <indication+0x1>
                indication.digit3 = 0;
     922:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <indication+0x2>
                indication.digit4 = 0;
     926:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <indication+0x3>
                indication.digit5 = 0;
     92a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <indication+0x4>
                indication.digit6 = 0;
     92e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <indication+0x5>
                cad.counter = 0;
     932:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     936:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     93a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     93e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
                cad.updateStage = 1;
     942:	c0 93 4f 01 	sts	0x014F, r28	; 0x80014f <cad+0x4>
                cad.update = true;
     946:	c0 93 50 01 	sts	0x0150, r28	; 0x800150 <cad+0x5>
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
                {
                case 1:
                    indication.digit1 = (cad.counter / (1445 * 2 / 10)) % 10;
     94a:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     94e:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     952:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     956:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     95a:	21 e2       	ldi	r18, 0x21	; 33
     95c:	31 e0       	ldi	r19, 0x01	; 1
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	31 d2       	rcall	.+1122   	; 0xdc6 <__udivmodsi4>
     964:	ca 01       	movw	r24, r20
     966:	b9 01       	movw	r22, r18
     968:	a5 01       	movw	r20, r10
     96a:	94 01       	movw	r18, r8
     96c:	2c d2       	rcall	.+1112   	; 0xdc6 <__udivmodsi4>
     96e:	26 2f       	mov	r18, r22
     970:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <indication>
                    if ((time.hour / 10) == indication.digit1)
     974:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     978:	6a e0       	ldi	r22, 0x0A	; 10
     97a:	05 d2       	rcall	.+1034   	; 0xd86 <__udivmodqi4>
     97c:	82 13       	cpse	r24, r18
     97e:	d4 cd       	rjmp	.-1112   	; 0x528 <main+0x106>
                        ++cad.updateStage, cad.counter = 0;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     986:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     98a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     98e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     992:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     996:	c8 cd       	rjmp	.-1136   	; 0x528 <main+0x106>
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
     998:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage+0x39>
     99c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <voltage+0x3a>
     9a0:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <voltage+0x3b>
     9a4:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <voltage+0x3c>
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	8a cf       	rjmp	.-236    	; 0x8c2 <main+0x4a0>
                if (indication.dispMode != DISPLAY_TEMPERATURE)
                {
                    /* Read temperature */
                    if (temperature.isCompensated)
                    {
                        I2C_Start();
     9ae:	c1 d1       	rcall	.+898    	; 0xd32 <I2C_Start>
                        I2C_SendByte(0x90); // Device address + write bit
     9b0:	80 e9       	ldi	r24, 0x90	; 144
     9b2:	cb d1       	rcall	.+918    	; 0xd4a <I2C_SendByte>
                        I2C_SendByte(0x00); // Pointer
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	c9 d1       	rcall	.+914    	; 0xd4a <I2C_SendByte>
                        I2C_Start(); // Restart
     9b8:	bc d1       	rcall	.+888    	; 0xd32 <I2C_Start>
                        I2C_SendByte(0x91); // Device address + read bit
     9ba:	81 e9       	ldi	r24, 0x91	; 145
     9bc:	c6 d1       	rcall	.+908    	; 0xd4a <I2C_SendByte>
                        temperature.msb = I2C_ReadByte();
     9be:	cf d1       	rcall	.+926    	; 0xd5e <I2C_ReadByte>
     9c0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                        temperature.lsb = I2C_ReadLastByte();
     9c4:	d6 d1       	rcall	.+940    	; 0xd72 <I2C_ReadLastByte>
     9c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                        I2C_Stop();
     9ca:	bb d1       	rcall	.+886    	; 0xd42 <I2C_Stop>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
     9cc:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     9d0:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     9d4:	76 27       	eor	r23, r22
     9d6:	67 27       	eor	r22, r23
     9d8:	76 27       	eor	r23, r22
     9da:	76 95       	lsr	r23
     9dc:	67 95       	ror	r22
     9de:	72 95       	swap	r23
     9e0:	62 95       	swap	r22
     9e2:	6f 70       	andi	r22, 0x0F	; 15
     9e4:	67 27       	eor	r22, r23
     9e6:	7f 70       	andi	r23, 0x0F	; 15
     9e8:	67 27       	eor	r22, r23
     9ea:	07 2e       	mov	r0, r23
     9ec:	00 0c       	add	r0, r0
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	a2 d2       	rcall	.+1348   	; 0xf38 <__floatsisf>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	4a ef       	ldi	r20, 0xFA	; 250
     9fa:	52 e4       	ldi	r21, 0x42	; 66
     9fc:	51 d3       	rcall	.+1698   	; 0x10a0 <__mulsf3>
     9fe:	6b 01       	movw	r12, r22
     a00:	7c 01       	movw	r14, r24
     a02:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <temperature+0x4>
     a06:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <temperature+0x5>
     a0a:	07 2e       	mov	r0, r23
     a0c:	00 0c       	add	r0, r0
     a0e:	88 0b       	sbc	r24, r24
     a10:	99 0b       	sbc	r25, r25
     a12:	92 d2       	rcall	.+1316   	; 0xf38 <__floatsisf>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	f7 d1       	rcall	.+1006   	; 0xe0c <__addsf3>
                        I2C_Start(); // Restart
                        I2C_SendByte(0x91); // Device address + read bit
                        temperature.msb = I2C_ReadByte();
                        temperature.lsb = I2C_ReadLastByte();
                        I2C_Stop();
                        temperature.value =
     a1e:	5e d2       	rcall	.+1212   	; 0xedc <__fixunssfsi>
     a20:	9b 01       	movw	r18, r22
     a22:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     a26:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
     a2a:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     a2e:	e8 ce       	rjmp	.-560    	; 0x800 <main+0x3de>

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;
     a30:	83 e3       	ldi	r24, 0x33	; 51
     a32:	93 e3       	ldi	r25, 0x33	; 51
     a34:	a3 e3       	ldi	r26, 0x33	; 51
     a36:	bf e3       	ldi	r27, 0x3F	; 63
     a38:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <voltage+0x39>
     a3c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <voltage+0x3a>
     a40:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <voltage+0x3b>
     a44:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <voltage+0x3c>
     a48:	65 e6       	ldi	r22, 0x65	; 101
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	3a cf       	rjmp	.-396    	; 0x8c2 <main+0x4a0>
                    if ((time.min / 10) == indication.digit3)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 4:
                    indication.digit4 = (cad.counter / (1445 * 2 / 10)) % 10;
     a4e:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     a52:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     a56:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     a5a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     a5e:	21 e2       	ldi	r18, 0x21	; 33
     a60:	31 e0       	ldi	r19, 0x01	; 1
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	af d1       	rcall	.+862    	; 0xdc6 <__udivmodsi4>
     a68:	ca 01       	movw	r24, r20
     a6a:	b9 01       	movw	r22, r18
     a6c:	a5 01       	movw	r20, r10
     a6e:	94 01       	movw	r18, r8
     a70:	aa d1       	rcall	.+852    	; 0xdc6 <__udivmodsi4>
     a72:	26 2f       	mov	r18, r22
     a74:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x3>
                    if ((time.min % 10) == indication.digit4)
     a78:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     a7c:	6a e0       	ldi	r22, 0x0A	; 10
     a7e:	83 d1       	rcall	.+774    	; 0xd86 <__udivmodqi4>
     a80:	92 13       	cpse	r25, r18
     a82:	52 cd       	rjmp	.-1372   	; 0x528 <main+0x106>
                        ++cad.updateStage, cad.counter = 0;
     a84:	85 e0       	ldi	r24, 0x05	; 5
     a86:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     a8a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     a8e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     a92:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     a96:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     a9a:	46 cd       	rjmp	.-1396   	; 0x528 <main+0x106>
                    break;

                case 5:
                    indication.digit5 = (cad.counter / (1445 * 2 / 10)) % 10;
     a9c:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     aa0:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     aa4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     aa8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     aac:	21 e2       	ldi	r18, 0x21	; 33
     aae:	31 e0       	ldi	r19, 0x01	; 1
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	88 d1       	rcall	.+784    	; 0xdc6 <__udivmodsi4>
     ab6:	ca 01       	movw	r24, r20
     ab8:	b9 01       	movw	r22, r18
     aba:	a5 01       	movw	r20, r10
     abc:	94 01       	movw	r18, r8
     abe:	83 d1       	rcall	.+774    	; 0xdc6 <__udivmodsi4>
     ac0:	26 2f       	mov	r18, r22
     ac2:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x4>
                    if ((time.sec / 10) == indication.digit5)
     ac6:	8d 2f       	mov	r24, r29
     ac8:	6a e0       	ldi	r22, 0x0A	; 10
     aca:	5d d1       	rcall	.+698    	; 0xd86 <__udivmodqi4>
     acc:	82 13       	cpse	r24, r18
     ace:	2c cd       	rjmp	.-1448   	; 0x528 <main+0x106>
                        ++cad.updateStage, cad.counter = 0;
     ad0:	86 e0       	ldi	r24, 0x06	; 6
     ad2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     ad6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     ada:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     ade:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     ae2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     ae6:	20 cd       	rjmp	.-1472   	; 0x528 <main+0x106>
                    if ((time.hour % 10) == indication.digit2)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 3:
                    indication.digit3 = (cad.counter / (1445 * 2 / 10)) % 10;
     ae8:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     aec:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     af0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     af4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     af8:	21 e2       	ldi	r18, 0x21	; 33
     afa:	31 e0       	ldi	r19, 0x01	; 1
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	62 d1       	rcall	.+708    	; 0xdc6 <__udivmodsi4>
     b02:	ca 01       	movw	r24, r20
     b04:	b9 01       	movw	r22, r18
     b06:	a5 01       	movw	r20, r10
     b08:	94 01       	movw	r18, r8
     b0a:	5d d1       	rcall	.+698    	; 0xdc6 <__udivmodsi4>
     b0c:	26 2f       	mov	r18, r22
     b0e:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                    if ((time.min / 10) == indication.digit3)
     b12:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     b16:	6a e0       	ldi	r22, 0x0A	; 10
     b18:	36 d1       	rcall	.+620    	; 0xd86 <__udivmodqi4>
     b1a:	82 13       	cpse	r24, r18
     b1c:	05 cd       	rjmp	.-1526   	; 0x528 <main+0x106>
                        ++cad.updateStage, cad.counter = 0;
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     b24:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     b28:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     b2c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     b30:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     b34:	f9 cc       	rjmp	.-1550   	; 0x528 <main+0x106>
                cad.updateStage = 1;
                cad.update = true;
            }
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	09 f4       	brne	.+2      	; 0xb3c <main+0x71a>
     b3a:	07 cf       	rjmp	.-498    	; 0x94a <main+0x528>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	09 f0       	breq	.+2      	; 0xb42 <main+0x720>
     b40:	f3 cc       	rjmp	.-1562   	; 0x528 <main+0x106>
                    if ((time.hour / 10) == indication.digit1)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 2:
                    indication.digit2 = (cad.counter / (1445 * 2 / 10)) % 10;
     b42:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     b46:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     b4a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     b4e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     b52:	21 e2       	ldi	r18, 0x21	; 33
     b54:	31 e0       	ldi	r19, 0x01	; 1
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	35 d1       	rcall	.+618    	; 0xdc6 <__udivmodsi4>
     b5c:	ca 01       	movw	r24, r20
     b5e:	b9 01       	movw	r22, r18
     b60:	a5 01       	movw	r20, r10
     b62:	94 01       	movw	r18, r8
     b64:	30 d1       	rcall	.+608    	; 0xdc6 <__udivmodsi4>
     b66:	26 2f       	mov	r18, r22
     b68:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication+0x1>
                    if ((time.hour % 10) == indication.digit2)
     b6c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     b70:	6a e0       	ldi	r22, 0x0A	; 10
     b72:	09 d1       	rcall	.+530    	; 0xd86 <__udivmodqi4>
     b74:	92 13       	cpse	r25, r18
     b76:	d8 cc       	rjmp	.-1616   	; 0x528 <main+0x106>
                        ++cad.updateStage, cad.counter = 0;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     b7e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     b82:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     b86:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     b8a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     b8e:	cc cc       	rjmp	.-1640   	; 0x528 <main+0x106>

00000b90 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
    ADCSRA |= ((1 << ADEN) // ADC Enable
     b90:	ea e7       	ldi	r30, 0x7A	; 122
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	8f 6a       	ori	r24, 0xAF	; 175
     b98:	80 83       	st	Z, r24
               | (1 << ADATE) // ADC Auto Trigger Enable
               | (1 << ADIE) // ADC Interrupt Enable
               | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); // 128x prescaler

    ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3)); // ADC0 input
     b9a:	ac e7       	ldi	r26, 0x7C	; 124
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	8c 91       	ld	r24, X
     ba0:	80 7f       	andi	r24, 0xF0	; 240
     ba2:	8c 93       	st	X, r24
    ADMUX &= ~(1 << REFS0); // Internal 1.1V voltage reference
     ba4:	8c 91       	ld	r24, X
     ba6:	8f 7b       	andi	r24, 0xBF	; 191
     ba8:	8c 93       	st	X, r24

    ADCSRA |= (1 << ADSC); // ADC Start Conversion
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	80 83       	st	Z, r24
     bb0:	08 95       	ret

00000bb2 <arm_pid_f32>:
#include "PID.h"

float32_t arm_pid_f32(arm_pid_instance_f32 *S, float32_t in)
{
     bb2:	4f 92       	push	r4
     bb4:	5f 92       	push	r5
     bb6:	6f 92       	push	r6
     bb8:	7f 92       	push	r7
     bba:	8f 92       	push	r8
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	6a 01       	movw	r12, r20
     bd2:	7b 01       	movw	r14, r22
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */
    out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
     bd4:	8c 84       	ldd	r8, Y+12	; 0x0c
     bd6:	9d 84       	ldd	r9, Y+13	; 0x0d
     bd8:	ae 84       	ldd	r10, Y+14	; 0x0e
     bda:	bf 84       	ldd	r11, Y+15	; 0x0f
     bdc:	28 81       	ld	r18, Y
     bde:	39 81       	ldd	r19, Y+1	; 0x01
     be0:	4a 81       	ldd	r20, Y+2	; 0x02
     be2:	5b 81       	ldd	r21, Y+3	; 0x03
     be4:	cb 01       	movw	r24, r22
     be6:	b6 01       	movw	r22, r12
     be8:	5b d2       	rcall	.+1206   	; 0x10a0 <__mulsf3>
     bea:	2b 01       	movw	r4, r22
     bec:	3c 01       	movw	r6, r24
     bee:	2c 81       	ldd	r18, Y+4	; 0x04
     bf0:	3d 81       	ldd	r19, Y+5	; 0x05
     bf2:	4e 81       	ldd	r20, Y+6	; 0x06
     bf4:	5f 81       	ldd	r21, Y+7	; 0x07
     bf6:	c5 01       	movw	r24, r10
     bf8:	b4 01       	movw	r22, r8
     bfa:	52 d2       	rcall	.+1188   	; 0x10a0 <__mulsf3>
     bfc:	9b 01       	movw	r18, r22
     bfe:	ac 01       	movw	r20, r24
     c00:	c3 01       	movw	r24, r6
     c02:	b2 01       	movw	r22, r4
     c04:	03 d1       	rcall	.+518    	; 0xe0c <__addsf3>
     c06:	2c 89       	ldd	r18, Y+20	; 0x14
     c08:	3d 89       	ldd	r19, Y+21	; 0x15
     c0a:	4e 89       	ldd	r20, Y+22	; 0x16
     c0c:	5f 89       	ldd	r21, Y+23	; 0x17
     c0e:	fe d0       	rcall	.+508    	; 0xe0c <__addsf3>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
     c14:	28 89       	ldd	r18, Y+16	; 0x10
     c16:	39 89       	ldd	r19, Y+17	; 0x11
     c18:	4a 89       	ldd	r20, Y+18	; 0x12
     c1a:	5b 89       	ldd	r21, Y+19	; 0x13
     c1c:	68 85       	ldd	r22, Y+8	; 0x08
     c1e:	79 85       	ldd	r23, Y+9	; 0x09
     c20:	8a 85       	ldd	r24, Y+10	; 0x0a
     c22:	9b 85       	ldd	r25, Y+11	; 0x0b
     c24:	3d d2       	rcall	.+1146   	; 0x10a0 <__mulsf3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	c3 01       	movw	r24, r6
     c2c:	b2 01       	movw	r22, r4
     c2e:	ee d0       	rcall	.+476    	; 0xe0c <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
     c30:	88 8a       	std	Y+16, r8	; 0x10
     c32:	99 8a       	std	Y+17, r9	; 0x11
     c34:	aa 8a       	std	Y+18, r10	; 0x12
     c36:	bb 8a       	std	Y+19, r11	; 0x13
    S->state[0] = in;
     c38:	cc 86       	std	Y+12, r12	; 0x0c
     c3a:	dd 86       	std	Y+13, r13	; 0x0d
     c3c:	ee 86       	std	Y+14, r14	; 0x0e
     c3e:	ff 86       	std	Y+15, r15	; 0x0f
    S->state[2] = out;
     c40:	6c 8b       	std	Y+20, r22	; 0x14
     c42:	7d 8b       	std	Y+21, r23	; 0x15
     c44:	8e 8b       	std	Y+22, r24	; 0x16
     c46:	9f 8b       	std	Y+23, r25	; 0x17

    /* return to application */
    return (out);
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	4f 90       	pop	r4
     c64:	08 95       	ret

00000c66 <arm_pid_init_f32>:

void arm_pid_init_f32(arm_pid_instance_f32 *S, int32_t resetStateFlag)
{
     c66:	4f 92       	push	r4
     c68:	5f 92       	push	r5
     c6a:	6f 92       	push	r6
     c6c:	7f 92       	push	r7
     c6e:	8f 92       	push	r8
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	4a 01       	movw	r8, r20
     c86:	5b 01       	movw	r10, r22
    /* Derived coefficient A0 */
    S->A0 = S->Kp + S->Ki + S->Kd;
     c88:	48 8c       	ldd	r4, Y+24	; 0x18
     c8a:	59 8c       	ldd	r5, Y+25	; 0x19
     c8c:	6a 8c       	ldd	r6, Y+26	; 0x1a
     c8e:	7b 8c       	ldd	r7, Y+27	; 0x1b
     c90:	c8 a0       	ldd	r12, Y+32	; 0x20
     c92:	d9 a0       	ldd	r13, Y+33	; 0x21
     c94:	ea a0       	ldd	r14, Y+34	; 0x22
     c96:	fb a0       	ldd	r15, Y+35	; 0x23
     c98:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c9a:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c9c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c9e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     ca0:	c3 01       	movw	r24, r6
     ca2:	b2 01       	movw	r22, r4
     ca4:	b3 d0       	rcall	.+358    	; 0xe0c <__addsf3>
     ca6:	a7 01       	movw	r20, r14
     ca8:	96 01       	movw	r18, r12
     caa:	b0 d0       	rcall	.+352    	; 0xe0c <__addsf3>
     cac:	68 83       	st	Y, r22
     cae:	79 83       	std	Y+1, r23	; 0x01
     cb0:	8a 83       	std	Y+2, r24	; 0x02
     cb2:	9b 83       	std	Y+3, r25	; 0x03

    /* Derived coefficient A1 */
    S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
     cb4:	a7 01       	movw	r20, r14
     cb6:	96 01       	movw	r18, r12
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	a7 d0       	rcall	.+334    	; 0xe0c <__addsf3>
     cbe:	a3 01       	movw	r20, r6
     cc0:	92 01       	movw	r18, r4
     cc2:	a4 d0       	rcall	.+328    	; 0xe0c <__addsf3>
     cc4:	90 58       	subi	r25, 0x80	; 128
     cc6:	6c 83       	std	Y+4, r22	; 0x04
     cc8:	7d 83       	std	Y+5, r23	; 0x05
     cca:	8e 83       	std	Y+6, r24	; 0x06
     ccc:	9f 83       	std	Y+7, r25	; 0x07

    /* Derived coefficient A2 */
    S->A2 = S->Kd;
     cce:	c8 86       	std	Y+8, r12	; 0x08
     cd0:	d9 86       	std	Y+9, r13	; 0x09
     cd2:	ea 86       	std	Y+10, r14	; 0x0a
     cd4:	fb 86       	std	Y+11, r15	; 0x0b

    /* Check whether state needs reset or not */
    if (resetStateFlag)
     cd6:	89 28       	or	r8, r9
     cd8:	8a 28       	or	r8, r10
     cda:	8b 28       	or	r8, r11
     cdc:	31 f0       	breq	.+12     	; 0xcea <arm_pid_init_f32+0x84>
}

void arm_pid_reset_f32(arm_pid_instance_f32 *S)
{
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
     cde:	2c 96       	adiw	r28, 0x0c	; 12
     ce0:	8c e0       	ldi	r24, 0x0C	; 12
     ce2:	fe 01       	movw	r30, r28
     ce4:	11 92       	st	Z+, r1
     ce6:	8a 95       	dec	r24
     ce8:	e9 f7       	brne	.-6      	; 0xce4 <arm_pid_init_f32+0x7e>
    S->A2 = S->Kd;

    /* Check whether state needs reset or not */
    if (resetStateFlag)
        arm_pid_reset_f32(S);
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	7f 90       	pop	r7
     d00:	6f 90       	pop	r6
     d02:	5f 90       	pop	r5
     d04:	4f 90       	pop	r4
     d06:	08 95       	ret

00000d08 <RTC_BCDtoDEC>:
#include "RTC.h"

uint8_t RTC_BCDtoDEC(uint8_t bcd)
{
    return ((bcd >> 4) * 10 + (0x0F & bcd));
     d08:	28 2f       	mov	r18, r24
     d0a:	22 95       	swap	r18
     d0c:	2f 70       	andi	r18, 0x0F	; 15
     d0e:	92 2f       	mov	r25, r18
     d10:	99 0f       	add	r25, r25
     d12:	99 0f       	add	r25, r25
     d14:	92 0f       	add	r25, r18
     d16:	99 0f       	add	r25, r25
     d18:	8f 70       	andi	r24, 0x0F	; 15
}
     d1a:	89 0f       	add	r24, r25
     d1c:	08 95       	ret

00000d1e <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t dec)
{
    return ((dec / 10) << 4) | (dec % 10);
     d1e:	6a e0       	ldi	r22, 0x0A	; 10
     d20:	32 d0       	rcall	.+100    	; 0xd86 <__udivmodqi4>
     d22:	82 95       	swap	r24
     d24:	80 7f       	andi	r24, 0xF0	; 240
     d26:	89 2b       	or	r24, r25
     d28:	08 95       	ret

00000d2a <I2C_Init>:
{
    I2C_Start();
    I2C_SendByte(addr);
    I2C_SendByte(byte);
    I2C_Stop();
}
     d2a:	88 e4       	ldi	r24, 0x48	; 72
     d2c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     d30:	08 95       	ret

00000d32 <I2C_Start>:
     d32:	84 ea       	ldi	r24, 0xA4	; 164
     d34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d38:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d3c:	87 ff       	sbrs	r24, 7
     d3e:	fc cf       	rjmp	.-8      	; 0xd38 <I2C_Start+0x6>
     d40:	08 95       	ret

00000d42 <I2C_Stop>:
     d42:	84 e9       	ldi	r24, 0x94	; 148
     d44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d48:	08 95       	ret

00000d4a <I2C_SendByte>:
     d4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     d4e:	84 e8       	ldi	r24, 0x84	; 132
     d50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d54:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d58:	87 ff       	sbrs	r24, 7
     d5a:	fc cf       	rjmp	.-8      	; 0xd54 <I2C_SendByte+0xa>
     d5c:	08 95       	ret

00000d5e <I2C_ReadByte>:

uint8_t I2C_ReadByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d5e:	84 ec       	ldi	r24, 0xC4	; 196
     d60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     d64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d68:	87 ff       	sbrs	r24, 7
     d6a:	fc cf       	rjmp	.-8      	; 0xd64 <I2C_ReadByte+0x6>

    return TWDR;
     d6c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
     d70:	08 95       	ret

00000d72 <I2C_ReadLastByte>:

uint8_t I2C_ReadLastByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
     d72:	84 e8       	ldi	r24, 0x84	; 132
     d74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     d78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d7c:	87 ff       	sbrs	r24, 7
     d7e:	fc cf       	rjmp	.-8      	; 0xd78 <I2C_ReadLastByte+0x6>

    return TWDR;
     d80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     d84:	08 95       	ret

00000d86 <__udivmodqi4>:
     d86:	99 1b       	sub	r25, r25
     d88:	79 e0       	ldi	r23, 0x09	; 9
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <__udivmodqi4_ep>

00000d8c <__udivmodqi4_loop>:
     d8c:	99 1f       	adc	r25, r25
     d8e:	96 17       	cp	r25, r22
     d90:	08 f0       	brcs	.+2      	; 0xd94 <__udivmodqi4_ep>
     d92:	96 1b       	sub	r25, r22

00000d94 <__udivmodqi4_ep>:
     d94:	88 1f       	adc	r24, r24
     d96:	7a 95       	dec	r23
     d98:	c9 f7       	brne	.-14     	; 0xd8c <__udivmodqi4_loop>
     d9a:	80 95       	com	r24
     d9c:	08 95       	ret

00000d9e <__udivmodhi4>:
     d9e:	aa 1b       	sub	r26, r26
     da0:	bb 1b       	sub	r27, r27
     da2:	51 e1       	ldi	r21, 0x11	; 17
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <__udivmodhi4_ep>

00000da6 <__udivmodhi4_loop>:
     da6:	aa 1f       	adc	r26, r26
     da8:	bb 1f       	adc	r27, r27
     daa:	a6 17       	cp	r26, r22
     dac:	b7 07       	cpc	r27, r23
     dae:	10 f0       	brcs	.+4      	; 0xdb4 <__udivmodhi4_ep>
     db0:	a6 1b       	sub	r26, r22
     db2:	b7 0b       	sbc	r27, r23

00000db4 <__udivmodhi4_ep>:
     db4:	88 1f       	adc	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	5a 95       	dec	r21
     dba:	a9 f7       	brne	.-22     	; 0xda6 <__udivmodhi4_loop>
     dbc:	80 95       	com	r24
     dbe:	90 95       	com	r25
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	08 95       	ret

00000dc6 <__udivmodsi4>:
     dc6:	a1 e2       	ldi	r26, 0x21	; 33
     dc8:	1a 2e       	mov	r1, r26
     dca:	aa 1b       	sub	r26, r26
     dcc:	bb 1b       	sub	r27, r27
     dce:	fd 01       	movw	r30, r26
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__udivmodsi4_ep>

00000dd2 <__udivmodsi4_loop>:
     dd2:	aa 1f       	adc	r26, r26
     dd4:	bb 1f       	adc	r27, r27
     dd6:	ee 1f       	adc	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	a2 17       	cp	r26, r18
     ddc:	b3 07       	cpc	r27, r19
     dde:	e4 07       	cpc	r30, r20
     de0:	f5 07       	cpc	r31, r21
     de2:	20 f0       	brcs	.+8      	; 0xdec <__udivmodsi4_ep>
     de4:	a2 1b       	sub	r26, r18
     de6:	b3 0b       	sbc	r27, r19
     de8:	e4 0b       	sbc	r30, r20
     dea:	f5 0b       	sbc	r31, r21

00000dec <__udivmodsi4_ep>:
     dec:	66 1f       	adc	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	88 1f       	adc	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	1a 94       	dec	r1
     df6:	69 f7       	brne	.-38     	; 0xdd2 <__udivmodsi4_loop>
     df8:	60 95       	com	r22
     dfa:	70 95       	com	r23
     dfc:	80 95       	com	r24
     dfe:	90 95       	com	r25
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	bd 01       	movw	r22, r26
     e06:	cf 01       	movw	r24, r30
     e08:	08 95       	ret

00000e0a <__subsf3>:
     e0a:	50 58       	subi	r21, 0x80	; 128

00000e0c <__addsf3>:
     e0c:	bb 27       	eor	r27, r27
     e0e:	aa 27       	eor	r26, r26
     e10:	0e d0       	rcall	.+28     	; 0xe2e <__addsf3x>
     e12:	08 c1       	rjmp	.+528    	; 0x1024 <__fp_round>
     e14:	f9 d0       	rcall	.+498    	; 0x1008 <__fp_pscA>
     e16:	30 f0       	brcs	.+12     	; 0xe24 <__addsf3+0x18>
     e18:	fe d0       	rcall	.+508    	; 0x1016 <__fp_pscB>
     e1a:	20 f0       	brcs	.+8      	; 0xe24 <__addsf3+0x18>
     e1c:	31 f4       	brne	.+12     	; 0xe2a <__addsf3+0x1e>
     e1e:	9f 3f       	cpi	r25, 0xFF	; 255
     e20:	11 f4       	brne	.+4      	; 0xe26 <__addsf3+0x1a>
     e22:	1e f4       	brtc	.+6      	; 0xe2a <__addsf3+0x1e>
     e24:	ee c0       	rjmp	.+476    	; 0x1002 <__fp_nan>
     e26:	0e f4       	brtc	.+2      	; 0xe2a <__addsf3+0x1e>
     e28:	e0 95       	com	r30
     e2a:	e7 fb       	bst	r30, 7
     e2c:	e4 c0       	rjmp	.+456    	; 0xff6 <__fp_inf>

00000e2e <__addsf3x>:
     e2e:	e9 2f       	mov	r30, r25
     e30:	0a d1       	rcall	.+532    	; 0x1046 <__fp_split3>
     e32:	80 f3       	brcs	.-32     	; 0xe14 <__addsf3+0x8>
     e34:	ba 17       	cp	r27, r26
     e36:	62 07       	cpc	r22, r18
     e38:	73 07       	cpc	r23, r19
     e3a:	84 07       	cpc	r24, r20
     e3c:	95 07       	cpc	r25, r21
     e3e:	18 f0       	brcs	.+6      	; 0xe46 <__addsf3x+0x18>
     e40:	71 f4       	brne	.+28     	; 0xe5e <__addsf3x+0x30>
     e42:	9e f5       	brtc	.+102    	; 0xeaa <__addsf3x+0x7c>
     e44:	22 c1       	rjmp	.+580    	; 0x108a <__fp_zero>
     e46:	0e f4       	brtc	.+2      	; 0xe4a <__addsf3x+0x1c>
     e48:	e0 95       	com	r30
     e4a:	0b 2e       	mov	r0, r27
     e4c:	ba 2f       	mov	r27, r26
     e4e:	a0 2d       	mov	r26, r0
     e50:	0b 01       	movw	r0, r22
     e52:	b9 01       	movw	r22, r18
     e54:	90 01       	movw	r18, r0
     e56:	0c 01       	movw	r0, r24
     e58:	ca 01       	movw	r24, r20
     e5a:	a0 01       	movw	r20, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	ff 27       	eor	r31, r31
     e60:	59 1b       	sub	r21, r25
     e62:	99 f0       	breq	.+38     	; 0xe8a <__addsf3x+0x5c>
     e64:	59 3f       	cpi	r21, 0xF9	; 249
     e66:	50 f4       	brcc	.+20     	; 0xe7c <__addsf3x+0x4e>
     e68:	50 3e       	cpi	r21, 0xE0	; 224
     e6a:	68 f1       	brcs	.+90     	; 0xec6 <__addsf3x+0x98>
     e6c:	1a 16       	cp	r1, r26
     e6e:	f0 40       	sbci	r31, 0x00	; 0
     e70:	a2 2f       	mov	r26, r18
     e72:	23 2f       	mov	r18, r19
     e74:	34 2f       	mov	r19, r20
     e76:	44 27       	eor	r20, r20
     e78:	58 5f       	subi	r21, 0xF8	; 248
     e7a:	f3 cf       	rjmp	.-26     	; 0xe62 <__addsf3x+0x34>
     e7c:	46 95       	lsr	r20
     e7e:	37 95       	ror	r19
     e80:	27 95       	ror	r18
     e82:	a7 95       	ror	r26
     e84:	f0 40       	sbci	r31, 0x00	; 0
     e86:	53 95       	inc	r21
     e88:	c9 f7       	brne	.-14     	; 0xe7c <__addsf3x+0x4e>
     e8a:	7e f4       	brtc	.+30     	; 0xeaa <__addsf3x+0x7c>
     e8c:	1f 16       	cp	r1, r31
     e8e:	ba 0b       	sbc	r27, r26
     e90:	62 0b       	sbc	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	ba f0       	brmi	.+46     	; 0xec6 <__addsf3x+0x98>
     e98:	91 50       	subi	r25, 0x01	; 1
     e9a:	a1 f0       	breq	.+40     	; 0xec4 <__addsf3x+0x96>
     e9c:	ff 0f       	add	r31, r31
     e9e:	bb 1f       	adc	r27, r27
     ea0:	66 1f       	adc	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	88 1f       	adc	r24, r24
     ea6:	c2 f7       	brpl	.-16     	; 0xe98 <__addsf3x+0x6a>
     ea8:	0e c0       	rjmp	.+28     	; 0xec6 <__addsf3x+0x98>
     eaa:	ba 0f       	add	r27, r26
     eac:	62 1f       	adc	r22, r18
     eae:	73 1f       	adc	r23, r19
     eb0:	84 1f       	adc	r24, r20
     eb2:	48 f4       	brcc	.+18     	; 0xec6 <__addsf3x+0x98>
     eb4:	87 95       	ror	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	b7 95       	ror	r27
     ebc:	f7 95       	ror	r31
     ebe:	9e 3f       	cpi	r25, 0xFE	; 254
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <__addsf3x+0x96>
     ec2:	b3 cf       	rjmp	.-154    	; 0xe2a <__addsf3+0x1e>
     ec4:	93 95       	inc	r25
     ec6:	88 0f       	add	r24, r24
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__addsf3x+0x9e>
     eca:	99 27       	eor	r25, r25
     ecc:	ee 0f       	add	r30, r30
     ece:	97 95       	ror	r25
     ed0:	87 95       	ror	r24
     ed2:	08 95       	ret

00000ed4 <__cmpsf2>:
     ed4:	6c d0       	rcall	.+216    	; 0xfae <__fp_cmp>
     ed6:	08 f4       	brcc	.+2      	; 0xeda <__cmpsf2+0x6>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	08 95       	ret

00000edc <__fixunssfsi>:
     edc:	bc d0       	rcall	.+376    	; 0x1056 <__fp_splitA>
     ede:	88 f0       	brcs	.+34     	; 0xf02 <__fixunssfsi+0x26>
     ee0:	9f 57       	subi	r25, 0x7F	; 127
     ee2:	90 f0       	brcs	.+36     	; 0xf08 <__fixunssfsi+0x2c>
     ee4:	b9 2f       	mov	r27, r25
     ee6:	99 27       	eor	r25, r25
     ee8:	b7 51       	subi	r27, 0x17	; 23
     eea:	a0 f0       	brcs	.+40     	; 0xf14 <__fixunssfsi+0x38>
     eec:	d1 f0       	breq	.+52     	; 0xf22 <__fixunssfsi+0x46>
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	1a f0       	brmi	.+6      	; 0xefe <__fixunssfsi+0x22>
     ef8:	ba 95       	dec	r27
     efa:	c9 f7       	brne	.-14     	; 0xeee <__fixunssfsi+0x12>
     efc:	12 c0       	rjmp	.+36     	; 0xf22 <__fixunssfsi+0x46>
     efe:	b1 30       	cpi	r27, 0x01	; 1
     f00:	81 f0       	breq	.+32     	; 0xf22 <__fixunssfsi+0x46>
     f02:	c3 d0       	rcall	.+390    	; 0x108a <__fp_zero>
     f04:	b1 e0       	ldi	r27, 0x01	; 1
     f06:	08 95       	ret
     f08:	c0 c0       	rjmp	.+384    	; 0x108a <__fp_zero>
     f0a:	67 2f       	mov	r22, r23
     f0c:	78 2f       	mov	r23, r24
     f0e:	88 27       	eor	r24, r24
     f10:	b8 5f       	subi	r27, 0xF8	; 248
     f12:	39 f0       	breq	.+14     	; 0xf22 <__fixunssfsi+0x46>
     f14:	b9 3f       	cpi	r27, 0xF9	; 249
     f16:	cc f3       	brlt	.-14     	; 0xf0a <__fixunssfsi+0x2e>
     f18:	86 95       	lsr	r24
     f1a:	77 95       	ror	r23
     f1c:	67 95       	ror	r22
     f1e:	b3 95       	inc	r27
     f20:	d9 f7       	brne	.-10     	; 0xf18 <__fixunssfsi+0x3c>
     f22:	3e f4       	brtc	.+14     	; 0xf32 <__fixunssfsi+0x56>
     f24:	90 95       	com	r25
     f26:	80 95       	com	r24
     f28:	70 95       	com	r23
     f2a:	61 95       	neg	r22
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	8f 4f       	sbci	r24, 0xFF	; 255
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	08 95       	ret

00000f34 <__floatunsisf>:
     f34:	e8 94       	clt
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__floatsisf+0x12>

00000f38 <__floatsisf>:
     f38:	97 fb       	bst	r25, 7
     f3a:	3e f4       	brtc	.+14     	; 0xf4a <__floatsisf+0x12>
     f3c:	90 95       	com	r25
     f3e:	80 95       	com	r24
     f40:	70 95       	com	r23
     f42:	61 95       	neg	r22
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	8f 4f       	sbci	r24, 0xFF	; 255
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	99 23       	and	r25, r25
     f4c:	a9 f0       	breq	.+42     	; 0xf78 <__floatsisf+0x40>
     f4e:	f9 2f       	mov	r31, r25
     f50:	96 e9       	ldi	r25, 0x96	; 150
     f52:	bb 27       	eor	r27, r27
     f54:	93 95       	inc	r25
     f56:	f6 95       	lsr	r31
     f58:	87 95       	ror	r24
     f5a:	77 95       	ror	r23
     f5c:	67 95       	ror	r22
     f5e:	b7 95       	ror	r27
     f60:	f1 11       	cpse	r31, r1
     f62:	f8 cf       	rjmp	.-16     	; 0xf54 <__floatsisf+0x1c>
     f64:	fa f4       	brpl	.+62     	; 0xfa4 <__floatsisf+0x6c>
     f66:	bb 0f       	add	r27, r27
     f68:	11 f4       	brne	.+4      	; 0xf6e <__floatsisf+0x36>
     f6a:	60 ff       	sbrs	r22, 0
     f6c:	1b c0       	rjmp	.+54     	; 0xfa4 <__floatsisf+0x6c>
     f6e:	6f 5f       	subi	r22, 0xFF	; 255
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	16 c0       	rjmp	.+44     	; 0xfa4 <__floatsisf+0x6c>
     f78:	88 23       	and	r24, r24
     f7a:	11 f0       	breq	.+4      	; 0xf80 <__floatsisf+0x48>
     f7c:	96 e9       	ldi	r25, 0x96	; 150
     f7e:	11 c0       	rjmp	.+34     	; 0xfa2 <__floatsisf+0x6a>
     f80:	77 23       	and	r23, r23
     f82:	21 f0       	breq	.+8      	; 0xf8c <__floatsisf+0x54>
     f84:	9e e8       	ldi	r25, 0x8E	; 142
     f86:	87 2f       	mov	r24, r23
     f88:	76 2f       	mov	r23, r22
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <__floatsisf+0x5e>
     f8c:	66 23       	and	r22, r22
     f8e:	71 f0       	breq	.+28     	; 0xfac <__floatsisf+0x74>
     f90:	96 e8       	ldi	r25, 0x86	; 134
     f92:	86 2f       	mov	r24, r22
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	2a f0       	brmi	.+10     	; 0xfa4 <__floatsisf+0x6c>
     f9a:	9a 95       	dec	r25
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	da f7       	brpl	.-10     	; 0xf9a <__floatsisf+0x62>
     fa4:	88 0f       	add	r24, r24
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__fp_cmp>:
     fae:	99 0f       	add	r25, r25
     fb0:	00 08       	sbc	r0, r0
     fb2:	55 0f       	add	r21, r21
     fb4:	aa 0b       	sbc	r26, r26
     fb6:	e0 e8       	ldi	r30, 0x80	; 128
     fb8:	fe ef       	ldi	r31, 0xFE	; 254
     fba:	16 16       	cp	r1, r22
     fbc:	17 06       	cpc	r1, r23
     fbe:	e8 07       	cpc	r30, r24
     fc0:	f9 07       	cpc	r31, r25
     fc2:	c0 f0       	brcs	.+48     	; 0xff4 <__fp_cmp+0x46>
     fc4:	12 16       	cp	r1, r18
     fc6:	13 06       	cpc	r1, r19
     fc8:	e4 07       	cpc	r30, r20
     fca:	f5 07       	cpc	r31, r21
     fcc:	98 f0       	brcs	.+38     	; 0xff4 <__fp_cmp+0x46>
     fce:	62 1b       	sub	r22, r18
     fd0:	73 0b       	sbc	r23, r19
     fd2:	84 0b       	sbc	r24, r20
     fd4:	95 0b       	sbc	r25, r21
     fd6:	39 f4       	brne	.+14     	; 0xfe6 <__fp_cmp+0x38>
     fd8:	0a 26       	eor	r0, r26
     fda:	61 f0       	breq	.+24     	; 0xff4 <__fp_cmp+0x46>
     fdc:	23 2b       	or	r18, r19
     fde:	24 2b       	or	r18, r20
     fe0:	25 2b       	or	r18, r21
     fe2:	21 f4       	brne	.+8      	; 0xfec <__fp_cmp+0x3e>
     fe4:	08 95       	ret
     fe6:	0a 26       	eor	r0, r26
     fe8:	09 f4       	brne	.+2      	; 0xfec <__fp_cmp+0x3e>
     fea:	a1 40       	sbci	r26, 0x01	; 1
     fec:	a6 95       	lsr	r26
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	81 1d       	adc	r24, r1
     ff2:	81 1d       	adc	r24, r1
     ff4:	08 95       	ret

00000ff6 <__fp_inf>:
     ff6:	97 f9       	bld	r25, 7
     ff8:	9f 67       	ori	r25, 0x7F	; 127
     ffa:	80 e8       	ldi	r24, 0x80	; 128
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	08 95       	ret

00001002 <__fp_nan>:
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	80 ec       	ldi	r24, 0xC0	; 192
    1006:	08 95       	ret

00001008 <__fp_pscA>:
    1008:	00 24       	eor	r0, r0
    100a:	0a 94       	dec	r0
    100c:	16 16       	cp	r1, r22
    100e:	17 06       	cpc	r1, r23
    1010:	18 06       	cpc	r1, r24
    1012:	09 06       	cpc	r0, r25
    1014:	08 95       	ret

00001016 <__fp_pscB>:
    1016:	00 24       	eor	r0, r0
    1018:	0a 94       	dec	r0
    101a:	12 16       	cp	r1, r18
    101c:	13 06       	cpc	r1, r19
    101e:	14 06       	cpc	r1, r20
    1020:	05 06       	cpc	r0, r21
    1022:	08 95       	ret

00001024 <__fp_round>:
    1024:	09 2e       	mov	r0, r25
    1026:	03 94       	inc	r0
    1028:	00 0c       	add	r0, r0
    102a:	11 f4       	brne	.+4      	; 0x1030 <__fp_round+0xc>
    102c:	88 23       	and	r24, r24
    102e:	52 f0       	brmi	.+20     	; 0x1044 <__fp_round+0x20>
    1030:	bb 0f       	add	r27, r27
    1032:	40 f4       	brcc	.+16     	; 0x1044 <__fp_round+0x20>
    1034:	bf 2b       	or	r27, r31
    1036:	11 f4       	brne	.+4      	; 0x103c <__fp_round+0x18>
    1038:	60 ff       	sbrs	r22, 0
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__fp_round+0x20>
    103c:	6f 5f       	subi	r22, 0xFF	; 255
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	08 95       	ret

00001046 <__fp_split3>:
    1046:	57 fd       	sbrc	r21, 7
    1048:	90 58       	subi	r25, 0x80	; 128
    104a:	44 0f       	add	r20, r20
    104c:	55 1f       	adc	r21, r21
    104e:	59 f0       	breq	.+22     	; 0x1066 <__fp_splitA+0x10>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	71 f0       	breq	.+28     	; 0x1070 <__fp_splitA+0x1a>
    1054:	47 95       	ror	r20

00001056 <__fp_splitA>:
    1056:	88 0f       	add	r24, r24
    1058:	97 fb       	bst	r25, 7
    105a:	99 1f       	adc	r25, r25
    105c:	61 f0       	breq	.+24     	; 0x1076 <__fp_splitA+0x20>
    105e:	9f 3f       	cpi	r25, 0xFF	; 255
    1060:	79 f0       	breq	.+30     	; 0x1080 <__fp_splitA+0x2a>
    1062:	87 95       	ror	r24
    1064:	08 95       	ret
    1066:	12 16       	cp	r1, r18
    1068:	13 06       	cpc	r1, r19
    106a:	14 06       	cpc	r1, r20
    106c:	55 1f       	adc	r21, r21
    106e:	f2 cf       	rjmp	.-28     	; 0x1054 <__fp_split3+0xe>
    1070:	46 95       	lsr	r20
    1072:	f1 df       	rcall	.-30     	; 0x1056 <__fp_splitA>
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <__fp_splitA+0x30>
    1076:	16 16       	cp	r1, r22
    1078:	17 06       	cpc	r1, r23
    107a:	18 06       	cpc	r1, r24
    107c:	99 1f       	adc	r25, r25
    107e:	f1 cf       	rjmp	.-30     	; 0x1062 <__fp_splitA+0xc>
    1080:	86 95       	lsr	r24
    1082:	71 05       	cpc	r23, r1
    1084:	61 05       	cpc	r22, r1
    1086:	08 94       	sec
    1088:	08 95       	ret

0000108a <__fp_zero>:
    108a:	e8 94       	clt

0000108c <__fp_szero>:
    108c:	bb 27       	eor	r27, r27
    108e:	66 27       	eor	r22, r22
    1090:	77 27       	eor	r23, r23
    1092:	cb 01       	movw	r24, r22
    1094:	97 f9       	bld	r25, 7
    1096:	08 95       	ret

00001098 <__gesf2>:
    1098:	8a df       	rcall	.-236    	; 0xfae <__fp_cmp>
    109a:	08 f4       	brcc	.+2      	; 0x109e <__gesf2+0x6>
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	08 95       	ret

000010a0 <__mulsf3>:
    10a0:	0a d0       	rcall	.+20     	; 0x10b6 <__mulsf3x>
    10a2:	c0 cf       	rjmp	.-128    	; 0x1024 <__fp_round>
    10a4:	b1 df       	rcall	.-158    	; 0x1008 <__fp_pscA>
    10a6:	28 f0       	brcs	.+10     	; 0x10b2 <__mulsf3+0x12>
    10a8:	b6 df       	rcall	.-148    	; 0x1016 <__fp_pscB>
    10aa:	18 f0       	brcs	.+6      	; 0x10b2 <__mulsf3+0x12>
    10ac:	95 23       	and	r25, r21
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__mulsf3+0x12>
    10b0:	a2 cf       	rjmp	.-188    	; 0xff6 <__fp_inf>
    10b2:	a7 cf       	rjmp	.-178    	; 0x1002 <__fp_nan>
    10b4:	eb cf       	rjmp	.-42     	; 0x108c <__fp_szero>

000010b6 <__mulsf3x>:
    10b6:	c7 df       	rcall	.-114    	; 0x1046 <__fp_split3>
    10b8:	a8 f3       	brcs	.-22     	; 0x10a4 <__mulsf3+0x4>

000010ba <__mulsf3_pse>:
    10ba:	99 23       	and	r25, r25
    10bc:	d9 f3       	breq	.-10     	; 0x10b4 <__mulsf3+0x14>
    10be:	55 23       	and	r21, r21
    10c0:	c9 f3       	breq	.-14     	; 0x10b4 <__mulsf3+0x14>
    10c2:	95 0f       	add	r25, r21
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	55 1f       	adc	r21, r21
    10c8:	aa 27       	eor	r26, r26
    10ca:	ee 27       	eor	r30, r30
    10cc:	ff 27       	eor	r31, r31
    10ce:	bb 27       	eor	r27, r27
    10d0:	00 24       	eor	r0, r0
    10d2:	08 94       	sec
    10d4:	67 95       	ror	r22
    10d6:	20 f4       	brcc	.+8      	; 0x10e0 <__mulsf3_pse+0x26>
    10d8:	e2 0f       	add	r30, r18
    10da:	f3 1f       	adc	r31, r19
    10dc:	b4 1f       	adc	r27, r20
    10de:	0a 1e       	adc	r0, r26
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	44 1f       	adc	r20, r20
    10e6:	aa 1f       	adc	r26, r26
    10e8:	66 95       	lsr	r22
    10ea:	a9 f7       	brne	.-22     	; 0x10d6 <__mulsf3_pse+0x1c>
    10ec:	77 95       	ror	r23
    10ee:	30 f4       	brcc	.+12     	; 0x10fc <__mulsf3_pse+0x42>
    10f0:	f3 0f       	add	r31, r19
    10f2:	b4 1f       	adc	r27, r20
    10f4:	0a 1e       	adc	r0, r26
    10f6:	12 1e       	adc	r1, r18
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__mulsf3_pse+0x42>
    10fa:	63 95       	inc	r22
    10fc:	33 0f       	add	r19, r19
    10fe:	44 1f       	adc	r20, r20
    1100:	aa 1f       	adc	r26, r26
    1102:	22 1f       	adc	r18, r18
    1104:	76 95       	lsr	r23
    1106:	99 f7       	brne	.-26     	; 0x10ee <__mulsf3_pse+0x34>
    1108:	87 95       	ror	r24
    110a:	20 f4       	brcc	.+8      	; 0x1114 <__mulsf3_pse+0x5a>
    110c:	b4 0f       	add	r27, r20
    110e:	0a 1e       	adc	r0, r26
    1110:	12 1e       	adc	r1, r18
    1112:	63 1f       	adc	r22, r19
    1114:	44 0f       	add	r20, r20
    1116:	aa 1f       	adc	r26, r26
    1118:	22 1f       	adc	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	86 95       	lsr	r24
    111e:	a9 f7       	brne	.-22     	; 0x110a <__mulsf3_pse+0x50>
    1120:	86 2f       	mov	r24, r22
    1122:	71 2d       	mov	r23, r1
    1124:	60 2d       	mov	r22, r0
    1126:	11 24       	eor	r1, r1
    1128:	9f 57       	subi	r25, 0x7F	; 127
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	8a f0       	brmi	.+34     	; 0x1150 <__mulsf3_pse+0x96>
    112e:	e1 f0       	breq	.+56     	; 0x1168 <__mulsf3_pse+0xae>
    1130:	88 23       	and	r24, r24
    1132:	4a f0       	brmi	.+18     	; 0x1146 <__mulsf3_pse+0x8c>
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	bb 1f       	adc	r27, r27
    113a:	66 1f       	adc	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	91 50       	subi	r25, 0x01	; 1
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	a9 f7       	brne	.-22     	; 0x1130 <__mulsf3_pse+0x76>
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	51 05       	cpc	r21, r1
    114a:	70 f0       	brcs	.+28     	; 0x1168 <__mulsf3_pse+0xae>
    114c:	54 cf       	rjmp	.-344    	; 0xff6 <__fp_inf>
    114e:	9e cf       	rjmp	.-196    	; 0x108c <__fp_szero>
    1150:	5f 3f       	cpi	r21, 0xFF	; 255
    1152:	ec f3       	brlt	.-6      	; 0x114e <__mulsf3_pse+0x94>
    1154:	98 3e       	cpi	r25, 0xE8	; 232
    1156:	dc f3       	brlt	.-10     	; 0x114e <__mulsf3_pse+0x94>
    1158:	86 95       	lsr	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f7 95       	ror	r31
    1162:	e7 95       	ror	r30
    1164:	9f 5f       	subi	r25, 0xFF	; 255
    1166:	c1 f7       	brne	.-16     	; 0x1158 <__mulsf3_pse+0x9e>
    1168:	fe 2b       	or	r31, r30
    116a:	88 0f       	add	r24, r24
    116c:	91 1d       	adc	r25, r1
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret

00001176 <_exit>:
    1176:	f8 94       	cli

00001178 <__stop_program>:
    1178:	ff cf       	rjmp	.-2      	; 0x1178 <__stop_program>
