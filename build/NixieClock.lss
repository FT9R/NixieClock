
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000011ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  00800100  00800100  000011ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b17  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  00002e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2c  00000000  00000000  000039bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000047ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2d  00000000  00000000  000052a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
       4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
       6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
       8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
       a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
       c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
       e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
      10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
      12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
      14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
      16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
      18:	25 c0       	rjmp	.+74     	; 0x64 <__vector_12>
      1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
      1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
      1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
      20:	8c c1       	rjmp	.+792    	; 0x33a <__vector_16>
      22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
      24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
      26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf ef       	ldi	r28, 0xFF	; 255
      2e:	d2 e0       	ldi	r29, 0x02	; 2
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
      34:	21 e0       	ldi	r18, 0x01	; 1
      36:	a0 e0       	ldi	r26, 0x00	; 0
      38:	b1 e0       	ldi	r27, 0x01	; 1
      3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
      3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
      3e:	a1 36       	cpi	r26, 0x61	; 97
      40:	b2 07       	cpc	r27, r18
      42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
      44:	06 d2       	rcall	.+1036   	; 0x452 <main>
      46:	7d c8       	rjmp	.-3846   	; 0xfffff142 <__eeprom_end+0xff7ef142>

00000048 <__bad_interrupt>:
      48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <IO_Init>:

void SoftTurnoff(void)
{
    if ((indication.isTurnedOff) && (voltage.pid.setPoint > 0.0))
        voltage.pid.setPoint -= 0.005;
}
      4a:	8d b1       	in	r24, 0x0d	; 13
      4c:	8c e0       	ldi	r24, 0x0C	; 12
      4e:	8d b9       	out	0x0d, r24	; 13
      50:	1e b8       	out	0x0e, r1	; 14
      52:	68 98       	cbi	0x0d, 0	; 13
      54:	70 9a       	sbi	0x0e, 0	; 14
      56:	22 9a       	sbi	0x04, 2	; 4
      58:	15 b8       	out	0x05, r1	; 5
      5a:	8a b1       	in	r24, 0x0a	; 10
      5c:	8e ef       	ldi	r24, 0xFE	; 254
      5e:	8a b9       	out	0x0a, r24	; 10
      60:	1b b8       	out	0x0b, r1	; 11
      62:	08 95       	ret

00000064 <__vector_12>:

ISR(TIMER0_COMPA_vect)
{
      64:	1f 92       	push	r1
      66:	0f 92       	push	r0
      68:	0f b6       	in	r0, 0x3f	; 63
      6a:	0f 92       	push	r0
      6c:	11 24       	eor	r1, r1
      6e:	2f 93       	push	r18
      70:	5f 93       	push	r21
      72:	6f 93       	push	r22
      74:	7f 93       	push	r23
      76:	8f 93       	push	r24
      78:	9f 93       	push	r25
      7a:	af 93       	push	r26
      7c:	bf 93       	push	r27
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	ef 93       	push	r30
      84:	ff 93       	push	r31
    if (!indication.pause)
      86:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <indication+0x6>
      8a:	81 11       	cpse	r24, r1
      8c:	30 c0       	rjmp	.+96     	; 0xee <__vector_12+0x8a>
    {
        if (indication.dispMode == DISPLAY_TIME)
      8e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x5>
      92:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <indication+0x4>
      96:	81 11       	cpse	r24, r1
      98:	14 c0       	rjmp	.+40     	; 0xc2 <__vector_12+0x5e>
        {
            switch (indication.counter)
      9a:	ef ef       	ldi	r30, 0xFF	; 255
      9c:	e2 0f       	add	r30, r18
      9e:	ec 30       	cpi	r30, 0x0C	; 12
      a0:	a8 f4       	brcc	.+42     	; 0xcc <__vector_12+0x68>
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	eb 5a       	subi	r30, 0xAB	; 171
      a6:	ff 4f       	sbci	r31, 0xFF	; 255
      a8:	09 94       	ijmp
      aa:	af c0       	rjmp	.+350    	; 0x20a <__DATA_REGION_LENGTH__+0xa>
      ac:	48 c0       	rjmp	.+144    	; 0x13e <__vector_12+0xda>
      ae:	99 c0       	rjmp	.+306    	; 0x1e2 <__vector_12+0x17e>
      b0:	46 c0       	rjmp	.+140    	; 0x13e <__vector_12+0xda>
      b2:	73 c0       	rjmp	.+230    	; 0x19a <__vector_12+0x136>
      b4:	44 c0       	rjmp	.+136    	; 0x13e <__vector_12+0xda>
      b6:	62 c0       	rjmp	.+196    	; 0x17c <__vector_12+0x118>
      b8:	42 c0       	rjmp	.+132    	; 0x13e <__vector_12+0xda>
      ba:	81 c0       	rjmp	.+258    	; 0x1be <__vector_12+0x15a>
      bc:	40 c0       	rjmp	.+128    	; 0x13e <__vector_12+0xda>
      be:	9b c0       	rjmp	.+310    	; 0x1f6 <__vector_12+0x192>
      c0:	3e c0       	rjmp	.+124    	; 0x13e <__vector_12+0xda>
                Display_DeadTime();
                break;
            }
        }

        if (indication.dispMode == DISPLAY_TEMPERATURE)
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	49 f1       	breq	.+82     	; 0x118 <__vector_12+0xb4>
            case 12:
                break;
            }
        }

        if (indication.dispMode == DISPLAY_CAD)
      c6:	82 30       	cpi	r24, 0x02	; 2
      c8:	09 f4       	brne	.+2      	; 0xcc <__vector_12+0x68>
      ca:	3e c0       	rjmp	.+124    	; 0x148 <__vector_12+0xe4>
            case 12:
                Display_DeadTime();
                break;
            }
        }
        if (++indication.counter > 12)
      cc:	2f 5f       	subi	r18, 0xFF	; 255
      ce:	2d 30       	cpi	r18, 0x0D	; 13
      d0:	f8 f4       	brcc	.+62     	; 0x110 <__vector_12+0xac>
      d2:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <indication+0x4>
            indication.counter = 1;
        ++cad.counter;
      d6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
      da:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
      de:	01 96       	adiw	r24, 0x01	; 1
      e0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <cad+0x7>
      e4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <cad+0x6>
        voltage.pid.run = true;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <voltage+0x3d>
    }
}
      ee:	ff 91       	pop	r31
      f0:	ef 91       	pop	r30
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	bf 91       	pop	r27
      f8:	af 91       	pop	r26
      fa:	9f 91       	pop	r25
      fc:	8f 91       	pop	r24
      fe:	7f 91       	pop	r23
     100:	6f 91       	pop	r22
     102:	5f 91       	pop	r21
     104:	2f 91       	pop	r18
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti
                Display_DeadTime();
                break;
            }
        }
        if (++indication.counter > 12)
            indication.counter = 1;
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <indication+0x4>
     116:	df cf       	rjmp	.-66     	; 0xd6 <__vector_12+0x72>
            }
        }

        if (indication.dispMode == DISPLAY_TEMPERATURE)
        {
            switch (indication.counter)
     118:	ef ef       	ldi	r30, 0xFF	; 255
     11a:	e2 0f       	add	r30, r18
     11c:	eb 30       	cpi	r30, 0x0B	; 11
     11e:	b0 f6       	brcc	.-84     	; 0xcc <__vector_12+0x68>
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	ec 56       	subi	r30, 0x6C	; 108
     124:	ff 4f       	sbci	r31, 0xFF	; 255
     126:	09 94       	ijmp
     128:	a2 c0       	rjmp	.+324    	; 0x26e <__DATA_REGION_LENGTH__+0x6e>
     12a:	09 c0       	rjmp	.+18     	; 0x13e <__vector_12+0xda>
     12c:	cf cf       	rjmp	.-98     	; 0xcc <__vector_12+0x68>
     12e:	7f c0       	rjmp	.+254    	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
     130:	06 c0       	rjmp	.+12     	; 0x13e <__vector_12+0xda>
     132:	cc cf       	rjmp	.-104    	; 0xcc <__vector_12+0x68>
     134:	91 c0       	rjmp	.+290    	; 0x258 <__DATA_REGION_LENGTH__+0x58>
     136:	03 c0       	rjmp	.+6      	; 0x13e <__vector_12+0xda>
     138:	c9 cf       	rjmp	.-110    	; 0xcc <__vector_12+0x68>
     13a:	84 c0       	rjmp	.+264    	; 0x244 <__DATA_REGION_LENGTH__+0x44>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_12+0xda>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     13e:	8b b1       	in	r24, 0x0b	; 11
     140:	81 70       	andi	r24, 0x01	; 1
     142:	88 61       	ori	r24, 0x18	; 24
     144:	8b b9       	out	0x0b, r24	; 11
     146:	c2 cf       	rjmp	.-124    	; 0xcc <__vector_12+0x68>
            }
        }

        if (indication.dispMode == DISPLAY_CAD)
        {
            switch (indication.counter)
     148:	ef ef       	ldi	r30, 0xFF	; 255
     14a:	e2 0f       	add	r30, r18
     14c:	ec 30       	cpi	r30, 0x0C	; 12
     14e:	08 f0       	brcs	.+2      	; 0x152 <__vector_12+0xee>
     150:	bd cf       	rjmp	.-134    	; 0xcc <__vector_12+0x68>
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	e2 55       	subi	r30, 0x52	; 82
     156:	ff 4f       	sbci	r31, 0xFF	; 255
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     158:	8b b1       	in	r24, 0x0b	; 11
            }
        }

        if (indication.dispMode == DISPLAY_CAD)
        {
            switch (indication.counter)
     15a:	09 94       	ijmp
     15c:	d7 c0       	rjmp	.+430    	; 0x30c <__stack+0xd>
     15e:	0a c0       	rjmp	.+20     	; 0x174 <__vector_12+0x110>
     160:	c3 c0       	rjmp	.+390    	; 0x2e8 <__DATA_REGION_LENGTH__+0xe8>
     162:	08 c0       	rjmp	.+16     	; 0x174 <__vector_12+0x110>
     164:	af c0       	rjmp	.+350    	; 0x2c4 <__DATA_REGION_LENGTH__+0xc4>
     166:	06 c0       	rjmp	.+12     	; 0x174 <__vector_12+0x110>
     168:	a4 c0       	rjmp	.+328    	; 0x2b2 <__DATA_REGION_LENGTH__+0xb2>
     16a:	04 c0       	rjmp	.+8      	; 0x174 <__vector_12+0x110>
     16c:	b4 c0       	rjmp	.+360    	; 0x2d6 <__DATA_REGION_LENGTH__+0xd6>
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_12+0x110>
     170:	c4 c0       	rjmp	.+392    	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
     172:	00 c0       	rjmp	.+0      	; 0x174 <__vector_12+0x110>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     174:	81 70       	andi	r24, 0x01	; 1
     176:	88 61       	ori	r24, 0x18	; 24
     178:	8b b9       	out	0x0b, r24	; 11
     17a:	a8 cf       	rjmp	.-176    	; 0xcc <__vector_12+0x68>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     17c:	8b b1       	in	r24, 0x0b	; 11
     17e:	8f 71       	andi	r24, 0x1F	; 31
     180:	80 68       	ori	r24, 0x80	; 128
     182:	8b b9       	out	0x0b, r24	; 11
            case 6:
                Display_DeadTime();
                break;
            case 7:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit2);
     184:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     188:	8a 30       	cpi	r24, 0x0A	; 10
     18a:	08 f0       	brcs	.+2      	; 0x18e <__vector_12+0x12a>
     18c:	9f cf       	rjmp	.-194    	; 0xcc <__vector_12+0x68>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
     18e:	9b b1       	in	r25, 0x0b	; 11
     190:	91 7e       	andi	r25, 0xE1	; 225
     192:	88 0f       	add	r24, r24
     194:	89 2b       	or	r24, r25
     196:	8b b9       	out	0x0b, r24	; 11
     198:	99 cf       	rjmp	.-206    	; 0xcc <__vector_12+0x68>
                break;
            case 4:
                Display_DeadTime();
                break;
            case 5:
                TimeToDigit(time.min);
     19a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <time+0x1>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
     19e:	6a e0       	ldi	r22, 0x0A	; 10
     1a0:	d8 d5       	rcall	.+2992   	; 0xd52 <__udivmodqi4>
     1a2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <indication>
    indication.digit2 = number % 10;
     1a6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1aa:	8b b1       	in	r24, 0x0b	; 11
     1ac:	8f 71       	andi	r24, 0x1F	; 31
     1ae:	80 66       	ori	r24, 0x60	; 96
     1b0:	8b b9       	out	0x0b, r24	; 11
            switch (indication.counter)
            {
            case 1:
                TemperatureToDigit(temperature.value);
                AnodeSwitch(3u);
                CathodeSwitch(indication.digit1);
     1b2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     1b6:	8a 30       	cpi	r24, 0x0A	; 10
     1b8:	08 f0       	brcs	.+2      	; 0x1bc <__vector_12+0x158>
     1ba:	88 cf       	rjmp	.-240    	; 0xcc <__vector_12+0x68>
     1bc:	e8 cf       	rjmp	.-48     	; 0x18e <__vector_12+0x12a>
                break;
            case 8:
                Display_DeadTime();
                break;
            case 9:
                TimeToDigit(time.sec);
     1be:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
     1c2:	6a e0       	ldi	r22, 0x0A	; 10
     1c4:	c6 d5       	rcall	.+2956   	; 0xd52 <__udivmodqi4>
     1c6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <indication>
    indication.digit2 = number % 10;
     1ca:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1ce:	8b b1       	in	r24, 0x0b	; 11
     1d0:	8f 71       	andi	r24, 0x1F	; 31
     1d2:	80 6a       	ori	r24, 0xA0	; 160
     1d4:	8b b9       	out	0x0b, r24	; 11
                Display_DeadTime();
                break;
            case 9:
                TimeToDigit(time.sec);
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit1);
     1d6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     1da:	8a 30       	cpi	r24, 0x0A	; 10
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__vector_12+0x17c>
     1de:	76 cf       	rjmp	.-276    	; 0xcc <__vector_12+0x68>
     1e0:	d6 cf       	rjmp	.-84     	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1e2:	8b b1       	in	r24, 0x0b	; 11
     1e4:	8f 71       	andi	r24, 0x1F	; 31
     1e6:	80 64       	ori	r24, 0x40	; 64
     1e8:	8b b9       	out	0x0b, r24	; 11
            case 2:
                Display_DeadTime();
                break;
            case 3:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit2);
     1ea:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     1ee:	8a 30       	cpi	r24, 0x0A	; 10
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <__vector_12+0x190>
     1f2:	6c cf       	rjmp	.-296    	; 0xcc <__vector_12+0x68>
     1f4:	cc cf       	rjmp	.-104    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1f6:	8b b1       	in	r24, 0x0b	; 11
     1f8:	8f 71       	andi	r24, 0x1F	; 31
     1fa:	80 6c       	ori	r24, 0xC0	; 192
     1fc:	8b b9       	out	0x0b, r24	; 11
            case 10:
                Display_DeadTime();
                break;
            case 11:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit2);
     1fe:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	08 f0       	brcs	.+2      	; 0x208 <__DATA_REGION_LENGTH__+0x8>
     206:	62 cf       	rjmp	.-316    	; 0xcc <__vector_12+0x68>
     208:	c2 cf       	rjmp	.-124    	; 0x18e <__vector_12+0x12a>
        if (indication.dispMode == DISPLAY_TIME)
        {
            switch (indication.counter)
            {
            case 1:
                TimeToDigit(time.hour);
     20a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
     20e:	6a e0       	ldi	r22, 0x0A	; 10
     210:	a0 d5       	rcall	.+2880   	; 0xd52 <__udivmodqi4>
     212:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <indication>
    indication.digit2 = number % 10;
     216:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     21a:	8b b1       	in	r24, 0x0b	; 11
     21c:	8f 71       	andi	r24, 0x1F	; 31
     21e:	80 62       	ori	r24, 0x20	; 32
     220:	8b b9       	out	0x0b, r24	; 11
            switch (indication.counter)
            {
            case 1:
                TimeToDigit(time.hour);
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit1);
     222:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     226:	8a 30       	cpi	r24, 0x0A	; 10
     228:	08 f0       	brcs	.+2      	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
     22a:	50 cf       	rjmp	.-352    	; 0xcc <__vector_12+0x68>
     22c:	b0 cf       	rjmp	.-160    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     22e:	8b b1       	in	r24, 0x0b	; 11
     230:	8f 71       	andi	r24, 0x1F	; 31
     232:	80 68       	ori	r24, 0x80	; 128
     234:	8b b9       	out	0x0b, r24	; 11
                break;
            case 3:
                break;
            case 4:
                AnodeSwitch(4u);
                CathodeSwitch(indication.digit2);
     236:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     23a:	8a 30       	cpi	r24, 0x0A	; 10
     23c:	08 f4       	brcc	.+2      	; 0x240 <__DATA_REGION_LENGTH__+0x40>
     23e:	76 c0       	rjmp	.+236    	; 0x32c <__stack+0x2d>
            case 3:
                break;
            case 4:
                AnodeSwitch(4u);
                CathodeSwitch(indication.digit2);
                SET_BIT(PORTA, 1 << 3); // RDP turn on
     240:	73 9a       	sbi	0x0e, 3	; 14
                break;
     242:	44 cf       	rjmp	.-376    	; 0xcc <__vector_12+0x68>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     244:	8b b1       	in	r24, 0x0b	; 11
     246:	8f 71       	andi	r24, 0x1F	; 31
     248:	80 6c       	ori	r24, 0xC0	; 192
     24a:	8b b9       	out	0x0b, r24	; 11
                break;
            case 9:
                break;
            case 10:
                AnodeSwitch(6u);
                CathodeSwitch(indication.digit4);
     24c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x3>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     250:	8a 30       	cpi	r24, 0x0A	; 10
     252:	08 f0       	brcs	.+2      	; 0x256 <__DATA_REGION_LENGTH__+0x56>
     254:	3b cf       	rjmp	.-394    	; 0xcc <__vector_12+0x68>
     256:	9b cf       	rjmp	.-202    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     258:	8b b1       	in	r24, 0x0b	; 11
     25a:	8f 71       	andi	r24, 0x1F	; 31
     25c:	80 6a       	ori	r24, 0xA0	; 160
     25e:	8b b9       	out	0x0b, r24	; 11
                break;
            case 6:
                break;
            case 7:
                AnodeSwitch(5u);
                CathodeSwitch(indication.digit3);
     260:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication+0x2>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     264:	8a 30       	cpi	r24, 0x0A	; 10
     266:	08 f4       	brcc	.+2      	; 0x26a <__DATA_REGION_LENGTH__+0x6a>
     268:	5a c0       	rjmp	.+180    	; 0x31e <__stack+0x1f>
            case 6:
                break;
            case 7:
                AnodeSwitch(5u);
                CathodeSwitch(indication.digit3);
                CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     26a:	73 98       	cbi	0x0e, 3	; 14
                break;
     26c:	2f cf       	rjmp	.-418    	; 0xcc <__vector_12+0x68>
        if (indication.dispMode == DISPLAY_TEMPERATURE)
        {
            switch (indication.counter)
            {
            case 1:
                TemperatureToDigit(temperature.value);
     26e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <temperature>
     272:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <temperature+0x1>
    indication.digit2 = number % 10;
}

void TemperatureToDigit(uint16_t temperature)
{
    indication.digit1 = temperature / 10000;
     276:	cf 01       	movw	r24, r30
     278:	60 e1       	ldi	r22, 0x10	; 16
     27a:	77 e2       	ldi	r23, 0x27	; 39
     27c:	76 d5       	rcall	.+2796   	; 0xd6a <__udivmodhi4>
     27e:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication>
    indication.digit2 = (temperature % 10000) / 1000;
     282:	c8 ee       	ldi	r28, 0xE8	; 232
     284:	d3 e0       	ldi	r29, 0x03	; 3
     286:	be 01       	movw	r22, r28
     288:	70 d5       	rcall	.+2784   	; 0xd6a <__udivmodhi4>
     28a:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x1>
    indication.digit3 = (temperature % 1000) / 100;
     28e:	cf 01       	movw	r24, r30
     290:	be 01       	movw	r22, r28
     292:	6b d5       	rcall	.+2774   	; 0xd6a <__udivmodhi4>
     294:	c4 e6       	ldi	r28, 0x64	; 100
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	be 01       	movw	r22, r28
     29a:	67 d5       	rcall	.+2766   	; 0xd6a <__udivmodhi4>
     29c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x2>
    indication.digit4 = (temperature % 100) / 10;
     2a0:	cf 01       	movw	r24, r30
     2a2:	be 01       	movw	r22, r28
     2a4:	62 d5       	rcall	.+2756   	; 0xd6a <__udivmodhi4>
     2a6:	6a e0       	ldi	r22, 0x0A	; 10
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	5f d5       	rcall	.+2750   	; 0xd6a <__udivmodhi4>
     2ac:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <indication+0x3>
     2b0:	7c cf       	rjmp	.-264    	; 0x1aa <__vector_12+0x146>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2b2:	8f 71       	andi	r24, 0x1F	; 31
     2b4:	80 68       	ori	r24, 0x80	; 128
     2b6:	8b b9       	out	0x0b, r24	; 11
            case 6:
                Display_DeadTime();
                break;
            case 7:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit4);
     2b8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cad+0x3>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2bc:	8a 30       	cpi	r24, 0x0A	; 10
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <__DATA_REGION_LENGTH__+0xc2>
     2c0:	05 cf       	rjmp	.-502    	; 0xcc <__vector_12+0x68>
     2c2:	65 cf       	rjmp	.-310    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2c4:	8f 71       	andi	r24, 0x1F	; 31
     2c6:	80 66       	ori	r24, 0x60	; 96
     2c8:	8b b9       	out	0x0b, r24	; 11
            case 4:
                Display_DeadTime();
                break;
            case 5:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit3);
     2ca:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2ce:	8a 30       	cpi	r24, 0x0A	; 10
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__DATA_REGION_LENGTH__+0xd4>
     2d2:	fc ce       	rjmp	.-520    	; 0xcc <__vector_12+0x68>
     2d4:	5c cf       	rjmp	.-328    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2d6:	8f 71       	andi	r24, 0x1F	; 31
     2d8:	80 6a       	ori	r24, 0xA0	; 160
     2da:	8b b9       	out	0x0b, r24	; 11
            case 8:
                Display_DeadTime();
                break;
            case 9:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit5);
     2dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cad+0x4>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2e0:	8a 30       	cpi	r24, 0x0A	; 10
     2e2:	08 f0       	brcs	.+2      	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
     2e4:	f3 ce       	rjmp	.-538    	; 0xcc <__vector_12+0x68>
     2e6:	53 cf       	rjmp	.-346    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2e8:	8f 71       	andi	r24, 0x1F	; 31
     2ea:	80 64       	ori	r24, 0x40	; 64
     2ec:	8b b9       	out	0x0b, r24	; 11
            case 2:
                Display_DeadTime();
                break;
            case 3:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit2);
     2ee:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cad+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2f2:	8a 30       	cpi	r24, 0x0A	; 10
     2f4:	08 f0       	brcs	.+2      	; 0x2f8 <__DATA_REGION_LENGTH__+0xf8>
     2f6:	ea ce       	rjmp	.-556    	; 0xcc <__vector_12+0x68>
     2f8:	4a cf       	rjmp	.-364    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2fa:	8f 71       	andi	r24, 0x1F	; 31
     2fc:	80 6c       	ori	r24, 0xC0	; 192
     2fe:	8b b9       	out	0x0b, r24	; 11
            case 10:
                Display_DeadTime();
                break;
            case 11:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit6);
     300:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     304:	8a 30       	cpi	r24, 0x0A	; 10
     306:	08 f0       	brcs	.+2      	; 0x30a <__stack+0xb>
     308:	e1 ce       	rjmp	.-574    	; 0xcc <__vector_12+0x68>
     30a:	41 cf       	rjmp	.-382    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     30c:	8f 71       	andi	r24, 0x1F	; 31
     30e:	80 62       	ori	r24, 0x20	; 32
     310:	8b b9       	out	0x0b, r24	; 11
        {
            switch (indication.counter)
            {
            case 1:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit1);
     312:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cad>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     316:	8a 30       	cpi	r24, 0x0A	; 10
     318:	08 f0       	brcs	.+2      	; 0x31c <__stack+0x1d>
     31a:	d8 ce       	rjmp	.-592    	; 0xcc <__vector_12+0x68>
     31c:	38 cf       	rjmp	.-400    	; 0x18e <__vector_12+0x12a>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
     31e:	9b b1       	in	r25, 0x0b	; 11
     320:	91 7e       	andi	r25, 0xE1	; 225
     322:	88 0f       	add	r24, r24
     324:	89 2b       	or	r24, r25
     326:	8b b9       	out	0x0b, r24	; 11
            case 6:
                break;
            case 7:
                AnodeSwitch(5u);
                CathodeSwitch(indication.digit3);
                CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     328:	73 98       	cbi	0x0e, 3	; 14
     32a:	d0 ce       	rjmp	.-608    	; 0xcc <__vector_12+0x68>
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
     32c:	9b b1       	in	r25, 0x0b	; 11
     32e:	91 7e       	andi	r25, 0xE1	; 225
     330:	88 0f       	add	r24, r24
     332:	89 2b       	or	r24, r25
     334:	8b b9       	out	0x0b, r24	; 11
            case 3:
                break;
            case 4:
                AnodeSwitch(4u);
                CathodeSwitch(indication.digit2);
                SET_BIT(PORTA, 1 << 3); // RDP turn on
     336:	73 9a       	sbi	0x0e, 3	; 14
     338:	c9 ce       	rjmp	.-622    	; 0xcc <__vector_12+0x68>

0000033a <__vector_16>:
        voltage.pid.run = true;
    }
}

ISR(ADC_vect)
{
     33a:	1f 92       	push	r1
     33c:	0f 92       	push	r0
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	0f 92       	push	r0
     342:	11 24       	eor	r1, r1
     344:	2f 93       	push	r18
     346:	3f 93       	push	r19
     348:	4f 93       	push	r20
     34a:	5f 93       	push	r21
     34c:	6f 93       	push	r22
     34e:	7f 93       	push	r23
     350:	8f 93       	push	r24
     352:	9f 93       	push	r25
     354:	af 93       	push	r26
     356:	bf 93       	push	r27
     358:	ef 93       	push	r30
     35a:	ff 93       	push	r31
    if (voltage.adc.counter < ADC_SAMPLES) // Get ADC_sum by x samples
     35c:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <voltage+0x10>
     360:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <voltage+0xc>
     364:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <voltage+0xd>
     368:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <voltage+0xe>
     36c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <voltage+0xf>
     370:	e4 31       	cpi	r30, 0x14	; 20
     372:	d0 f5       	brcc	.+116    	; 0x3e8 <__vector_16+0xae>
    {
        voltage.adc.sum += ADC;
     374:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
     378:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
     37c:	ab 01       	movw	r20, r22
     37e:	bc 01       	movw	r22, r24
     380:	42 0f       	add	r20, r18
     382:	53 1f       	adc	r21, r19
     384:	61 1d       	adc	r22, r1
     386:	71 1d       	adc	r23, r1
     388:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <voltage+0xc>
     38c:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <voltage+0xd>
     390:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <voltage+0xe>
     394:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <voltage+0xf>
        ++voltage.adc.counter;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	8e 0f       	add	r24, r30
     39c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <voltage+0x10>
     3a0:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <voltage+0x4>
     3a4:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <voltage+0x5>
     3a8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <voltage+0x6>
     3ac:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <voltage+0x7>
        voltage.adc.value = (voltage.adc.mean * VREF) / 0x3FF;
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
        voltage.adc.sum = 0;
        voltage.adc.counter = 0;
    }
    if (voltage.adc.valueScaled > 200.0)
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	48 e4       	ldi	r20, 0x48	; 72
     3b6:	53 e4       	ldi	r21, 0x43	; 67
     3b8:	55 d6       	rcall	.+3242   	; 0x1064 <__gesf2>
     3ba:	18 16       	cp	r1, r24
     3bc:	24 f4       	brge	.+8      	; 0x3c6 <__vector_16+0x8c>
        OCR1B = 0; // Output voltage limitation
     3be:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     3c2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
}
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	bf 91       	pop	r27
     3cc:	af 91       	pop	r26
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	7f 91       	pop	r23
     3d4:	6f 91       	pop	r22
     3d6:	5f 91       	pop	r21
     3d8:	4f 91       	pop	r20
     3da:	3f 91       	pop	r19
     3dc:	2f 91       	pop	r18
     3de:	0f 90       	pop	r0
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti
        voltage.adc.sum += ADC;
        ++voltage.adc.counter;
    }
    else
    {
        voltage.adc.mean = voltage.adc.sum / ADC_SAMPLES;
     3e8:	24 e1       	ldi	r18, 0x14	; 20
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	d0 d4       	rcall	.+2464   	; 0xd92 <__udivmodsi4>
     3f2:	ca 01       	movw	r24, r20
     3f4:	b9 01       	movw	r22, r18
     3f6:	84 d5       	rcall	.+2824   	; 0xf00 <__floatunsisf>
     3f8:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <voltage+0x8>
     3fc:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <voltage+0x9>
     400:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <voltage+0xa>
     404:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <voltage+0xb>
        voltage.adc.value = (voltage.adc.mean * VREF) / 0x3FF;
     408:	29 e0       	ldi	r18, 0x09	; 9
     40a:	30 ef       	ldi	r19, 0xF0	; 240
     40c:	4c e8       	ldi	r20, 0x8C	; 140
     40e:	5a e3       	ldi	r21, 0x3A	; 58
     410:	2d d6       	rcall	.+3162   	; 0x106c <__mulsf3>
     412:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <voltage>
     416:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <voltage+0x1>
     41a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <voltage+0x2>
     41e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <voltage+0x3>
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	43 e5       	ldi	r20, 0x53	; 83
     428:	53 e4       	ldi	r21, 0x43	; 67
     42a:	20 d6       	rcall	.+3136   	; 0x106c <__mulsf3>
     42c:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <voltage+0x4>
     430:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <voltage+0x5>
     434:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <voltage+0x6>
     438:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <voltage+0x7>
        voltage.adc.sum = 0;
     43c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <voltage+0xc>
     440:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <voltage+0xd>
     444:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <voltage+0xe>
     448:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <voltage+0xf>
        voltage.adc.counter = 0;
     44c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <voltage+0x10>
     450:	af cf       	rjmp	.-162    	; 0x3b0 <__vector_16+0x76>

00000452 <main>:
        OCR1B = 0; // Output voltage limitation
}

int main(void)
{
    voltage.pid.pidData.Kp = K_P;
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	97 ed       	ldi	r25, 0xD7	; 215
     456:	a3 e2       	ldi	r26, 0x23	; 35
     458:	bc e3       	ldi	r27, 0x3C	; 60
     45a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <voltage+0x29>
     45e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <voltage+0x2a>
     462:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <voltage+0x2b>
     466:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <voltage+0x2c>
    voltage.pid.pidData.Ki = K_I;
     46a:	87 e1       	ldi	r24, 0x17	; 23
     46c:	97 eb       	ldi	r25, 0xB7	; 183
     46e:	a1 e5       	ldi	r26, 0x51	; 81
     470:	b8 e3       	ldi	r27, 0x38	; 56
     472:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <voltage+0x2d>
     476:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <voltage+0x2e>
     47a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <voltage+0x2f>
     47e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <voltage+0x30>
    voltage.pid.pidData.Kd = K_D;
     482:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <voltage+0x31>
     486:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <voltage+0x32>
     48a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <voltage+0x33>
     48e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <voltage+0x34>
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	8e e1       	ldi	r24, 0x1E	; 30
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	c9 d3       	rcall	.+1938   	; 0xc32 <arm_pid_init_f32>
    IO_Init();
     4a0:	d4 dd       	rcall	.-1112   	; 0x4a <IO_Init>
#include "main.h"

void TIM0_Init(void) // F = 1445Hz; T = 692us
{
    SET_BIT(TCCR0A, (1 << CS00) | (1 << CS01)); // clk/64
     4a2:	85 b5       	in	r24, 0x25	; 37
     4a4:	83 60       	ori	r24, 0x03	; 3
     4a6:	85 bd       	out	0x25, r24	; 37
    SET_BIT(TCCR0A, 1 << CTC0); // CTC EN
     4a8:	85 b5       	in	r24, 0x25	; 37
     4aa:	88 60       	ori	r24, 0x08	; 8
     4ac:	85 bd       	out	0x25, r24	; 37
    SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
     4ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
     4b2:	82 60       	ori	r24, 0x02	; 2
     4b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
    OCR0A = 173 - 1;
     4b8:	8c ea       	ldi	r24, 0xAC	; 172
     4ba:	87 bd       	out	0x27, r24	; 39
}

void TIM1_Init(void) // F = 31.25kHz; T = 32us
{
    SET_BIT(TCCR1A, 1 << WGM11); // Fast PWM, 9-bit
     4bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     4c0:	82 60       	ori	r24, 0x02	; 2
     4c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
    SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     4c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     4ca:	80 62       	ori	r24, 0x20	; 32
     4cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
    SET_BIT(TCCR1B, 1 << CS10); // clk/1
     4d0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
    SET_BIT(TCCR1B, 1 << WGM12); // Fast PWM, 9-bit
     4da:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     4de:	88 60       	ori	r24, 0x08	; 8
     4e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
    voltage.pid.pidData.Kd = K_D;
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
    IO_Init();
    TIM0_Init();
    TIM1_Init();
    ADC_Init();
     4e4:	3b d3       	rcall	.+1654   	; 0xb5c <ADC_Init>
    I2C_Init();
     4e6:	07 d4       	rcall	.+2062   	; 0xcf6 <I2C_Init>
    sei();
     4e8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ea:	2f ef       	ldi	r18, 0xFF	; 255
     4ec:	33 ed       	ldi	r19, 0xD3	; 211
     4ee:	80 e3       	ldi	r24, 0x30	; 48
     4f0:	21 50       	subi	r18, 0x01	; 1
     4f2:	30 40       	sbci	r19, 0x00	; 0
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x9e>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0xa8>
     4fa:	00 00       	nop
    _delay_ms(1000);

    /* Read reference temperature */
    I2C_StartCondition();
     4fc:	00 d4       	rcall	.+2048   	; 0xcfe <I2C_StartCondition>
    I2C_SendByte(0b10010000); // Device address + write bit
     4fe:	80 e9       	ldi	r24, 0x90	; 144
     500:	0a d4       	rcall	.+2068   	; 0xd16 <I2C_SendByte>
    I2C_SendByte(0x00); // Pointer
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 d4       	rcall	.+2064   	; 0xd16 <I2C_SendByte>
    I2C_StartCondition(); // Restart
     506:	fb d3       	rcall	.+2038   	; 0xcfe <I2C_StartCondition>
    I2C_SendByte(0b10010001); // Device address + read bit
     508:	81 e9       	ldi	r24, 0x91	; 145
     50a:	05 d4       	rcall	.+2058   	; 0xd16 <I2C_SendByte>
    temperature.msb = I2C_ReadByte();
     50c:	0e d4       	rcall	.+2076   	; 0xd2a <I2C_ReadByte>
     50e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
    temperature.lsb = I2C_ReadLastByte();
     512:	15 d4       	rcall	.+2090   	; 0xd3e <I2C_ReadLastByte>
     514:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
    I2C_StopCondition();
     518:	fa d3       	rcall	.+2036   	; 0xd0e <I2C_StopCondition>
    temperature.valueRef = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     51a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     51e:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     522:	76 27       	eor	r23, r22
     524:	67 27       	eor	r22, r23
     526:	76 27       	eor	r23, r22
     528:	76 95       	lsr	r23
     52a:	67 95       	ror	r22
     52c:	72 95       	swap	r23
     52e:	62 95       	swap	r22
     530:	6f 70       	andi	r22, 0x0F	; 15
     532:	67 27       	eor	r22, r23
     534:	7f 70       	andi	r23, 0x0F	; 15
     536:	67 27       	eor	r22, r23
     538:	07 2e       	mov	r0, r23
     53a:	00 0c       	add	r0, r0
     53c:	88 0b       	sbc	r24, r24
     53e:	99 0b       	sbc	r25, r25
     540:	e1 d4       	rcall	.+2498   	; 0xf04 <__floatsisf>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	4a ef       	ldi	r20, 0xFA	; 250
     548:	52 e4       	ldi	r21, 0x42	; 66
     54a:	90 d5       	rcall	.+2848   	; 0x106c <__mulsf3>
     54c:	ad d4       	rcall	.+2394   	; 0xea8 <__fixunssfsi>
     54e:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <temperature+0x3>
     552:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <temperature+0x2>
            indication.pause = false, indication.isTurnedOff = false;
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
            {
                OCR1B = 0;
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
                indication.pwmOutputStatus = CONNECTED;
     556:	99 24       	eor	r9, r9
     558:	93 94       	inc	r9
            if (cad.update)
            {
                switch (cad.updateStage)
                {
                case 1:
                    cad.digit1 = (cad.counter / (1445 * 2 / 10)) % 10;
     55a:	01 e2       	ldi	r16, 0x21	; 33
     55c:	11 e0       	ldi	r17, 0x01	; 1
     55e:	ca e0       	ldi	r28, 0x0A	; 10
     560:	d0 e0       	ldi	r29, 0x00	; 0
                    if ((time.hour / 10) == cad.digit1)
     562:	3a e0       	ldi	r19, 0x0A	; 10
     564:	83 2e       	mov	r8, r19

                case 3:
                    cad.digit3 = (cad.counter / (1445 * 2 / 10)) % 10;
                    if ((time.min / 10) == cad.digit3)
                    {
                        ++cad.updateStage;
     566:	44 e0       	ldi	r20, 0x04	; 4
     568:	54 2e       	mov	r5, r20

                case 5:
                    cad.digit5 = (cad.counter / (1445 * 2 / 10)) % 10;
                    if ((time.sec / 10) == cad.digit5)
                    {
                        ++cad.updateStage;
     56a:	56 e0       	ldi	r21, 0x06	; 6
     56c:	65 2e       	mov	r6, r21

                case 4:
                    cad.digit4 = (cad.counter / (1445 * 2 / 10)) % 10;
                    if ((time.min % 10) == cad.digit4)
                    {
                        ++cad.updateStage;
     56e:	65 e0       	ldi	r22, 0x05	; 5
     570:	76 2e       	mov	r7, r22

                case 2:
                    cad.digit2 = (cad.counter / (1445 * 2 / 10)) % 10;
                    if ((time.hour % 10) == cad.digit2)
                    {
                        ++cad.updateStage;
     572:	73 e0       	ldi	r23, 0x03	; 3
     574:	47 2e       	mov	r4, r23
     576:	e9 e6       	ldi	r30, 0x69	; 105
     578:	ae 2e       	mov	r10, r30
     57a:	bb 24       	eor	r11, r11
     57c:	b3 94       	inc	r11
    indication.digit4 = (temperature % 100) / 10;
}

void SoftStart(void)
{
    if ((!indication.pause) && (!indication.isTurnedOff) && (voltage.pid.setPoint <= VOUT_TASK))
     57e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <indication+0x6>
     582:	81 11       	cpse	r24, r1
     584:	05 c0       	rjmp	.+10     	; 0x590 <main+0x13e>
     586:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0x7>
     58a:	88 23       	and	r24, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <main+0x13e>
     58e:	14 c1       	rjmp	.+552    	; 0x7b8 <main+0x366>
    {
        SoftStart();
        // voltage.pid.setPoint = VOUT_TASK; // Manual control

        /* Get time */
        I2C_StartCondition();
     590:	b6 d3       	rcall	.+1900   	; 0xcfe <I2C_StartCondition>
        I2C_SendByte(0xA2); // Device address + write bit
     592:	82 ea       	ldi	r24, 0xA2	; 162
     594:	c0 d3       	rcall	.+1920   	; 0xd16 <I2C_SendByte>
        I2C_SendByte(0x02); // Pointer
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	be d3       	rcall	.+1916   	; 0xd16 <I2C_SendByte>
        I2C_StartCondition(); // Restart
     59a:	b1 d3       	rcall	.+1890   	; 0xcfe <I2C_StartCondition>
        I2C_SendByte(0xA3); // Device address + read bit
     59c:	83 ea       	ldi	r24, 0xA3	; 163
     59e:	bb d3       	rcall	.+1910   	; 0xd16 <I2C_SendByte>
        time.sec = RTC_BCDtoDEC((I2C_ReadByte()) & 0b01111111);
     5a0:	c4 d3       	rcall	.+1928   	; 0xd2a <I2C_ReadByte>
     5a2:	8f 77       	andi	r24, 0x7F	; 127
     5a4:	97 d3       	rcall	.+1838   	; 0xcd4 <RTC_BCDtoDEC>
     5a6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <time>
        time.min = RTC_BCDtoDEC((I2C_ReadByte()) & 0b01111111);
     5aa:	bf d3       	rcall	.+1918   	; 0xd2a <I2C_ReadByte>
     5ac:	8f 77       	andi	r24, 0x7F	; 127
     5ae:	92 d3       	rcall	.+1828   	; 0xcd4 <RTC_BCDtoDEC>
     5b0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <time+0x1>
        time.hour = RTC_BCDtoDEC((I2C_ReadLastByte()) & 0b00111111);
     5b4:	c4 d3       	rcall	.+1928   	; 0xd3e <I2C_ReadLastByte>
     5b6:	8f 73       	andi	r24, 0x3F	; 63
     5b8:	8d d3       	rcall	.+1818   	; 0xcd4 <RTC_BCDtoDEC>
     5ba:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <time+0x2>
        I2C_StopCondition();
     5be:	a7 d3       	rcall	.+1870   	; 0xd0e <I2C_StopCondition>
        //     I2C_StopCondition();
        // }

        /* TimeRes */
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
     5c0:	60 99       	sbic	0x0c, 0	; 12
     5c2:	9f c0       	rjmp	.+318    	; 0x702 <main+0x2b0>
        {
            if (++buttonCounter == 0xFF)
     5c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	8f 3f       	cpi	r24, 0xFF	; 255
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <main+0x17e>
     5ce:	5a c1       	rjmp	.+692    	; 0x884 <main+0x432>
     5d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        }
        else
            buttonCounter = 0;

        /* Daily turnoff */
        if (time.hour < 6)
     5d4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
     5d8:	86 30       	cpi	r24, 0x06	; 6
     5da:	08 f4       	brcc	.+2      	; 0x5de <main+0x18c>
     5dc:	99 c0       	rjmp	.+306    	; 0x710 <main+0x2be>
                }
            }
        }
        else
        {
            indication.pause = false, indication.isTurnedOff = false;
     5de:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <indication+0x6>
     5e2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <indication+0x7>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
     5e6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <indication+0x8>
     5ea:	81 11       	cpse	r24, r1
     5ec:	0f c0       	rjmp	.+30     	; 0x60c <main+0x1ba>
            {
                OCR1B = 0;
     5ee:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     5f2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     5f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     5fa:	80 62       	ori	r24, 0x20	; 32
     5fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                indication.pwmOutputStatus = CONNECTED;
     600:	90 92 60 01 	sts	0x0160, r9	; 0x800160 <indication+0x8>
            }
        }

        if (!indication.pause)
     604:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <indication+0x6>
     608:	81 11       	cpse	r24, r1
     60a:	c2 cf       	rjmp	.-124    	; 0x590 <main+0x13e>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
     60c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <voltage+0x3d>
     610:	81 11       	cpse	r24, r1
     612:	4a c1       	rjmp	.+660    	; 0x8a8 <main+0x456>
                OCR1B = voltage.pid.processValue * 0x1FF;
                voltage.pid.run = false;
            }

            /* Display temperature */
            if ((time.sec > 9) && (time.sec < 15))
     614:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <time>
     618:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <indication+0x5>
     61c:	86 ef       	ldi	r24, 0xF6	; 246
     61e:	82 0f       	add	r24, r18
     620:	85 30       	cpi	r24, 0x05	; 5
     622:	08 f0       	brcs	.+2      	; 0x626 <main+0x1d4>
     624:	eb c0       	rjmp	.+470    	; 0x7fc <main+0x3aa>
     626:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     62a:	91 30       	cpi	r25, 0x01	; 1
     62c:	09 f4       	brne	.+2      	; 0x630 <main+0x1de>
     62e:	ef c0       	rjmp	.+478    	; 0x80e <main+0x3bc>
                {
                    indication.dispMode = DISPLAY_TEMPERATURE;
     630:	90 92 5d 01 	sts	0x015D, r9	; 0x80015d <indication+0x5>

                    /* Read temperature */
                    if (temperature.isCompensated)
     634:	81 11       	cpse	r24, r1
     636:	f5 c1       	rjmp	.+1002   	; 0xa22 <main+0x5d0>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensationFactor;
                    }
                    else
                        temperature.value = temperature.valueRef;
     638:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temperature+0x2>
     63c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temperature+0x3>
     640:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <temperature+0x1>
     644:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temperature>
     648:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temperature+0xa>
     64c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <temperature+0x6>
     650:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <temperature+0x7>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
            {
                if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
     654:	20 ff       	sbrs	r18, 0
     656:	67 c1       	rjmp	.+718    	; 0x926 <main+0x4d4>
     658:	33 23       	and	r19, r19
     65a:	39 f0       	breq	.+14     	; 0x66a <main+0x218>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperature+0x7>
     662:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperature+0x6>
     666:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temperature+0xa>
                if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
                if (temperature.compensationCounter == 3600)
     66a:	80 31       	cpi	r24, 0x10	; 16
     66c:	9e 40       	sbci	r25, 0x0E	; 14
     66e:	09 f4       	brne	.+2      	; 0x672 <main+0x220>
     670:	67 c1       	rjmp	.+718    	; 0x940 <main+0x4ee>
     672:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <cad+0x9>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
                }
            }

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     676:	8d ed       	ldi	r24, 0xDD	; 221
     678:	82 0f       	add	r24, r18
     67a:	85 30       	cpi	r24, 0x05	; 5
     67c:	08 f0       	brcs	.+2      	; 0x680 <main+0x22e>
     67e:	d1 c0       	rjmp	.+418    	; 0x822 <main+0x3d0>
            {
                if (indication.dispMode != DISPLAY_CAD)
     680:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x5>
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	09 f4       	brne	.+2      	; 0x68a <main+0x238>
     688:	98 c1       	rjmp	.+816    	; 0x9ba <main+0x568>
                    indication.dispMode = DISPLAY_CAD, cad.counter = 0;
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <indication+0x5>
     690:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     694:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     698:	80 e0       	ldi	r24, 0x00	; 0
                cad.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
     69a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cad>
                cad.digit2 = cad.digit1;
     69e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <cad+0x1>
                cad.digit3 = cad.digit1;
     6a2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <cad+0x2>
                cad.digit4 = cad.digit1;
     6a6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cad+0x3>
                cad.digit5 = cad.digit1;
     6aa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
                cad.digit6 = cad.digit1;
     6ae:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cad+0x5>
                cad.digit6 = 0;
                cad.counter = 0;
                cad.updateStage = 1;
                cad.update = true;
            }
            if (cad.update)
     6b2:	33 23       	and	r19, r19
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <main+0x266>
     6b6:	63 cf       	rjmp	.-314    	; 0x57e <main+0x12c>
     6b8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
            {
                switch (cad.updateStage)
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	09 f4       	brne	.+2      	; 0x6c2 <main+0x270>
     6c0:	1c c2       	rjmp	.+1080   	; 0xafa <main+0x6a8>
     6c2:	08 f4       	brcc	.+2      	; 0x6c6 <main+0x274>
     6c4:	8f c1       	rjmp	.+798    	; 0x9e4 <main+0x592>
     6c6:	85 30       	cpi	r24, 0x05	; 5
     6c8:	09 f4       	brne	.+2      	; 0x6cc <main+0x27a>
     6ca:	30 c2       	rjmp	.+1120   	; 0xb2c <main+0x6da>
     6cc:	08 f4       	brcc	.+2      	; 0x6d0 <main+0x27e>
     6ce:	fc c1       	rjmp	.+1016   	; 0xac8 <main+0x676>
     6d0:	86 30       	cpi	r24, 0x06	; 6
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <main+0x284>
     6d4:	54 cf       	rjmp	.-344    	; 0x57e <main+0x12c>
                        cad.counter = 0;
                    }
                    break;

                case 6:
                    cad.digit6 = (cad.counter / (1445 * 2 / 10)) % 10;
     6d6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     6da:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     6de:	b8 01       	movw	r22, r16
     6e0:	44 d3       	rcall	.+1672   	; 0xd6a <__udivmodhi4>
     6e2:	cb 01       	movw	r24, r22
     6e4:	be 01       	movw	r22, r28
     6e6:	41 d3       	rcall	.+1666   	; 0xd6a <__udivmodhi4>
     6e8:	38 2f       	mov	r19, r24
     6ea:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cad+0x5>
                    if ((time.sec % 10) == cad.digit6)
     6ee:	82 2f       	mov	r24, r18
     6f0:	68 2d       	mov	r22, r8
     6f2:	2f d3       	rcall	.+1630   	; 0xd52 <__udivmodqi4>
     6f4:	93 13       	cpse	r25, r19
     6f6:	43 cf       	rjmp	.-378    	; 0x57e <main+0x12c>
                    {
                        cad.update = false;
     6f8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
                        indication.dispMode = DISPLAY_TIME;
     6fc:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <indication+0x5>
     700:	3e cf       	rjmp	.-388    	; 0x57e <main+0x12c>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
                I2C_StopCondition();
            }
        }
        else
            buttonCounter = 0;
     702:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

        /* Daily turnoff */
        if (time.hour < 6)
     706:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
     70a:	86 30       	cpi	r24, 0x06	; 6
     70c:	08 f0       	brcs	.+2      	; 0x710 <main+0x2be>
     70e:	67 cf       	rjmp	.-306    	; 0x5de <main+0x18c>
        {
            indication.isTurnedOff = true;
     710:	90 92 5f 01 	sts	0x015F, r9	; 0x80015f <indication+0x7>
        voltage.pid.setPoint += 0.01;
}

void SoftTurnoff(void)
{
    if ((indication.isTurnedOff) && (voltage.pid.setPoint > 0.0))
     714:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage+0x35>
     718:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x36>
     71c:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x37>
     720:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x38>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	a9 01       	movw	r20, r18
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	9a d4       	rcall	.+2356   	; 0x1064 <__gesf2>
     730:	18 16       	cp	r1, r24
     732:	8c f4       	brge	.+34     	; 0x756 <main+0x304>
        voltage.pid.setPoint -= 0.005;
     734:	2a e0       	ldi	r18, 0x0A	; 10
     736:	37 ed       	ldi	r19, 0xD7	; 215
     738:	43 ea       	ldi	r20, 0xA3	; 163
     73a:	5b e3       	ldi	r21, 0x3B	; 59
     73c:	c7 01       	movw	r24, r14
     73e:	b6 01       	movw	r22, r12
     740:	4a d3       	rcall	.+1684   	; 0xdd6 <__subsf3>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
     746:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <voltage+0x35>
     74a:	d0 92 43 01 	sts	0x0143, r13	; 0x800143 <voltage+0x36>
     74e:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <voltage+0x37>
     752:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <voltage+0x38>
        /* Daily turnoff */
        if (time.hour < 6)
        {
            indication.isTurnedOff = true;
            SoftTurnoff();
            if (voltage.pid.setPoint < 100.0)
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	48 ec       	ldi	r20, 0xC8	; 200
     75c:	52 e4       	ldi	r21, 0x42	; 66
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	9e d3       	rcall	.+1852   	; 0xea0 <__cmpsf2>
     764:	87 ff       	sbrs	r24, 7
     766:	4e cf       	rjmp	.-356    	; 0x604 <main+0x1b2>
            {
                indication.pause = true, Display_DeadTime();
     768:	90 92 5e 01 	sts	0x015E, r9	; 0x80015e <indication+0x6>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     76c:	8b b1       	in	r24, 0x0b	; 11
     76e:	81 70       	andi	r24, 0x01	; 1
     770:	88 61       	ori	r24, 0x18	; 24
     772:	8b b9       	out	0x0b, r24	; 11
            indication.isTurnedOff = true;
            SoftTurnoff();
            if (voltage.pid.setPoint < 100.0)
            {
                indication.pause = true, Display_DeadTime();
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
     774:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <indication+0x8>
     778:	88 23       	and	r24, r24
     77a:	59 f0       	breq	.+22     	; 0x792 <main+0x340>
                {
                    OCR1B = 0;
     77c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     780:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                    CLEAR_BIT(TCCR1A, 1 << COM1B1); // OC1A/OC1B disconnected
     784:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     788:	8f 7d       	andi	r24, 0xDF	; 223
     78a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                    indication.pwmOutputStatus = DISCONNECTED;
     78e:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <indication+0x8>
                }
                if (time.sec % 2) // Turnoff status LED blink
     792:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time>
     796:	80 ff       	sbrs	r24, 0
     798:	35 cf       	rjmp	.-406    	; 0x604 <main+0x1b2>
                {
                    SET_BIT(PORTD, 1 << 0);
     79a:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79c:	8f e8       	ldi	r24, 0x8F	; 143
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <main+0x34e>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <main+0x354>
     7a6:	00 00       	nop
                    _delay_us(100);
                    CLEAR_BIT(PORTD, 1 << 0);
     7a8:	58 98       	cbi	0x0b, 0	; 11
     7aa:	8f e1       	ldi	r24, 0x1F	; 31
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <main+0x35c>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <main+0x362>
     7b4:	00 00       	nop
     7b6:	26 cf       	rjmp	.-436    	; 0x604 <main+0x1b2>
    indication.digit4 = (temperature % 100) / 10;
}

void SoftStart(void)
{
    if ((!indication.pause) && (!indication.isTurnedOff) && (voltage.pid.setPoint <= VOUT_TASK))
     7b8:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage+0x35>
     7bc:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x36>
     7c0:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x37>
     7c4:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x38>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	44 e3       	ldi	r20, 0x34	; 52
     7ce:	53 e4       	ldi	r21, 0x43	; 67
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	65 d3       	rcall	.+1738   	; 0xea0 <__cmpsf2>
     7d6:	18 16       	cp	r1, r24
     7d8:	0c f4       	brge	.+2      	; 0x7dc <main+0x38a>
     7da:	da ce       	rjmp	.-588    	; 0x590 <main+0x13e>
        voltage.pid.setPoint += 0.01;
     7dc:	2a e0       	ldi	r18, 0x0A	; 10
     7de:	37 ed       	ldi	r19, 0xD7	; 215
     7e0:	43 e2       	ldi	r20, 0x23	; 35
     7e2:	5c e3       	ldi	r21, 0x3C	; 60
     7e4:	c7 01       	movw	r24, r14
     7e6:	b6 01       	movw	r22, r12
     7e8:	f7 d2       	rcall	.+1518   	; 0xdd8 <__addsf3>
     7ea:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <voltage+0x35>
     7ee:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <voltage+0x36>
     7f2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <voltage+0x37>
     7f6:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <voltage+0x38>
     7fa:	ca ce       	rjmp	.-620    	; 0x590 <main+0x13e>
                    }
                    else
                        temperature.value = temperature.valueRef;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
     7fc:	91 30       	cpi	r25, 0x01	; 1
     7fe:	29 f4       	brne	.+10     	; 0x80a <main+0x3b8>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);
     800:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <indication+0x5>
     804:	73 98       	cbi	0x0e, 3	; 14
     806:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <time>
     80a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>

            /* Temperature compensation */
            if (!temperature.isCompensated)
     80e:	88 23       	and	r24, r24
     810:	09 f4       	brne	.+2      	; 0x814 <main+0x3c2>
     812:	1a cf       	rjmp	.-460    	; 0x648 <main+0x1f6>
     814:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <cad+0x9>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
                }
            }

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     818:	8d ed       	ldi	r24, 0xDD	; 221
     81a:	82 0f       	add	r24, r18
     81c:	85 30       	cpi	r24, 0x05	; 5
     81e:	08 f4       	brcc	.+2      	; 0x822 <main+0x3d0>
     820:	2f cf       	rjmp	.-418    	; 0x680 <main+0x22e>
                cad.digit3 = cad.digit1;
                cad.digit4 = cad.digit1;
                cad.digit5 = cad.digit1;
                cad.digit6 = cad.digit1;
            }
            else if ((time.sec == 40) && (!cad.update))
     822:	28 32       	cpi	r18, 0x28	; 40
     824:	09 f0       	breq	.+2      	; 0x828 <main+0x3d6>
     826:	45 cf       	rjmp	.-374    	; 0x6b2 <main+0x260>
     828:	31 11       	cpse	r19, r1
     82a:	46 cf       	rjmp	.-372    	; 0x6b8 <main+0x266>
            {
                cad.digit1 = 0;
                cad.digit2 = 0;
     82c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
                cad.digit3 = 0;
     830:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
                cad.digit4 = 0;
     834:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
                cad.digit5 = 0;
     838:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <cad+0x4>
                cad.digit6 = 0;
     83c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cad+0x5>
                cad.counter = 0;
     840:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     844:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
                cad.updateStage = 1;
     848:	90 92 53 01 	sts	0x0153, r9	; 0x800153 <cad+0x8>
                cad.update = true;
     84c:	90 92 54 01 	sts	0x0154, r9	; 0x800154 <cad+0x9>
            if (cad.update)
            {
                switch (cad.updateStage)
                {
                case 1:
                    cad.digit1 = (cad.counter / (1445 * 2 / 10)) % 10;
     850:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     854:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     858:	b8 01       	movw	r22, r16
     85a:	87 d2       	rcall	.+1294   	; 0xd6a <__udivmodhi4>
     85c:	cb 01       	movw	r24, r22
     85e:	be 01       	movw	r22, r28
     860:	84 d2       	rcall	.+1288   	; 0xd6a <__udivmodhi4>
     862:	28 2f       	mov	r18, r24
     864:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cad>
                    if ((time.hour / 10) == cad.digit1)
     868:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
     86c:	68 2d       	mov	r22, r8
     86e:	71 d2       	rcall	.+1250   	; 0xd52 <__udivmodqi4>
     870:	82 13       	cpse	r24, r18
     872:	85 ce       	rjmp	.-758    	; 0x57e <main+0x12c>
                    {
                        ++cad.updateStage;
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <cad+0x8>
                        cad.counter = 0;
     87a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     87e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     882:	7d ce       	rjmp	.-774    	; 0x57e <main+0x12c>
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
        {
            if (++buttonCounter == 0xFF)
            {
                buttonCounter = 0;
     884:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
                I2C_StartCondition();
     888:	3a d2       	rcall	.+1140   	; 0xcfe <I2C_StartCondition>
                I2C_SendByte(0xA2); // Device address + write bit
     88a:	82 ea       	ldi	r24, 0xA2	; 162
     88c:	44 d2       	rcall	.+1160   	; 0xd16 <I2C_SendByte>
                I2C_SendByte(0x02); // Pointer
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	42 d2       	rcall	.+1156   	; 0xd16 <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Sec
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	2a d2       	rcall	.+1108   	; 0xcea <RTC_DECtoBCD>
     896:	3f d2       	rcall	.+1150   	; 0xd16 <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Min
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	27 d2       	rcall	.+1102   	; 0xcea <RTC_DECtoBCD>
     89c:	3c d2       	rcall	.+1144   	; 0xd16 <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
     89e:	84 e1       	ldi	r24, 0x14	; 20
     8a0:	24 d2       	rcall	.+1096   	; 0xcea <RTC_DECtoBCD>
     8a2:	39 d2       	rcall	.+1138   	; 0xd16 <I2C_SendByte>
                I2C_StopCondition();
     8a4:	34 d2       	rcall	.+1128   	; 0xd0e <I2C_StopCondition>
     8a6:	96 ce       	rjmp	.-724    	; 0x5d4 <main+0x182>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);
     8a8:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <voltage+0x4>
     8ac:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <voltage+0x5>
     8b0:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <voltage+0x6>
     8b4:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <voltage+0x7>
     8b8:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     8bc:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     8c0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     8c4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     8c8:	86 d2       	rcall	.+1292   	; 0xdd6 <__subsf3>
     8ca:	ab 01       	movw	r20, r22
     8cc:	bc 01       	movw	r22, r24
     8ce:	8e e1       	ldi	r24, 0x1E	; 30
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	55 d1       	rcall	.+682    	; 0xb7e <arm_pid_f32>
     8d4:	6b 01       	movw	r12, r22
     8d6:	7c 01       	movw	r14, r24

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	e0 d2       	rcall	.+1472   	; 0xea0 <__cmpsf2>
     8e0:	87 fd       	sbrc	r24, 7
     8e2:	75 c0       	rjmp	.+234    	; 0x9ce <main+0x57c>
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
     8e4:	23 e3       	ldi	r18, 0x33	; 51
     8e6:	33 e3       	ldi	r19, 0x33	; 51
     8e8:	43 e3       	ldi	r20, 0x33	; 51
     8ea:	5f e3       	ldi	r21, 0x3F	; 63
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	b9 d3       	rcall	.+1906   	; 0x1064 <__gesf2>
     8f2:	18 16       	cp	r1, r24
     8f4:	0c f4       	brge	.+2      	; 0x8f8 <main+0x4a6>
     8f6:	d9 c0       	rjmp	.+434    	; 0xaaa <main+0x658>
        if (!indication.pause)
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
     8f8:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <voltage+0x39>
     8fc:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <voltage+0x3a>
     900:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <voltage+0x3b>
     904:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <voltage+0x3c>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e8       	ldi	r19, 0x80	; 128
     90c:	4f ef       	ldi	r20, 0xFF	; 255
     90e:	53 e4       	ldi	r21, 0x43	; 67
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	ab d3       	rcall	.+1878   	; 0x106c <__mulsf3>
     916:	c8 d2       	rcall	.+1424   	; 0xea8 <__fixunssfsi>
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;

                OCR1B = voltage.pid.processValue * 0x1FF;
     918:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     91c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                voltage.pid.run = false;
     920:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <voltage+0x3d>
     924:	77 ce       	rjmp	.-786    	; 0x614 <main+0x1c2>
            /* Temperature compensation */
            if (!temperature.isCompensated)
            {
                if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
                if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
     926:	31 11       	cpse	r19, r1
     928:	a0 ce       	rjmp	.-704    	; 0x66a <main+0x218>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperature+0x7>
     930:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperature+0x6>
     934:	90 92 0b 01 	sts	0x010B, r9	; 0x80010b <temperature+0xa>
                if (temperature.compensationCounter == 3600)
     938:	80 31       	cpi	r24, 0x10	; 16
     93a:	9e 40       	sbci	r25, 0x0E	; 14
     93c:	09 f0       	breq	.+2      	; 0x940 <main+0x4ee>
     93e:	99 ce       	rjmp	.-718    	; 0x672 <main+0x220>
                {
                    I2C_StartCondition();
     940:	de d1       	rcall	.+956    	; 0xcfe <I2C_StartCondition>
                    I2C_SendByte(0b10010000); // Device address + write bit
     942:	80 e9       	ldi	r24, 0x90	; 144
     944:	e8 d1       	rcall	.+976    	; 0xd16 <I2C_SendByte>
                    I2C_SendByte(0x00); // Pointer
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	e6 d1       	rcall	.+972    	; 0xd16 <I2C_SendByte>
                    I2C_StartCondition(); // Restart
     94a:	d9 d1       	rcall	.+946    	; 0xcfe <I2C_StartCondition>
                    I2C_SendByte(0b10010001); // Device address + read bit
     94c:	81 e9       	ldi	r24, 0x91	; 145
     94e:	e3 d1       	rcall	.+966    	; 0xd16 <I2C_SendByte>
                    temperature.msb = I2C_ReadByte();
     950:	ec d1       	rcall	.+984    	; 0xd2a <I2C_ReadByte>
     952:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                    temperature.lsb = I2C_ReadLastByte();
     956:	f3 d1       	rcall	.+998    	; 0xd3e <I2C_ReadLastByte>
     958:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                    I2C_StopCondition();
     95c:	d8 d1       	rcall	.+944    	; 0xd0e <I2C_StopCondition>
                    temperature.value = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     95e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     962:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     966:	76 27       	eor	r23, r22
     968:	67 27       	eor	r22, r23
     96a:	76 27       	eor	r23, r22
     96c:	76 95       	lsr	r23
     96e:	67 95       	ror	r22
     970:	72 95       	swap	r23
     972:	62 95       	swap	r22
     974:	6f 70       	andi	r22, 0x0F	; 15
     976:	67 27       	eor	r22, r23
     978:	7f 70       	andi	r23, 0x0F	; 15
     97a:	67 27       	eor	r22, r23
     97c:	07 2e       	mov	r0, r23
     97e:	00 0c       	add	r0, r0
     980:	88 0b       	sbc	r24, r24
     982:	99 0b       	sbc	r25, r25
     984:	bf d2       	rcall	.+1406   	; 0xf04 <__floatsisf>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	4a ef       	ldi	r20, 0xFA	; 250
     98c:	52 e4       	ldi	r21, 0x42	; 66
     98e:	6e d3       	rcall	.+1756   	; 0x106c <__mulsf3>
     990:	8b d2       	rcall	.+1302   	; 0xea8 <__fixunssfsi>
     992:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     996:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
                    temperature.compensationFactor = temperature.valueRef - temperature.value;
     99a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temperature+0x2>
     99e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temperature+0x3>
     9a2:	c9 01       	movw	r24, r18
     9a4:	86 1b       	sub	r24, r22
     9a6:	97 0b       	sbc	r25, r23
     9a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperature+0x5>
     9ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperature+0x4>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
     9b0:	90 92 0c 01 	sts	0x010C, r9	; 0x80010c <temperature+0xb>
     9b4:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <time>
     9b8:	5c ce       	rjmp	.-840    	; 0x672 <main+0x220>
     9ba:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     9be:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     9c2:	b5 01       	movw	r22, r10
     9c4:	d2 d1       	rcall	.+932    	; 0xd6a <__udivmodhi4>
     9c6:	cb 01       	movw	r24, r22
     9c8:	be 01       	movw	r22, r28
     9ca:	cf d1       	rcall	.+926    	; 0xd6a <__udivmodhi4>
     9cc:	66 ce       	rjmp	.-820    	; 0x69a <main+0x248>
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
     9ce:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage+0x39>
     9d2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <voltage+0x3a>
     9d6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <voltage+0x3b>
     9da:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <voltage+0x3c>
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	9a cf       	rjmp	.-204    	; 0x918 <main+0x4c6>
                cad.updateStage = 1;
                cad.update = true;
            }
            if (cad.update)
            {
                switch (cad.updateStage)
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	09 f4       	brne	.+2      	; 0x9ea <main+0x598>
     9e8:	33 cf       	rjmp	.-410    	; 0x850 <main+0x3fe>
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <main+0x59e>
     9ee:	c7 cd       	rjmp	.-1138   	; 0x57e <main+0x12c>
                        cad.counter = 0;
                    }
                    break;

                case 2:
                    cad.digit2 = (cad.counter / (1445 * 2 / 10)) % 10;
     9f0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     9f4:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     9f8:	b8 01       	movw	r22, r16
     9fa:	b7 d1       	rcall	.+878    	; 0xd6a <__udivmodhi4>
     9fc:	cb 01       	movw	r24, r22
     9fe:	be 01       	movw	r22, r28
     a00:	b4 d1       	rcall	.+872    	; 0xd6a <__udivmodhi4>
     a02:	28 2f       	mov	r18, r24
     a04:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <cad+0x1>
                    if ((time.hour % 10) == cad.digit2)
     a08:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time+0x2>
     a0c:	68 2d       	mov	r22, r8
     a0e:	a1 d1       	rcall	.+834    	; 0xd52 <__udivmodqi4>
     a10:	92 13       	cpse	r25, r18
     a12:	b5 cd       	rjmp	.-1174   	; 0x57e <main+0x12c>
                    {
                        ++cad.updateStage;
     a14:	40 92 53 01 	sts	0x0153, r4	; 0x800153 <cad+0x8>
                        cad.counter = 0;
     a18:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     a1c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     a20:	ae cd       	rjmp	.-1188   	; 0x57e <main+0x12c>
                    indication.dispMode = DISPLAY_TEMPERATURE;

                    /* Read temperature */
                    if (temperature.isCompensated)
                    {
                        I2C_StartCondition();
     a22:	6d d1       	rcall	.+730    	; 0xcfe <I2C_StartCondition>
                        I2C_SendByte(0b10010000); // Device address + write bit
     a24:	80 e9       	ldi	r24, 0x90	; 144
     a26:	77 d1       	rcall	.+750    	; 0xd16 <I2C_SendByte>
                        I2C_SendByte(0x00); // Pointer
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	75 d1       	rcall	.+746    	; 0xd16 <I2C_SendByte>
                        I2C_StartCondition(); // Restart
     a2c:	68 d1       	rcall	.+720    	; 0xcfe <I2C_StartCondition>
                        I2C_SendByte(0b10010001); // Device address + read bit
     a2e:	81 e9       	ldi	r24, 0x91	; 145
     a30:	72 d1       	rcall	.+740    	; 0xd16 <I2C_SendByte>
                        temperature.msb = I2C_ReadByte();
     a32:	7b d1       	rcall	.+758    	; 0xd2a <I2C_ReadByte>
     a34:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                        temperature.lsb = I2C_ReadLastByte();
     a38:	82 d1       	rcall	.+772    	; 0xd3e <I2C_ReadLastByte>
     a3a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                        I2C_StopCondition();
     a3e:	67 d1       	rcall	.+718    	; 0xd0e <I2C_StopCondition>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
     a40:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     a44:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     a48:	76 27       	eor	r23, r22
     a4a:	67 27       	eor	r22, r23
     a4c:	76 27       	eor	r23, r22
     a4e:	76 95       	lsr	r23
     a50:	67 95       	ror	r22
     a52:	72 95       	swap	r23
     a54:	62 95       	swap	r22
     a56:	6f 70       	andi	r22, 0x0F	; 15
     a58:	67 27       	eor	r22, r23
     a5a:	7f 70       	andi	r23, 0x0F	; 15
     a5c:	67 27       	eor	r22, r23
     a5e:	07 2e       	mov	r0, r23
     a60:	00 0c       	add	r0, r0
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	4e d2       	rcall	.+1180   	; 0xf04 <__floatsisf>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	4a ef       	ldi	r20, 0xFA	; 250
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	fd d2       	rcall	.+1530   	; 0x106c <__mulsf3>
     a72:	6b 01       	movw	r12, r22
     a74:	7c 01       	movw	r14, r24
     a76:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <temperature+0x4>
     a7a:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <temperature+0x5>
     a7e:	07 2e       	mov	r0, r23
     a80:	00 0c       	add	r0, r0
     a82:	88 0b       	sbc	r24, r24
     a84:	99 0b       	sbc	r25, r25
     a86:	3e d2       	rcall	.+1148   	; 0xf04 <__floatsisf>
     a88:	9b 01       	movw	r18, r22
     a8a:	ac 01       	movw	r20, r24
     a8c:	c7 01       	movw	r24, r14
     a8e:	b6 01       	movw	r22, r12
     a90:	a3 d1       	rcall	.+838    	; 0xdd8 <__addsf3>
                        I2C_StartCondition(); // Restart
                        I2C_SendByte(0b10010001); // Device address + read bit
                        temperature.msb = I2C_ReadByte();
                        temperature.lsb = I2C_ReadLastByte();
                        I2C_StopCondition();
                        temperature.value =
     a92:	0a d2       	rcall	.+1044   	; 0xea8 <__fixunssfsi>
     a94:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     a98:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
     a9c:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <time>
     aa0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
     aa4:	81 11       	cpse	r24, r1
     aa6:	b6 ce       	rjmp	.-660    	; 0x814 <main+0x3c2>
     aa8:	cf cd       	rjmp	.-1122   	; 0x648 <main+0x1f6>

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;
     aaa:	83 e3       	ldi	r24, 0x33	; 51
     aac:	93 e3       	ldi	r25, 0x33	; 51
     aae:	a3 e3       	ldi	r26, 0x33	; 51
     ab0:	bf e3       	ldi	r27, 0x3F	; 63
     ab2:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <voltage+0x39>
     ab6:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <voltage+0x3a>
     aba:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <voltage+0x3b>
     abe:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <voltage+0x3c>
     ac2:	65 e6       	ldi	r22, 0x65	; 101
     ac4:	71 e0       	ldi	r23, 0x01	; 1
     ac6:	28 cf       	rjmp	.-432    	; 0x918 <main+0x4c6>
                        cad.counter = 0;
                    }
                    break;

                case 4:
                    cad.digit4 = (cad.counter / (1445 * 2 / 10)) % 10;
     ac8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     acc:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     ad0:	b8 01       	movw	r22, r16
     ad2:	4b d1       	rcall	.+662    	; 0xd6a <__udivmodhi4>
     ad4:	cb 01       	movw	r24, r22
     ad6:	be 01       	movw	r22, r28
     ad8:	48 d1       	rcall	.+656    	; 0xd6a <__udivmodhi4>
     ada:	28 2f       	mov	r18, r24
     adc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cad+0x3>
                    if ((time.min % 10) == cad.digit4)
     ae0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <time+0x1>
     ae4:	68 2d       	mov	r22, r8
     ae6:	35 d1       	rcall	.+618    	; 0xd52 <__udivmodqi4>
     ae8:	92 13       	cpse	r25, r18
     aea:	49 cd       	rjmp	.-1390   	; 0x57e <main+0x12c>
                    {
                        ++cad.updateStage;
     aec:	70 92 53 01 	sts	0x0153, r7	; 0x800153 <cad+0x8>
                        cad.counter = 0;
     af0:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     af4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     af8:	42 cd       	rjmp	.-1404   	; 0x57e <main+0x12c>
                        cad.counter = 0;
                    }
                    break;

                case 3:
                    cad.digit3 = (cad.counter / (1445 * 2 / 10)) % 10;
     afa:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     afe:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     b02:	b8 01       	movw	r22, r16
     b04:	32 d1       	rcall	.+612    	; 0xd6a <__udivmodhi4>
     b06:	cb 01       	movw	r24, r22
     b08:	be 01       	movw	r22, r28
     b0a:	2f d1       	rcall	.+606    	; 0xd6a <__udivmodhi4>
     b0c:	28 2f       	mov	r18, r24
     b0e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <cad+0x2>
                    if ((time.min / 10) == cad.digit3)
     b12:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <time+0x1>
     b16:	68 2d       	mov	r22, r8
     b18:	1c d1       	rcall	.+568    	; 0xd52 <__udivmodqi4>
     b1a:	82 13       	cpse	r24, r18
     b1c:	30 cd       	rjmp	.-1440   	; 0x57e <main+0x12c>
                    {
                        ++cad.updateStage;
     b1e:	50 92 53 01 	sts	0x0153, r5	; 0x800153 <cad+0x8>
                        cad.counter = 0;
     b22:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     b26:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     b2a:	29 cd       	rjmp	.-1454   	; 0x57e <main+0x12c>
                        cad.counter = 0;
                    }
                    break;

                case 5:
                    cad.digit5 = (cad.counter / (1445 * 2 / 10)) % 10;
     b2c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
     b30:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
     b34:	b8 01       	movw	r22, r16
     b36:	19 d1       	rcall	.+562    	; 0xd6a <__udivmodhi4>
     b38:	cb 01       	movw	r24, r22
     b3a:	be 01       	movw	r22, r28
     b3c:	16 d1       	rcall	.+556    	; 0xd6a <__udivmodhi4>
     b3e:	38 2f       	mov	r19, r24
     b40:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
                    if ((time.sec / 10) == cad.digit5)
     b44:	82 2f       	mov	r24, r18
     b46:	68 2d       	mov	r22, r8
     b48:	04 d1       	rcall	.+520    	; 0xd52 <__udivmodqi4>
     b4a:	83 13       	cpse	r24, r19
     b4c:	18 cd       	rjmp	.-1488   	; 0x57e <main+0x12c>
                    {
                        ++cad.updateStage;
     b4e:	60 92 53 01 	sts	0x0153, r6	; 0x800153 <cad+0x8>
                        cad.counter = 0;
     b52:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     b56:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     b5a:	11 cd       	rjmp	.-1502   	; 0x57e <main+0x12c>

00000b5c <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
    ADCSRA |= ((1 << ADEN) // ADC EN
     b5c:	ea e7       	ldi	r30, 0x7A	; 122
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 6a       	ori	r24, 0xAF	; 175
     b64:	80 83       	st	Z, r24
               | (1 << ADATE) // AUTO TRIG EN
               | (1 << ADIE) // ADC CONVERSION INTERRUPT EN
               | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); // 128 PRESCALE

    ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3)); // ADC0 INPUT
     b66:	ac e7       	ldi	r26, 0x7C	; 124
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	8c 91       	ld	r24, X
     b6c:	80 7f       	andi	r24, 0xF0	; 240
     b6e:	8c 93       	st	X, r24
    ADMUX &= ~(1 << REFS0); // 1.1V REFs
     b70:	8c 91       	ld	r24, X
     b72:	8f 7b       	andi	r24, 0xBF	; 191
     b74:	8c 93       	st	X, r24

    ADCSRA |= (1 << ADSC); // ADC START
     b76:	80 81       	ld	r24, Z
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	80 83       	st	Z, r24
     b7c:	08 95       	ret

00000b7e <arm_pid_f32>:
#include "PID.h"

float32_t arm_pid_f32(arm_pid_instance_f32 *S, float32_t in)
{
     b7e:	4f 92       	push	r4
     b80:	5f 92       	push	r5
     b82:	6f 92       	push	r6
     b84:	7f 92       	push	r7
     b86:	8f 92       	push	r8
     b88:	9f 92       	push	r9
     b8a:	af 92       	push	r10
     b8c:	bf 92       	push	r11
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
     b9c:	6a 01       	movw	r12, r20
     b9e:	7b 01       	movw	r14, r22
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */
    out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
     ba0:	8c 84       	ldd	r8, Y+12	; 0x0c
     ba2:	9d 84       	ldd	r9, Y+13	; 0x0d
     ba4:	ae 84       	ldd	r10, Y+14	; 0x0e
     ba6:	bf 84       	ldd	r11, Y+15	; 0x0f
     ba8:	28 81       	ld	r18, Y
     baa:	39 81       	ldd	r19, Y+1	; 0x01
     bac:	4a 81       	ldd	r20, Y+2	; 0x02
     bae:	5b 81       	ldd	r21, Y+3	; 0x03
     bb0:	cb 01       	movw	r24, r22
     bb2:	b6 01       	movw	r22, r12
     bb4:	5b d2       	rcall	.+1206   	; 0x106c <__mulsf3>
     bb6:	2b 01       	movw	r4, r22
     bb8:	3c 01       	movw	r6, r24
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	4e 81       	ldd	r20, Y+6	; 0x06
     bc0:	5f 81       	ldd	r21, Y+7	; 0x07
     bc2:	c5 01       	movw	r24, r10
     bc4:	b4 01       	movw	r22, r8
     bc6:	52 d2       	rcall	.+1188   	; 0x106c <__mulsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	c3 01       	movw	r24, r6
     bce:	b2 01       	movw	r22, r4
     bd0:	03 d1       	rcall	.+518    	; 0xdd8 <__addsf3>
     bd2:	2c 89       	ldd	r18, Y+20	; 0x14
     bd4:	3d 89       	ldd	r19, Y+21	; 0x15
     bd6:	4e 89       	ldd	r20, Y+22	; 0x16
     bd8:	5f 89       	ldd	r21, Y+23	; 0x17
     bda:	fe d0       	rcall	.+508    	; 0xdd8 <__addsf3>
     bdc:	2b 01       	movw	r4, r22
     bde:	3c 01       	movw	r6, r24
     be0:	28 89       	ldd	r18, Y+16	; 0x10
     be2:	39 89       	ldd	r19, Y+17	; 0x11
     be4:	4a 89       	ldd	r20, Y+18	; 0x12
     be6:	5b 89       	ldd	r21, Y+19	; 0x13
     be8:	68 85       	ldd	r22, Y+8	; 0x08
     bea:	79 85       	ldd	r23, Y+9	; 0x09
     bec:	8a 85       	ldd	r24, Y+10	; 0x0a
     bee:	9b 85       	ldd	r25, Y+11	; 0x0b
     bf0:	3d d2       	rcall	.+1146   	; 0x106c <__mulsf3>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	ee d0       	rcall	.+476    	; 0xdd8 <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
     bfc:	88 8a       	std	Y+16, r8	; 0x10
     bfe:	99 8a       	std	Y+17, r9	; 0x11
     c00:	aa 8a       	std	Y+18, r10	; 0x12
     c02:	bb 8a       	std	Y+19, r11	; 0x13
    S->state[0] = in;
     c04:	cc 86       	std	Y+12, r12	; 0x0c
     c06:	dd 86       	std	Y+13, r13	; 0x0d
     c08:	ee 86       	std	Y+14, r14	; 0x0e
     c0a:	ff 86       	std	Y+15, r15	; 0x0f
    S->state[2] = out;
     c0c:	6c 8b       	std	Y+20, r22	; 0x14
     c0e:	7d 8b       	std	Y+21, r23	; 0x15
     c10:	8e 8b       	std	Y+22, r24	; 0x16
     c12:	9f 8b       	std	Y+23, r25	; 0x17

    /* return to application */
    return (out);
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	08 95       	ret

00000c32 <arm_pid_init_f32>:

void arm_pid_init_f32(arm_pid_instance_f32 *S, int32_t resetStateFlag)
{
     c32:	4f 92       	push	r4
     c34:	5f 92       	push	r5
     c36:	6f 92       	push	r6
     c38:	7f 92       	push	r7
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	4a 01       	movw	r8, r20
     c52:	5b 01       	movw	r10, r22
    /* Derived coefficient A0 */
    S->A0 = S->Kp + S->Ki + S->Kd;
     c54:	48 8c       	ldd	r4, Y+24	; 0x18
     c56:	59 8c       	ldd	r5, Y+25	; 0x19
     c58:	6a 8c       	ldd	r6, Y+26	; 0x1a
     c5a:	7b 8c       	ldd	r7, Y+27	; 0x1b
     c5c:	c8 a0       	ldd	r12, Y+32	; 0x20
     c5e:	d9 a0       	ldd	r13, Y+33	; 0x21
     c60:	ea a0       	ldd	r14, Y+34	; 0x22
     c62:	fb a0       	ldd	r15, Y+35	; 0x23
     c64:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c66:	3d 8d       	ldd	r19, Y+29	; 0x1d
     c68:	4e 8d       	ldd	r20, Y+30	; 0x1e
     c6a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     c6c:	c3 01       	movw	r24, r6
     c6e:	b2 01       	movw	r22, r4
     c70:	b3 d0       	rcall	.+358    	; 0xdd8 <__addsf3>
     c72:	a7 01       	movw	r20, r14
     c74:	96 01       	movw	r18, r12
     c76:	b0 d0       	rcall	.+352    	; 0xdd8 <__addsf3>
     c78:	68 83       	st	Y, r22
     c7a:	79 83       	std	Y+1, r23	; 0x01
     c7c:	8a 83       	std	Y+2, r24	; 0x02
     c7e:	9b 83       	std	Y+3, r25	; 0x03

    /* Derived coefficient A1 */
    S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
     c80:	a7 01       	movw	r20, r14
     c82:	96 01       	movw	r18, r12
     c84:	c7 01       	movw	r24, r14
     c86:	b6 01       	movw	r22, r12
     c88:	a7 d0       	rcall	.+334    	; 0xdd8 <__addsf3>
     c8a:	a3 01       	movw	r20, r6
     c8c:	92 01       	movw	r18, r4
     c8e:	a4 d0       	rcall	.+328    	; 0xdd8 <__addsf3>
     c90:	90 58       	subi	r25, 0x80	; 128
     c92:	6c 83       	std	Y+4, r22	; 0x04
     c94:	7d 83       	std	Y+5, r23	; 0x05
     c96:	8e 83       	std	Y+6, r24	; 0x06
     c98:	9f 83       	std	Y+7, r25	; 0x07

    /* Derived coefficient A2 */
    S->A2 = S->Kd;
     c9a:	c8 86       	std	Y+8, r12	; 0x08
     c9c:	d9 86       	std	Y+9, r13	; 0x09
     c9e:	ea 86       	std	Y+10, r14	; 0x0a
     ca0:	fb 86       	std	Y+11, r15	; 0x0b

    /* Check whether state needs reset or not */
    if (resetStateFlag)
     ca2:	89 28       	or	r8, r9
     ca4:	8a 28       	or	r8, r10
     ca6:	8b 28       	or	r8, r11
     ca8:	31 f0       	breq	.+12     	; 0xcb6 <arm_pid_init_f32+0x84>
}

void arm_pid_reset_f32(arm_pid_instance_f32 *S)
{
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
     caa:	2c 96       	adiw	r28, 0x0c	; 12
     cac:	8c e0       	ldi	r24, 0x0C	; 12
     cae:	fe 01       	movw	r30, r28
     cb0:	11 92       	st	Z+, r1
     cb2:	8a 95       	dec	r24
     cb4:	e9 f7       	brne	.-6      	; 0xcb0 <arm_pid_init_f32+0x7e>
    S->A2 = S->Kd;

    /* Check whether state needs reset or not */
    if (resetStateFlag)
        arm_pid_reset_f32(S);
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	9f 90       	pop	r9
     cc8:	8f 90       	pop	r8
     cca:	7f 90       	pop	r7
     ccc:	6f 90       	pop	r6
     cce:	5f 90       	pop	r5
     cd0:	4f 90       	pop	r4
     cd2:	08 95       	ret

00000cd4 <RTC_BCDtoDEC>:
#include "RTC.h"

uint8_t RTC_BCDtoDEC(uint8_t c)
{
    uint8_t ch = ((c >> 4) * 10 + (0b00001111 & c));
     cd4:	28 2f       	mov	r18, r24
     cd6:	22 95       	swap	r18
     cd8:	2f 70       	andi	r18, 0x0F	; 15
     cda:	92 2f       	mov	r25, r18
     cdc:	99 0f       	add	r25, r25
     cde:	99 0f       	add	r25, r25
     ce0:	92 0f       	add	r25, r18
     ce2:	99 0f       	add	r25, r25
     ce4:	8f 70       	andi	r24, 0x0F	; 15

    return ch;
}
     ce6:	89 0f       	add	r24, r25
     ce8:	08 95       	ret

00000cea <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t c)
{
    uint8_t ch = ((c / 10) << 4) | (c % 10);
     cea:	6a e0       	ldi	r22, 0x0A	; 10
     cec:	32 d0       	rcall	.+100    	; 0xd52 <__udivmodqi4>
     cee:	82 95       	swap	r24
     cf0:	80 7f       	andi	r24, 0xF0	; 240

    return ch;
     cf2:	89 2b       	or	r24, r25
     cf4:	08 95       	ret

00000cf6 <I2C_Init>:
{
    I2C_StartCondition();
    I2C_SendByte(addr);
    I2C_SendByte(c);
    I2C_StopCondition();
}
     cf6:	88 e4       	ldi	r24, 0x48	; 72
     cf8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     cfc:	08 95       	ret

00000cfe <I2C_StartCondition>:
     cfe:	84 ea       	ldi	r24, 0xA4	; 164
     d00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d04:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d08:	87 ff       	sbrs	r24, 7
     d0a:	fc cf       	rjmp	.-8      	; 0xd04 <I2C_StartCondition+0x6>
     d0c:	08 95       	ret

00000d0e <I2C_StopCondition>:
     d0e:	84 e9       	ldi	r24, 0x94	; 148
     d10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d14:	08 95       	ret

00000d16 <I2C_SendByte>:
     d16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     d1a:	84 e8       	ldi	r24, 0x84	; 132
     d1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d20:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d24:	87 ff       	sbrs	r24, 7
     d26:	fc cf       	rjmp	.-8      	; 0xd20 <I2C_SendByte+0xa>
     d28:	08 95       	ret

00000d2a <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d2a:	84 ec       	ldi	r24, 0xC4	; 196
     d2c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     d30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d34:	87 ff       	sbrs	r24, 7
     d36:	fc cf       	rjmp	.-8      	; 0xd30 <I2C_ReadByte+0x6>

    return TWDR;
     d38:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
     d3c:	08 95       	ret

00000d3e <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
     d3e:	84 e8       	ldi	r24, 0x84	; 132
     d40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     d44:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d48:	87 ff       	sbrs	r24, 7
     d4a:	fc cf       	rjmp	.-8      	; 0xd44 <I2C_ReadLastByte+0x6>

    return TWDR;
     d4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     d50:	08 95       	ret

00000d52 <__udivmodqi4>:
     d52:	99 1b       	sub	r25, r25
     d54:	79 e0       	ldi	r23, 0x09	; 9
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <__udivmodqi4_ep>

00000d58 <__udivmodqi4_loop>:
     d58:	99 1f       	adc	r25, r25
     d5a:	96 17       	cp	r25, r22
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <__udivmodqi4_ep>
     d5e:	96 1b       	sub	r25, r22

00000d60 <__udivmodqi4_ep>:
     d60:	88 1f       	adc	r24, r24
     d62:	7a 95       	dec	r23
     d64:	c9 f7       	brne	.-14     	; 0xd58 <__udivmodqi4_loop>
     d66:	80 95       	com	r24
     d68:	08 95       	ret

00000d6a <__udivmodhi4>:
     d6a:	aa 1b       	sub	r26, r26
     d6c:	bb 1b       	sub	r27, r27
     d6e:	51 e1       	ldi	r21, 0x11	; 17
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <__udivmodhi4_ep>

00000d72 <__udivmodhi4_loop>:
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	a6 17       	cp	r26, r22
     d78:	b7 07       	cpc	r27, r23
     d7a:	10 f0       	brcs	.+4      	; 0xd80 <__udivmodhi4_ep>
     d7c:	a6 1b       	sub	r26, r22
     d7e:	b7 0b       	sbc	r27, r23

00000d80 <__udivmodhi4_ep>:
     d80:	88 1f       	adc	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	5a 95       	dec	r21
     d86:	a9 f7       	brne	.-22     	; 0xd72 <__udivmodhi4_loop>
     d88:	80 95       	com	r24
     d8a:	90 95       	com	r25
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	08 95       	ret

00000d92 <__udivmodsi4>:
     d92:	a1 e2       	ldi	r26, 0x21	; 33
     d94:	1a 2e       	mov	r1, r26
     d96:	aa 1b       	sub	r26, r26
     d98:	bb 1b       	sub	r27, r27
     d9a:	fd 01       	movw	r30, r26
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__udivmodsi4_ep>

00000d9e <__udivmodsi4_loop>:
     d9e:	aa 1f       	adc	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	ee 1f       	adc	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	a2 17       	cp	r26, r18
     da8:	b3 07       	cpc	r27, r19
     daa:	e4 07       	cpc	r30, r20
     dac:	f5 07       	cpc	r31, r21
     dae:	20 f0       	brcs	.+8      	; 0xdb8 <__udivmodsi4_ep>
     db0:	a2 1b       	sub	r26, r18
     db2:	b3 0b       	sbc	r27, r19
     db4:	e4 0b       	sbc	r30, r20
     db6:	f5 0b       	sbc	r31, r21

00000db8 <__udivmodsi4_ep>:
     db8:	66 1f       	adc	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	1a 94       	dec	r1
     dc2:	69 f7       	brne	.-38     	; 0xd9e <__udivmodsi4_loop>
     dc4:	60 95       	com	r22
     dc6:	70 95       	com	r23
     dc8:	80 95       	com	r24
     dca:	90 95       	com	r25
     dcc:	9b 01       	movw	r18, r22
     dce:	ac 01       	movw	r20, r24
     dd0:	bd 01       	movw	r22, r26
     dd2:	cf 01       	movw	r24, r30
     dd4:	08 95       	ret

00000dd6 <__subsf3>:
     dd6:	50 58       	subi	r21, 0x80	; 128

00000dd8 <__addsf3>:
     dd8:	bb 27       	eor	r27, r27
     dda:	aa 27       	eor	r26, r26
     ddc:	0e d0       	rcall	.+28     	; 0xdfa <__addsf3x>
     dde:	08 c1       	rjmp	.+528    	; 0xff0 <__fp_round>
     de0:	f9 d0       	rcall	.+498    	; 0xfd4 <__fp_pscA>
     de2:	30 f0       	brcs	.+12     	; 0xdf0 <__addsf3+0x18>
     de4:	fe d0       	rcall	.+508    	; 0xfe2 <__fp_pscB>
     de6:	20 f0       	brcs	.+8      	; 0xdf0 <__addsf3+0x18>
     de8:	31 f4       	brne	.+12     	; 0xdf6 <__addsf3+0x1e>
     dea:	9f 3f       	cpi	r25, 0xFF	; 255
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__addsf3+0x1a>
     dee:	1e f4       	brtc	.+6      	; 0xdf6 <__addsf3+0x1e>
     df0:	ee c0       	rjmp	.+476    	; 0xfce <__fp_nan>
     df2:	0e f4       	brtc	.+2      	; 0xdf6 <__addsf3+0x1e>
     df4:	e0 95       	com	r30
     df6:	e7 fb       	bst	r30, 7
     df8:	e4 c0       	rjmp	.+456    	; 0xfc2 <__fp_inf>

00000dfa <__addsf3x>:
     dfa:	e9 2f       	mov	r30, r25
     dfc:	0a d1       	rcall	.+532    	; 0x1012 <__fp_split3>
     dfe:	80 f3       	brcs	.-32     	; 0xde0 <__addsf3+0x8>
     e00:	ba 17       	cp	r27, r26
     e02:	62 07       	cpc	r22, r18
     e04:	73 07       	cpc	r23, r19
     e06:	84 07       	cpc	r24, r20
     e08:	95 07       	cpc	r25, r21
     e0a:	18 f0       	brcs	.+6      	; 0xe12 <__addsf3x+0x18>
     e0c:	71 f4       	brne	.+28     	; 0xe2a <__addsf3x+0x30>
     e0e:	9e f5       	brtc	.+102    	; 0xe76 <__addsf3x+0x7c>
     e10:	22 c1       	rjmp	.+580    	; 0x1056 <__fp_zero>
     e12:	0e f4       	brtc	.+2      	; 0xe16 <__addsf3x+0x1c>
     e14:	e0 95       	com	r30
     e16:	0b 2e       	mov	r0, r27
     e18:	ba 2f       	mov	r27, r26
     e1a:	a0 2d       	mov	r26, r0
     e1c:	0b 01       	movw	r0, r22
     e1e:	b9 01       	movw	r22, r18
     e20:	90 01       	movw	r18, r0
     e22:	0c 01       	movw	r0, r24
     e24:	ca 01       	movw	r24, r20
     e26:	a0 01       	movw	r20, r0
     e28:	11 24       	eor	r1, r1
     e2a:	ff 27       	eor	r31, r31
     e2c:	59 1b       	sub	r21, r25
     e2e:	99 f0       	breq	.+38     	; 0xe56 <__addsf3x+0x5c>
     e30:	59 3f       	cpi	r21, 0xF9	; 249
     e32:	50 f4       	brcc	.+20     	; 0xe48 <__addsf3x+0x4e>
     e34:	50 3e       	cpi	r21, 0xE0	; 224
     e36:	68 f1       	brcs	.+90     	; 0xe92 <__addsf3x+0x98>
     e38:	1a 16       	cp	r1, r26
     e3a:	f0 40       	sbci	r31, 0x00	; 0
     e3c:	a2 2f       	mov	r26, r18
     e3e:	23 2f       	mov	r18, r19
     e40:	34 2f       	mov	r19, r20
     e42:	44 27       	eor	r20, r20
     e44:	58 5f       	subi	r21, 0xF8	; 248
     e46:	f3 cf       	rjmp	.-26     	; 0xe2e <__addsf3x+0x34>
     e48:	46 95       	lsr	r20
     e4a:	37 95       	ror	r19
     e4c:	27 95       	ror	r18
     e4e:	a7 95       	ror	r26
     e50:	f0 40       	sbci	r31, 0x00	; 0
     e52:	53 95       	inc	r21
     e54:	c9 f7       	brne	.-14     	; 0xe48 <__addsf3x+0x4e>
     e56:	7e f4       	brtc	.+30     	; 0xe76 <__addsf3x+0x7c>
     e58:	1f 16       	cp	r1, r31
     e5a:	ba 0b       	sbc	r27, r26
     e5c:	62 0b       	sbc	r22, r18
     e5e:	73 0b       	sbc	r23, r19
     e60:	84 0b       	sbc	r24, r20
     e62:	ba f0       	brmi	.+46     	; 0xe92 <__addsf3x+0x98>
     e64:	91 50       	subi	r25, 0x01	; 1
     e66:	a1 f0       	breq	.+40     	; 0xe90 <__addsf3x+0x96>
     e68:	ff 0f       	add	r31, r31
     e6a:	bb 1f       	adc	r27, r27
     e6c:	66 1f       	adc	r22, r22
     e6e:	77 1f       	adc	r23, r23
     e70:	88 1f       	adc	r24, r24
     e72:	c2 f7       	brpl	.-16     	; 0xe64 <__addsf3x+0x6a>
     e74:	0e c0       	rjmp	.+28     	; 0xe92 <__addsf3x+0x98>
     e76:	ba 0f       	add	r27, r26
     e78:	62 1f       	adc	r22, r18
     e7a:	73 1f       	adc	r23, r19
     e7c:	84 1f       	adc	r24, r20
     e7e:	48 f4       	brcc	.+18     	; 0xe92 <__addsf3x+0x98>
     e80:	87 95       	ror	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b7 95       	ror	r27
     e88:	f7 95       	ror	r31
     e8a:	9e 3f       	cpi	r25, 0xFE	; 254
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__addsf3x+0x96>
     e8e:	b3 cf       	rjmp	.-154    	; 0xdf6 <__addsf3+0x1e>
     e90:	93 95       	inc	r25
     e92:	88 0f       	add	r24, r24
     e94:	08 f0       	brcs	.+2      	; 0xe98 <__addsf3x+0x9e>
     e96:	99 27       	eor	r25, r25
     e98:	ee 0f       	add	r30, r30
     e9a:	97 95       	ror	r25
     e9c:	87 95       	ror	r24
     e9e:	08 95       	ret

00000ea0 <__cmpsf2>:
     ea0:	6c d0       	rcall	.+216    	; 0xf7a <__fp_cmp>
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__cmpsf2+0x6>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	08 95       	ret

00000ea8 <__fixunssfsi>:
     ea8:	bc d0       	rcall	.+376    	; 0x1022 <__fp_splitA>
     eaa:	88 f0       	brcs	.+34     	; 0xece <__fixunssfsi+0x26>
     eac:	9f 57       	subi	r25, 0x7F	; 127
     eae:	90 f0       	brcs	.+36     	; 0xed4 <__fixunssfsi+0x2c>
     eb0:	b9 2f       	mov	r27, r25
     eb2:	99 27       	eor	r25, r25
     eb4:	b7 51       	subi	r27, 0x17	; 23
     eb6:	a0 f0       	brcs	.+40     	; 0xee0 <__fixunssfsi+0x38>
     eb8:	d1 f0       	breq	.+52     	; 0xeee <__fixunssfsi+0x46>
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	88 1f       	adc	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	1a f0       	brmi	.+6      	; 0xeca <__fixunssfsi+0x22>
     ec4:	ba 95       	dec	r27
     ec6:	c9 f7       	brne	.-14     	; 0xeba <__fixunssfsi+0x12>
     ec8:	12 c0       	rjmp	.+36     	; 0xeee <__fixunssfsi+0x46>
     eca:	b1 30       	cpi	r27, 0x01	; 1
     ecc:	81 f0       	breq	.+32     	; 0xeee <__fixunssfsi+0x46>
     ece:	c3 d0       	rcall	.+390    	; 0x1056 <__fp_zero>
     ed0:	b1 e0       	ldi	r27, 0x01	; 1
     ed2:	08 95       	ret
     ed4:	c0 c0       	rjmp	.+384    	; 0x1056 <__fp_zero>
     ed6:	67 2f       	mov	r22, r23
     ed8:	78 2f       	mov	r23, r24
     eda:	88 27       	eor	r24, r24
     edc:	b8 5f       	subi	r27, 0xF8	; 248
     ede:	39 f0       	breq	.+14     	; 0xeee <__fixunssfsi+0x46>
     ee0:	b9 3f       	cpi	r27, 0xF9	; 249
     ee2:	cc f3       	brlt	.-14     	; 0xed6 <__fixunssfsi+0x2e>
     ee4:	86 95       	lsr	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b3 95       	inc	r27
     eec:	d9 f7       	brne	.-10     	; 0xee4 <__fixunssfsi+0x3c>
     eee:	3e f4       	brtc	.+14     	; 0xefe <__fixunssfsi+0x56>
     ef0:	90 95       	com	r25
     ef2:	80 95       	com	r24
     ef4:	70 95       	com	r23
     ef6:	61 95       	neg	r22
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	08 95       	ret

00000f00 <__floatunsisf>:
     f00:	e8 94       	clt
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <__floatsisf+0x12>

00000f04 <__floatsisf>:
     f04:	97 fb       	bst	r25, 7
     f06:	3e f4       	brtc	.+14     	; 0xf16 <__floatsisf+0x12>
     f08:	90 95       	com	r25
     f0a:	80 95       	com	r24
     f0c:	70 95       	com	r23
     f0e:	61 95       	neg	r22
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	8f 4f       	sbci	r24, 0xFF	; 255
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	99 23       	and	r25, r25
     f18:	a9 f0       	breq	.+42     	; 0xf44 <__floatsisf+0x40>
     f1a:	f9 2f       	mov	r31, r25
     f1c:	96 e9       	ldi	r25, 0x96	; 150
     f1e:	bb 27       	eor	r27, r27
     f20:	93 95       	inc	r25
     f22:	f6 95       	lsr	r31
     f24:	87 95       	ror	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f1 11       	cpse	r31, r1
     f2e:	f8 cf       	rjmp	.-16     	; 0xf20 <__floatsisf+0x1c>
     f30:	fa f4       	brpl	.+62     	; 0xf70 <__floatsisf+0x6c>
     f32:	bb 0f       	add	r27, r27
     f34:	11 f4       	brne	.+4      	; 0xf3a <__floatsisf+0x36>
     f36:	60 ff       	sbrs	r22, 0
     f38:	1b c0       	rjmp	.+54     	; 0xf70 <__floatsisf+0x6c>
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <__floatsisf+0x6c>
     f44:	88 23       	and	r24, r24
     f46:	11 f0       	breq	.+4      	; 0xf4c <__floatsisf+0x48>
     f48:	96 e9       	ldi	r25, 0x96	; 150
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <__floatsisf+0x6a>
     f4c:	77 23       	and	r23, r23
     f4e:	21 f0       	breq	.+8      	; 0xf58 <__floatsisf+0x54>
     f50:	9e e8       	ldi	r25, 0x8E	; 142
     f52:	87 2f       	mov	r24, r23
     f54:	76 2f       	mov	r23, r22
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <__floatsisf+0x5e>
     f58:	66 23       	and	r22, r22
     f5a:	71 f0       	breq	.+28     	; 0xf78 <__floatsisf+0x74>
     f5c:	96 e8       	ldi	r25, 0x86	; 134
     f5e:	86 2f       	mov	r24, r22
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	2a f0       	brmi	.+10     	; 0xf70 <__floatsisf+0x6c>
     f66:	9a 95       	dec	r25
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	da f7       	brpl	.-10     	; 0xf66 <__floatsisf+0x62>
     f70:	88 0f       	add	r24, r24
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	97 f9       	bld	r25, 7
     f78:	08 95       	ret

00000f7a <__fp_cmp>:
     f7a:	99 0f       	add	r25, r25
     f7c:	00 08       	sbc	r0, r0
     f7e:	55 0f       	add	r21, r21
     f80:	aa 0b       	sbc	r26, r26
     f82:	e0 e8       	ldi	r30, 0x80	; 128
     f84:	fe ef       	ldi	r31, 0xFE	; 254
     f86:	16 16       	cp	r1, r22
     f88:	17 06       	cpc	r1, r23
     f8a:	e8 07       	cpc	r30, r24
     f8c:	f9 07       	cpc	r31, r25
     f8e:	c0 f0       	brcs	.+48     	; 0xfc0 <__fp_cmp+0x46>
     f90:	12 16       	cp	r1, r18
     f92:	13 06       	cpc	r1, r19
     f94:	e4 07       	cpc	r30, r20
     f96:	f5 07       	cpc	r31, r21
     f98:	98 f0       	brcs	.+38     	; 0xfc0 <__fp_cmp+0x46>
     f9a:	62 1b       	sub	r22, r18
     f9c:	73 0b       	sbc	r23, r19
     f9e:	84 0b       	sbc	r24, r20
     fa0:	95 0b       	sbc	r25, r21
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <__fp_cmp+0x38>
     fa4:	0a 26       	eor	r0, r26
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <__fp_cmp+0x46>
     fa8:	23 2b       	or	r18, r19
     faa:	24 2b       	or	r18, r20
     fac:	25 2b       	or	r18, r21
     fae:	21 f4       	brne	.+8      	; 0xfb8 <__fp_cmp+0x3e>
     fb0:	08 95       	ret
     fb2:	0a 26       	eor	r0, r26
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <__fp_cmp+0x3e>
     fb6:	a1 40       	sbci	r26, 0x01	; 1
     fb8:	a6 95       	lsr	r26
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	81 1d       	adc	r24, r1
     fbe:	81 1d       	adc	r24, r1
     fc0:	08 95       	ret

00000fc2 <__fp_inf>:
     fc2:	97 f9       	bld	r25, 7
     fc4:	9f 67       	ori	r25, 0x7F	; 127
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	08 95       	ret

00000fce <__fp_nan>:
     fce:	9f ef       	ldi	r25, 0xFF	; 255
     fd0:	80 ec       	ldi	r24, 0xC0	; 192
     fd2:	08 95       	ret

00000fd4 <__fp_pscA>:
     fd4:	00 24       	eor	r0, r0
     fd6:	0a 94       	dec	r0
     fd8:	16 16       	cp	r1, r22
     fda:	17 06       	cpc	r1, r23
     fdc:	18 06       	cpc	r1, r24
     fde:	09 06       	cpc	r0, r25
     fe0:	08 95       	ret

00000fe2 <__fp_pscB>:
     fe2:	00 24       	eor	r0, r0
     fe4:	0a 94       	dec	r0
     fe6:	12 16       	cp	r1, r18
     fe8:	13 06       	cpc	r1, r19
     fea:	14 06       	cpc	r1, r20
     fec:	05 06       	cpc	r0, r21
     fee:	08 95       	ret

00000ff0 <__fp_round>:
     ff0:	09 2e       	mov	r0, r25
     ff2:	03 94       	inc	r0
     ff4:	00 0c       	add	r0, r0
     ff6:	11 f4       	brne	.+4      	; 0xffc <__fp_round+0xc>
     ff8:	88 23       	and	r24, r24
     ffa:	52 f0       	brmi	.+20     	; 0x1010 <__fp_round+0x20>
     ffc:	bb 0f       	add	r27, r27
     ffe:	40 f4       	brcc	.+16     	; 0x1010 <__fp_round+0x20>
    1000:	bf 2b       	or	r27, r31
    1002:	11 f4       	brne	.+4      	; 0x1008 <__fp_round+0x18>
    1004:	60 ff       	sbrs	r22, 0
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <__fp_round+0x20>
    1008:	6f 5f       	subi	r22, 0xFF	; 255
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	8f 4f       	sbci	r24, 0xFF	; 255
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	08 95       	ret

00001012 <__fp_split3>:
    1012:	57 fd       	sbrc	r21, 7
    1014:	90 58       	subi	r25, 0x80	; 128
    1016:	44 0f       	add	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	59 f0       	breq	.+22     	; 0x1032 <__fp_splitA+0x10>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	71 f0       	breq	.+28     	; 0x103c <__fp_splitA+0x1a>
    1020:	47 95       	ror	r20

00001022 <__fp_splitA>:
    1022:	88 0f       	add	r24, r24
    1024:	97 fb       	bst	r25, 7
    1026:	99 1f       	adc	r25, r25
    1028:	61 f0       	breq	.+24     	; 0x1042 <__fp_splitA+0x20>
    102a:	9f 3f       	cpi	r25, 0xFF	; 255
    102c:	79 f0       	breq	.+30     	; 0x104c <__fp_splitA+0x2a>
    102e:	87 95       	ror	r24
    1030:	08 95       	ret
    1032:	12 16       	cp	r1, r18
    1034:	13 06       	cpc	r1, r19
    1036:	14 06       	cpc	r1, r20
    1038:	55 1f       	adc	r21, r21
    103a:	f2 cf       	rjmp	.-28     	; 0x1020 <__fp_split3+0xe>
    103c:	46 95       	lsr	r20
    103e:	f1 df       	rcall	.-30     	; 0x1022 <__fp_splitA>
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <__fp_splitA+0x30>
    1042:	16 16       	cp	r1, r22
    1044:	17 06       	cpc	r1, r23
    1046:	18 06       	cpc	r1, r24
    1048:	99 1f       	adc	r25, r25
    104a:	f1 cf       	rjmp	.-30     	; 0x102e <__fp_splitA+0xc>
    104c:	86 95       	lsr	r24
    104e:	71 05       	cpc	r23, r1
    1050:	61 05       	cpc	r22, r1
    1052:	08 94       	sec
    1054:	08 95       	ret

00001056 <__fp_zero>:
    1056:	e8 94       	clt

00001058 <__fp_szero>:
    1058:	bb 27       	eor	r27, r27
    105a:	66 27       	eor	r22, r22
    105c:	77 27       	eor	r23, r23
    105e:	cb 01       	movw	r24, r22
    1060:	97 f9       	bld	r25, 7
    1062:	08 95       	ret

00001064 <__gesf2>:
    1064:	8a df       	rcall	.-236    	; 0xf7a <__fp_cmp>
    1066:	08 f4       	brcc	.+2      	; 0x106a <__gesf2+0x6>
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__mulsf3>:
    106c:	0a d0       	rcall	.+20     	; 0x1082 <__mulsf3x>
    106e:	c0 cf       	rjmp	.-128    	; 0xff0 <__fp_round>
    1070:	b1 df       	rcall	.-158    	; 0xfd4 <__fp_pscA>
    1072:	28 f0       	brcs	.+10     	; 0x107e <__mulsf3+0x12>
    1074:	b6 df       	rcall	.-148    	; 0xfe2 <__fp_pscB>
    1076:	18 f0       	brcs	.+6      	; 0x107e <__mulsf3+0x12>
    1078:	95 23       	and	r25, r21
    107a:	09 f0       	breq	.+2      	; 0x107e <__mulsf3+0x12>
    107c:	a2 cf       	rjmp	.-188    	; 0xfc2 <__fp_inf>
    107e:	a7 cf       	rjmp	.-178    	; 0xfce <__fp_nan>
    1080:	eb cf       	rjmp	.-42     	; 0x1058 <__fp_szero>

00001082 <__mulsf3x>:
    1082:	c7 df       	rcall	.-114    	; 0x1012 <__fp_split3>
    1084:	a8 f3       	brcs	.-22     	; 0x1070 <__mulsf3+0x4>

00001086 <__mulsf3_pse>:
    1086:	99 23       	and	r25, r25
    1088:	d9 f3       	breq	.-10     	; 0x1080 <__mulsf3+0x14>
    108a:	55 23       	and	r21, r21
    108c:	c9 f3       	breq	.-14     	; 0x1080 <__mulsf3+0x14>
    108e:	95 0f       	add	r25, r21
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	55 1f       	adc	r21, r21
    1094:	aa 27       	eor	r26, r26
    1096:	ee 27       	eor	r30, r30
    1098:	ff 27       	eor	r31, r31
    109a:	bb 27       	eor	r27, r27
    109c:	00 24       	eor	r0, r0
    109e:	08 94       	sec
    10a0:	67 95       	ror	r22
    10a2:	20 f4       	brcc	.+8      	; 0x10ac <__mulsf3_pse+0x26>
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	b4 1f       	adc	r27, r20
    10aa:	0a 1e       	adc	r0, r26
    10ac:	22 0f       	add	r18, r18
    10ae:	33 1f       	adc	r19, r19
    10b0:	44 1f       	adc	r20, r20
    10b2:	aa 1f       	adc	r26, r26
    10b4:	66 95       	lsr	r22
    10b6:	a9 f7       	brne	.-22     	; 0x10a2 <__mulsf3_pse+0x1c>
    10b8:	77 95       	ror	r23
    10ba:	30 f4       	brcc	.+12     	; 0x10c8 <__mulsf3_pse+0x42>
    10bc:	f3 0f       	add	r31, r19
    10be:	b4 1f       	adc	r27, r20
    10c0:	0a 1e       	adc	r0, r26
    10c2:	12 1e       	adc	r1, r18
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <__mulsf3_pse+0x42>
    10c6:	63 95       	inc	r22
    10c8:	33 0f       	add	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	aa 1f       	adc	r26, r26
    10ce:	22 1f       	adc	r18, r18
    10d0:	76 95       	lsr	r23
    10d2:	99 f7       	brne	.-26     	; 0x10ba <__mulsf3_pse+0x34>
    10d4:	87 95       	ror	r24
    10d6:	20 f4       	brcc	.+8      	; 0x10e0 <__mulsf3_pse+0x5a>
    10d8:	b4 0f       	add	r27, r20
    10da:	0a 1e       	adc	r0, r26
    10dc:	12 1e       	adc	r1, r18
    10de:	63 1f       	adc	r22, r19
    10e0:	44 0f       	add	r20, r20
    10e2:	aa 1f       	adc	r26, r26
    10e4:	22 1f       	adc	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	86 95       	lsr	r24
    10ea:	a9 f7       	brne	.-22     	; 0x10d6 <__mulsf3_pse+0x50>
    10ec:	86 2f       	mov	r24, r22
    10ee:	71 2d       	mov	r23, r1
    10f0:	60 2d       	mov	r22, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	9f 57       	subi	r25, 0x7F	; 127
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	8a f0       	brmi	.+34     	; 0x111c <__mulsf3_pse+0x96>
    10fa:	e1 f0       	breq	.+56     	; 0x1134 <__mulsf3_pse+0xae>
    10fc:	88 23       	and	r24, r24
    10fe:	4a f0       	brmi	.+18     	; 0x1112 <__mulsf3_pse+0x8c>
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	bb 1f       	adc	r27, r27
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	50 40       	sbci	r21, 0x00	; 0
    1110:	a9 f7       	brne	.-22     	; 0x10fc <__mulsf3_pse+0x76>
    1112:	9e 3f       	cpi	r25, 0xFE	; 254
    1114:	51 05       	cpc	r21, r1
    1116:	70 f0       	brcs	.+28     	; 0x1134 <__mulsf3_pse+0xae>
    1118:	54 cf       	rjmp	.-344    	; 0xfc2 <__fp_inf>
    111a:	9e cf       	rjmp	.-196    	; 0x1058 <__fp_szero>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	ec f3       	brlt	.-6      	; 0x111a <__mulsf3_pse+0x94>
    1120:	98 3e       	cpi	r25, 0xE8	; 232
    1122:	dc f3       	brlt	.-10     	; 0x111a <__mulsf3_pse+0x94>
    1124:	86 95       	lsr	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b7 95       	ror	r27
    112c:	f7 95       	ror	r31
    112e:	e7 95       	ror	r30
    1130:	9f 5f       	subi	r25, 0xFF	; 255
    1132:	c1 f7       	brne	.-16     	; 0x1124 <__mulsf3_pse+0x9e>
    1134:	fe 2b       	or	r31, r30
    1136:	88 0f       	add	r24, r24
    1138:	91 1d       	adc	r25, r1
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	97 f9       	bld	r25, 7
    1140:	08 95       	ret

00001142 <_exit>:
    1142:	f8 94       	cli

00001144 <__stop_program>:
    1144:	ff cf       	rjmp	.-2      	; 0x1144 <__stop_program>
