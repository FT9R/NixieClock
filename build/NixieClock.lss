
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800100  00800100  00001252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a3c  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b84  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072d  00000000  00000000  00004ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000787  00000000  00000000  000051f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000597c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
       4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
       6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
       8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
       a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
       c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
       e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
      10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
      12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
      14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
      16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
      18:	d9 c0       	rjmp	.+434    	; 0x1cc <__vector_12>
      1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
      1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
      1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
      20:	91 c1       	rjmp	.+802    	; 0x344 <__vector_16>
      22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
      24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
      26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf ef       	ldi	r28, 0xFF	; 255
      2e:	d2 e0       	ldi	r29, 0x02	; 2
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
      34:	21 e0       	ldi	r18, 0x01	; 1
      36:	a0 e0       	ldi	r26, 0x00	; 0
      38:	b1 e0       	ldi	r27, 0x01	; 1
      3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
      3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
      3e:	a0 36       	cpi	r26, 0x60	; 96
      40:	b2 07       	cpc	r27, r18
      42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
      44:	fe d1       	rcall	.+1020   	; 0x442 <main>
      46:	c9 c8       	rjmp	.-3694   	; 0xfffff1da <__eeprom_end+0xff7ef1da>

00000048 <__bad_interrupt>:
      48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <AnodeSwitch>:
#include "indication.h"

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
      4a:	9f ef       	ldi	r25, 0xFF	; 255
      4c:	98 0f       	add	r25, r24
      4e:	96 30       	cpi	r25, 0x06	; 6
      50:	38 f4       	brcc	.+14     	; 0x60 <AnodeSwitch+0x16>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
      52:	9b b1       	in	r25, 0x0b	; 11
      54:	9f 71       	andi	r25, 0x1F	; 31
      56:	82 95       	swap	r24
      58:	88 0f       	add	r24, r24
      5a:	80 7e       	andi	r24, 0xE0	; 224
      5c:	89 2b       	or	r24, r25
      5e:	8b b9       	out	0x0b, r24	; 11
}
      60:	08 95       	ret

00000062 <CathodeSwitch>:

void CathodeSwitch(uint8_t cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
      62:	8a 30       	cpi	r24, 0x0A	; 10
      64:	28 f4       	brcc	.+10     	; 0x70 <CathodeSwitch+0xe>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
      66:	9b b1       	in	r25, 0x0b	; 11
      68:	91 7e       	andi	r25, 0xE1	; 225
      6a:	88 0f       	add	r24, r24
      6c:	89 2b       	or	r24, r25
      6e:	8b b9       	out	0x0b, r24	; 11
}
      70:	08 95       	ret

00000072 <Display_DeadTime>:

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
      72:	8b b1       	in	r24, 0x0b	; 11
      74:	81 70       	andi	r24, 0x01	; 1
      76:	88 61       	ori	r24, 0x18	; 24
      78:	8b b9       	out	0x0b, r24	; 11
}
      7a:	08 95       	ret

0000007c <SoftStart>:

void SoftStart(struct Indication_s *indication, struct Voltage_s *voltage)
{
      7c:	cf 92       	push	r12
      7e:	df 92       	push	r13
      80:	ef 92       	push	r14
      82:	ff 92       	push	r15
      84:	cf 93       	push	r28
      86:	df 93       	push	r29
    if ((!indication->pause) && (!indication->isTurnedOff) && (voltage->pid.setPoint <= VOUT_TASK))
      88:	fc 01       	movw	r30, r24
      8a:	20 85       	ldd	r18, Z+8	; 0x08
      8c:	21 11       	cpse	r18, r1
      8e:	1c c0       	rjmp	.+56     	; 0xc8 <SoftStart+0x4c>
      90:	81 85       	ldd	r24, Z+9	; 0x09
      92:	81 11       	cpse	r24, r1
      94:	19 c0       	rjmp	.+50     	; 0xc8 <SoftStart+0x4c>
      96:	eb 01       	movw	r28, r22
      98:	cd a8       	ldd	r12, Y+53	; 0x35
      9a:	de a8       	ldd	r13, Y+54	; 0x36
      9c:	ef a8       	ldd	r14, Y+55	; 0x37
      9e:	f8 ac       	ldd	r15, Y+56	; 0x38
      a0:	20 e0       	ldi	r18, 0x00	; 0
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	44 e3       	ldi	r20, 0x34	; 52
      a6:	53 e4       	ldi	r21, 0x43	; 67
      a8:	c7 01       	movw	r24, r14
      aa:	b6 01       	movw	r22, r12
      ac:	45 d7       	rcall	.+3722   	; 0xf38 <__cmpsf2>
      ae:	18 16       	cp	r1, r24
      b0:	5c f0       	brlt	.+22     	; 0xc8 <SoftStart+0x4c>
        voltage->pid.setPoint += 0.01;
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	37 ed       	ldi	r19, 0xD7	; 215
      b6:	43 e2       	ldi	r20, 0x23	; 35
      b8:	5c e3       	ldi	r21, 0x3C	; 60
      ba:	c7 01       	movw	r24, r14
      bc:	b6 01       	movw	r22, r12
      be:	d8 d6       	rcall	.+3504   	; 0xe70 <__addsf3>
      c0:	6d ab       	std	Y+53, r22	; 0x35
      c2:	7e ab       	std	Y+54, r23	; 0x36
      c4:	8f ab       	std	Y+55, r24	; 0x37
      c6:	98 af       	std	Y+56, r25	; 0x38
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	ff 90       	pop	r15
      ce:	ef 90       	pop	r14
      d0:	df 90       	pop	r13
      d2:	cf 90       	pop	r12
      d4:	08 95       	ret

000000d6 <SoftTurnoff>:

void SoftTurnoff(struct Indication_s *indication, struct Voltage_s *voltage)
{
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
    if ((indication->isTurnedOff) && (voltage->pid.setPoint > 0.0))
      e2:	fc 01       	movw	r30, r24
      e4:	81 85       	ldd	r24, Z+9	; 0x09
      e6:	88 23       	and	r24, r24
      e8:	c1 f0       	breq	.+48     	; 0x11a <SoftTurnoff+0x44>
      ea:	eb 01       	movw	r28, r22
      ec:	cd a8       	ldd	r12, Y+53	; 0x35
      ee:	de a8       	ldd	r13, Y+54	; 0x36
      f0:	ef a8       	ldd	r14, Y+55	; 0x37
      f2:	f8 ac       	ldd	r15, Y+56	; 0x38
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	a9 01       	movw	r20, r18
      fa:	c7 01       	movw	r24, r14
      fc:	b6 01       	movw	r22, r12
      fe:	fe d7       	rcall	.+4092   	; 0x10fc <__gesf2>
     100:	18 16       	cp	r1, r24
     102:	5c f4       	brge	.+22     	; 0x11a <SoftTurnoff+0x44>
        voltage->pid.setPoint -= 0.005;
     104:	2a e0       	ldi	r18, 0x0A	; 10
     106:	37 ed       	ldi	r19, 0xD7	; 215
     108:	43 ea       	ldi	r20, 0xA3	; 163
     10a:	5b e3       	ldi	r21, 0x3B	; 59
     10c:	c7 01       	movw	r24, r14
     10e:	b6 01       	movw	r22, r12
     110:	ae d6       	rcall	.+3420   	; 0xe6e <__subsf3>
     112:	6d ab       	std	Y+53, r22	; 0x35
     114:	7e ab       	std	Y+54, r23	; 0x36
     116:	8f ab       	std	Y+55, r24	; 0x37
     118:	98 af       	std	Y+56, r25	; 0x38
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret

00000128 <IO_Init>:
#include "init.h"

void IO_Init(void)
{
    /* PORTA */
    MODIFY_REG(DDRA, 0xFF, (1 << 2) | (1 << 3)); // LDP and RDP
     128:	8d b1       	in	r24, 0x0d	; 13
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	8d b9       	out	0x0d, r24	; 13
    CLEAR_REG(PORTA);
     12e:	1e b8       	out	0x0e, r1	; 14
    CLEAR_BIT(DDRA, 1 << 0); // TimeRes
     130:	68 98       	cbi	0x0d, 0	; 13
    SET_BIT(PORTA, 1 << 0); // Pull up
     132:	70 9a       	sbi	0x0e, 0	; 14

    /* PORTB */
    SET_BIT(DDRB, 1 << 2); // Boost PWM
     134:	22 9a       	sbi	0x04, 2	; 4
    CLEAR_REG(PORTB);
     136:	15 b8       	out	0x05, r1	; 5

    /* PORTD */
    MODIFY_REG(DDRD, 0xFF, 0xFF);
     138:	8a b1       	in	r24, 0x0a	; 10
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	8a b9       	out	0x0a, r24	; 10
    CLEAR_REG(PORTD);
     13e:	1b b8       	out	0x0b, r1	; 11
}
     140:	08 95       	ret

00000142 <ADC_Init>:

void ADC_Init(void)
{
    MODIFY_REG(ADMUX, 0x0F, 0x00); // ADC0
     142:	ec e7       	ldi	r30, 0x7C	; 124
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	80 7f       	andi	r24, 0xF0	; 240
     14a:	80 83       	st	Z, r24
    CLEAR_BIT(ADMUX, 1 << ADLAR); // Right adjust
     14c:	80 81       	ld	r24, Z
     14e:	8f 7d       	andi	r24, 0xDF	; 223
     150:	80 83       	st	Z, r24
    CLEAR_BIT(ADMUX, 1 << REFS0); // Internal 1.1V voltage reference
     152:	80 81       	ld	r24, Z
     154:	8f 7b       	andi	r24, 0xBF	; 191
     156:	80 83       	st	Z, r24
    MODIFY_REG(ADCSRA, 0x07, (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); // 128x prescaler
     158:	ea e7       	ldi	r30, 0x7A	; 122
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	87 60       	ori	r24, 0x07	; 7
     160:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADIE); // ADC Interrupt Enable
     162:	80 81       	ld	r24, Z
     164:	88 60       	ori	r24, 0x08	; 8
     166:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADATE); // ADC Auto Trigger Enable
     168:	80 81       	ld	r24, Z
     16a:	80 62       	ori	r24, 0x20	; 32
     16c:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADEN); // ADC Enable
     16e:	80 81       	ld	r24, Z
     170:	80 68       	ori	r24, 0x80	; 128
     172:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADSC); // ADC Start Conversion
     174:	80 81       	ld	r24, Z
     176:	80 64       	ori	r24, 0x40	; 64
     178:	80 83       	st	Z, r24
}
     17a:	08 95       	ret

0000017c <TIMx_Init>:

void TIMx_Init(uint8_t timx)
{
    switch (timx)
     17c:	88 23       	and	r24, r24
     17e:	c1 f0       	breq	.+48     	; 0x1b0 <TIMx_Init+0x34>
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	a9 f4       	brne	.+42     	; 0x1ae <TIMx_Init+0x32>
        SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
        OCR0A = 173 - 1;
        break;

    case 1: // F = 31.25kHz; T = 32us
        SET_BIT(TCCR1A, 1 << WGM11); // Fast PWM, 9-bit
     184:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     188:	82 60       	ori	r24, 0x02	; 2
     18a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
        SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     18e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
        SET_BIT(TCCR1B, 1 << CS10); // clk/1
     198:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     19c:	81 60       	ori	r24, 0x01	; 1
     19e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
        SET_BIT(TCCR1B, 1 << WGM12); // Fast PWM, 9-bit
     1a2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
        break;
    }
     1ac:	08 95       	ret
     1ae:	08 95       	ret
void TIMx_Init(uint8_t timx)
{
    switch (timx)
    {
    case 0: // F = 1445Hz; T = 692us
        SET_BIT(TCCR0A, (1 << CS00) | (1 << CS01)); // clk/64
     1b0:	85 b5       	in	r24, 0x25	; 37
     1b2:	83 60       	ori	r24, 0x03	; 3
     1b4:	85 bd       	out	0x25, r24	; 37
        SET_BIT(TCCR0A, 1 << CTC0); // CTC EN
     1b6:	85 b5       	in	r24, 0x25	; 37
     1b8:	88 60       	ori	r24, 0x08	; 8
     1ba:	85 bd       	out	0x25, r24	; 37
        SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
     1bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
     1c0:	82 60       	ori	r24, 0x02	; 2
     1c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
        OCR0A = 173 - 1;
     1c6:	8c ea       	ldi	r24, 0xAC	; 172
     1c8:	87 bd       	out	0x27, r24	; 39
        break;
     1ca:	08 95       	ret

000001cc <__vector_12>:
#include "main.h"

ISR(TIMER0_COMPA_vect)
{
     1cc:	1f 92       	push	r1
     1ce:	0f 92       	push	r0
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	2f 93       	push	r18
     1d8:	3f 93       	push	r19
     1da:	4f 93       	push	r20
     1dc:	5f 93       	push	r21
     1de:	6f 93       	push	r22
     1e0:	7f 93       	push	r23
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
     1e6:	af 93       	push	r26
     1e8:	bf 93       	push	r27
     1ea:	ef 93       	push	r30
     1ec:	ff 93       	push	r31
    if (indication.pause)
     1ee:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x8>
     1f2:	81 11       	cpse	r24, r1
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__DATA_REGION_LENGTH__+0x44>
     1f6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
        return;

    switch (indication.dispMode)
     1fa:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <indication+0x7>
     1fe:	91 30       	cpi	r25, 0x01	; 1
     200:	91 f1       	breq	.+100    	; 0x266 <__DATA_REGION_LENGTH__+0x66>
     202:	08 f4       	brcc	.+2      	; 0x206 <__DATA_REGION_LENGTH__+0x6>
     204:	44 c0       	rjmp	.+136    	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
     206:	92 30       	cpi	r25, 0x02	; 2
     208:	09 f4       	brne	.+2      	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     20a:	41 c0       	rjmp	.+130    	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
            break;
        }
        break;
    }

    if (++indication.counter > 12)
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	8d 30       	cpi	r24, 0x0D	; 13
     210:	08 f0       	brcs	.+2      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
        indication.counter = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <indication+0x6>
    ++cad.counter;
     218:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cad>
     21c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <cad+0x1>
     220:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <cad+0x2>
     224:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <cad+0x3>
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	a1 1d       	adc	r26, r1
     22c:	b1 1d       	adc	r27, r1
     22e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cad>
     232:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <cad+0x1>
     236:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <cad+0x2>
     23a:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <cad+0x3>
    voltage.pid.run = true;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <voltage+0x3d>
}
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti
            break;
        }
        break;

    case DISPLAY_TEMPERATURE:
        switch (indication.counter)
     266:	ef ef       	ldi	r30, 0xFF	; 255
     268:	e8 0f       	add	r30, r24
     26a:	ec 30       	cpi	r30, 0x0C	; 12
     26c:	78 f6       	brcc	.-98     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	e5 5c       	subi	r30, 0xC5	; 197
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	09 94       	ijmp
     276:	24 c0       	rjmp	.+72     	; 0x2c0 <__DATA_REGION_LENGTH__+0xc0>
     278:	1f c0       	rjmp	.+62     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     27a:	1e c0       	rjmp	.+60     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     27c:	3a c0       	rjmp	.+116    	; 0x2f2 <__DATA_REGION_LENGTH__+0xf2>
     27e:	1c c0       	rjmp	.+56     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     280:	1b c0       	rjmp	.+54     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     282:	2e c0       	rjmp	.+92     	; 0x2e0 <__DATA_REGION_LENGTH__+0xe0>
     284:	19 c0       	rjmp	.+50     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     286:	18 c0       	rjmp	.+48     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     288:	23 c0       	rjmp	.+70     	; 0x2d0 <__DATA_REGION_LENGTH__+0xd0>
     28a:	16 c0       	rjmp	.+44     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     28c:	15 c0       	rjmp	.+42     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>

    switch (indication.dispMode)
    {
    case DISPLAY_TIME:
    case DISPLAY_CAD:
        switch (indication.counter)
     28e:	ef ef       	ldi	r30, 0xFF	; 255
     290:	e8 0f       	add	r30, r24
     292:	ec 30       	cpi	r30, 0x0C	; 12
     294:	08 f0       	brcs	.+2      	; 0x298 <__DATA_REGION_LENGTH__+0x98>
     296:	ba cf       	rjmp	.-140    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	e0 5b       	subi	r30, 0xB0	; 176
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	09 94       	ijmp
     2a0:	49 c0       	rjmp	.+146    	; 0x334 <__stack+0x35>
     2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2a4:	3f c0       	rjmp	.+126    	; 0x324 <__stack+0x25>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <__DATA_REGION_LENGTH__+0xc0>
     2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2ac:	33 c0       	rjmp	.+102    	; 0x314 <__stack+0x15>
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2b0:	29 c0       	rjmp	.+82     	; 0x304 <__stack+0x5>
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <__DATA_REGION_LENGTH__+0xd0>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
        case 4:
        case 6:
        case 8:
        case 10:
        case 12:
            Display_DeadTime();
     2b8:	dc de       	rcall	.-584    	; 0x72 <Display_DeadTime>
     2ba:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2be:	a6 cf       	rjmp	.-180    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit2);
            break;
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	c3 de       	rcall	.-634    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit3);
     2c4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x2>
     2c8:	cc de       	rcall	.-616    	; 0x62 <CathodeSwitch>
     2ca:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2ce:	9e cf       	rjmp	.-196    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit5);
            break;
        case 11:
            AnodeSwitch((indication.counter + 1) / 2);
     2d0:	86 e0       	ldi	r24, 0x06	; 6
     2d2:	bb de       	rcall	.-650    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit6);
     2d4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication+0x5>
     2d8:	c4 de       	rcall	.-632    	; 0x62 <CathodeSwitch>
     2da:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2de:	96 cf       	rjmp	.-212    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
            AnodeSwitch(4u);
            CathodeSwitch(indication.digit4);
            SET_BIT(PORTA, 1 << 3); // RDP turn on
            break;
        case 7:
            AnodeSwitch(5u);
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	b3 de       	rcall	.-666    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit5);
     2e4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x4>
     2e8:	bc de       	rcall	.-648    	; 0x62 <CathodeSwitch>
            CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     2ea:	73 98       	cbi	0x0e, 3	; 14
     2ec:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2f0:	8d cf       	rjmp	.-230    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 1:
            AnodeSwitch(3u);
            CathodeSwitch(indication.digit3);
            break;
        case 4:
            AnodeSwitch(4u);
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	aa de       	rcall	.-684    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit4);
     2f6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x3>
     2fa:	b3 de       	rcall	.-666    	; 0x62 <CathodeSwitch>
            SET_BIT(PORTA, 1 << 3); // RDP turn on
     2fc:	73 9a       	sbi	0x0e, 3	; 14
     2fe:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     302:	84 cf       	rjmp	.-248    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit4);
            break;
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
     304:	85 e0       	ldi	r24, 0x05	; 5
     306:	a1 de       	rcall	.-702    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit5);
     308:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x4>
     30c:	aa de       	rcall	.-684    	; 0x62 <CathodeSwitch>
     30e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     312:	7c cf       	rjmp	.-264    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit3);
            break;
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
     314:	84 e0       	ldi	r24, 0x04	; 4
     316:	99 de       	rcall	.-718    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit4);
     318:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x3>
     31c:	a2 de       	rcall	.-700    	; 0x62 <CathodeSwitch>
     31e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     322:	74 cf       	rjmp	.-280    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit1);
            break;
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	91 de       	rcall	.-734    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit2);
     328:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <indication+0x1>
     32c:	9a de       	rcall	.-716    	; 0x62 <CathodeSwitch>
     32e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     332:	6c cf       	rjmp	.-296    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
    case DISPLAY_TIME:
    case DISPLAY_CAD:
        switch (indication.counter)
        {
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	89 de       	rcall	.-750    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit1);
     338:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <indication>
     33c:	92 de       	rcall	.-732    	; 0x62 <CathodeSwitch>
     33e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     342:	64 cf       	rjmp	.-312    	; 0x20c <__DATA_REGION_LENGTH__+0xc>

00000344 <__vector_16>:
    ++cad.counter;
    voltage.pid.run = true;
}

ISR(ADC_vect)
{
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	2f 93       	push	r18
     350:	3f 93       	push	r19
     352:	4f 93       	push	r20
     354:	5f 93       	push	r21
     356:	6f 93       	push	r22
     358:	7f 93       	push	r23
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
    if (++voltage.adc.counter <= ADC_SAMPLES)
     366:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <voltage+0x10>
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	28 0f       	add	r18, r24
     36e:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <voltage+0x10>
     372:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <voltage+0xc>
     376:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <voltage+0xd>
     37a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <voltage+0xe>
     37e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <voltage+0xf>
     382:	25 36       	cpi	r18, 0x65	; 101
     384:	08 f4       	brcc	.+2      	; 0x388 <__vector_16+0x44>
     386:	4a c0       	rjmp	.+148    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
        voltage.adc.sum += ADC;
    else
    {
        voltage.adc.mean = voltage.adc.sum / ADC_SAMPLES;
     388:	24 e6       	ldi	r18, 0x64	; 100
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	4c d5       	rcall	.+2712   	; 0xe2a <__udivmodsi4>
     392:	ca 01       	movw	r24, r20
     394:	b9 01       	movw	r22, r18
     396:	00 d6       	rcall	.+3072   	; 0xf98 <__floatunsisf>
     398:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <voltage+0x8>
     39c:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <voltage+0x9>
     3a0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <voltage+0xa>
     3a4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <voltage+0xb>
        voltage.adc.value = voltage.adc.mean * VREF / 1024;
     3a8:	2d ec       	ldi	r18, 0xCD	; 205
     3aa:	3c ec       	ldi	r19, 0xCC	; 204
     3ac:	4c e8       	ldi	r20, 0x8C	; 140
     3ae:	5a e3       	ldi	r21, 0x3A	; 58
     3b0:	a9 d6       	rcall	.+3410   	; 0x1104 <__mulsf3>
     3b2:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <voltage>
     3b6:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <voltage+0x1>
     3ba:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <voltage+0x2>
     3be:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <voltage+0x3>
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
        voltage.adc.valueScaled *= VOUT_REGL_SLOPE;
     3c2:	2a e7       	ldi	r18, 0x7A	; 122
     3c4:	32 e9       	ldi	r19, 0x92	; 146
     3c6:	48 e5       	ldi	r20, 0x58	; 88
     3c8:	53 e4       	ldi	r21, 0x43	; 67
     3ca:	9c d6       	rcall	.+3384   	; 0x1104 <__mulsf3>
        voltage.adc.valueScaled += VOUT_REGL_INTERCEPT;
     3cc:	2a e4       	ldi	r18, 0x4A	; 74
     3ce:	33 ed       	ldi	r19, 0xD3	; 211
     3d0:	49 e8       	ldi	r20, 0x89	; 137
     3d2:	5f e3       	ldi	r21, 0x3F	; 63
     3d4:	4d d5       	rcall	.+2714   	; 0xe70 <__addsf3>
     3d6:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <voltage+0x4>
     3da:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <voltage+0x5>
     3de:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <voltage+0x6>
     3e2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <voltage+0x7>
        voltage.adc.sum = 0;
     3e6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <voltage+0xc>
     3ea:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <voltage+0xd>
     3ee:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <voltage+0xe>
     3f2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <voltage+0xf>
        voltage.adc.counter = 0;
     3f6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <voltage+0x10>
    }
}
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti
}

ISR(ADC_vect)
{
    if (++voltage.adc.counter <= ADC_SAMPLES)
        voltage.adc.sum += ADC;
     41c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
     420:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
     424:	ab 01       	movw	r20, r22
     426:	bc 01       	movw	r22, r24
     428:	42 0f       	add	r20, r18
     42a:	53 1f       	adc	r21, r19
     42c:	61 1d       	adc	r22, r1
     42e:	71 1d       	adc	r23, r1
     430:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <voltage+0xc>
     434:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <voltage+0xd>
     438:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <voltage+0xe>
     43c:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <voltage+0xf>
     440:	dc cf       	rjmp	.-72     	; 0x3fa <__vector_16+0xb6>

00000442 <main>:
    }
}

int main(void)
{
    voltage.pid.pidData.Kp = K_P;
     442:	8a e0       	ldi	r24, 0x0A	; 10
     444:	97 ed       	ldi	r25, 0xD7	; 215
     446:	a3 e2       	ldi	r26, 0x23	; 35
     448:	bc e3       	ldi	r27, 0x3C	; 60
     44a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <voltage+0x29>
     44e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <voltage+0x2a>
     452:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <voltage+0x2b>
     456:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <voltage+0x2c>
    voltage.pid.pidData.Ki = K_I;
     45a:	87 e1       	ldi	r24, 0x17	; 23
     45c:	97 eb       	ldi	r25, 0xB7	; 183
     45e:	a1 e5       	ldi	r26, 0x51	; 81
     460:	b8 e3       	ldi	r27, 0x38	; 56
     462:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <voltage+0x2d>
     466:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <voltage+0x2e>
     46a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <voltage+0x2f>
     46e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <voltage+0x30>
    voltage.pid.pidData.Kd = K_D;
     472:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <voltage+0x31>
     476:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <voltage+0x32>
     47a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <voltage+0x33>
     47e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <voltage+0x34>
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	8e e1       	ldi	r24, 0x1E	; 30
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	1d d4       	rcall	.+2106   	; 0xcca <arm_pid_init_f32>
    IO_Init();
     490:	4b de       	rcall	.-874    	; 0x128 <IO_Init>
    TIMx_Init(0u);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	73 de       	rcall	.-794    	; 0x17c <TIMx_Init>
    TIMx_Init(1u);
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	71 de       	rcall	.-798    	; 0x17c <TIMx_Init>
    ADC_Init();
     49a:	53 de       	rcall	.-858    	; 0x142 <ADC_Init>
    TWI_Init();
     49c:	78 d4       	rcall	.+2288   	; 0xd8e <TWI_Init>
    USER_LED_ON;
     49e:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	37 ea       	ldi	r19, 0xA7	; 167
     4a4:	81 e6       	ldi	r24, 0x61	; 97
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	30 40       	sbci	r19, 0x00	; 0
     4aa:	80 40       	sbci	r24, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <main+0x64>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <main+0x6e>
     4b0:	00 00       	nop
    _delay_ms(2000);
    USER_LED_OFF;
     4b2:	58 98       	cbi	0x0b, 0	; 11
    sei();
     4b4:	78 94       	sei

    /* PCF8563 CLKOUT turnoff */
    TWI_Start();
     4b6:	6f d4       	rcall	.+2270   	; 0xd96 <TWI_Start>
    TWI_SendByte(0xA2); // Device address + write bit
     4b8:	82 ea       	ldi	r24, 0xA2	; 162
     4ba:	79 d4       	rcall	.+2290   	; 0xdae <TWI_SendByte>
    TWI_SendByte(0x0D); // Pointer
     4bc:	8d e0       	ldi	r24, 0x0D	; 13
     4be:	77 d4       	rcall	.+2286   	; 0xdae <TWI_SendByte>
    TWI_SendByte(0x00); // CLKOUT output is set high-impedance
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	75 d4       	rcall	.+2282   	; 0xdae <TWI_SendByte>
    TWI_Stop();
     4c4:	70 d4       	rcall	.+2272   	; 0xda6 <TWI_Stop>

    /* Read reference temperature */
    TWI_Start();
     4c6:	67 d4       	rcall	.+2254   	; 0xd96 <TWI_Start>
    TWI_SendByte(0x90); // Device address + write bit
     4c8:	80 e9       	ldi	r24, 0x90	; 144
     4ca:	71 d4       	rcall	.+2274   	; 0xdae <TWI_SendByte>
    TWI_SendByte(0x00); // Pointer
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	6f d4       	rcall	.+2270   	; 0xdae <TWI_SendByte>
    TWI_Start(); // Restart
     4d0:	62 d4       	rcall	.+2244   	; 0xd96 <TWI_Start>
    TWI_SendByte(0x91); // Device address + read bit
     4d2:	81 e9       	ldi	r24, 0x91	; 145
     4d4:	6c d4       	rcall	.+2264   	; 0xdae <TWI_SendByte>
    temperature.msb = TWI_ReadByte();
     4d6:	75 d4       	rcall	.+2282   	; 0xdc2 <TWI_ReadByte>
     4d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temperature+0x2>
    temperature.lsb = TWI_ReadLastByte();
     4dc:	7c d4       	rcall	.+2296   	; 0xdd6 <TWI_ReadLastByte>
     4de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperature+0x3>
    TWI_Stop();
     4e2:	61 d4       	rcall	.+2242   	; 0xda6 <TWI_Stop>
    temperature.compensation.reference = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     4e4:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <temperature+0x2>
     4e8:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <temperature+0x3>
     4ec:	76 27       	eor	r23, r22
     4ee:	67 27       	eor	r22, r23
     4f0:	76 27       	eor	r23, r22
     4f2:	76 95       	lsr	r23
     4f4:	67 95       	ror	r22
     4f6:	72 95       	swap	r23
     4f8:	62 95       	swap	r22
     4fa:	6f 70       	andi	r22, 0x0F	; 15
     4fc:	67 27       	eor	r22, r23
     4fe:	7f 70       	andi	r23, 0x0F	; 15
     500:	67 27       	eor	r22, r23
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	48 d5       	rcall	.+2704   	; 0xf9c <__floatsisf>
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4a ef       	ldi	r20, 0xFA	; 250
     512:	52 e4       	ldi	r21, 0x42	; 66
     514:	f7 d5       	rcall	.+3054   	; 0x1104 <__mulsf3>
     516:	14 d5       	rcall	.+2600   	; 0xf40 <__fixunssfsi>
     518:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <temperature+0x7>
     51c:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <temperature+0x6>
    temperature.value = temperature.compensation.reference;
     520:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     524:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
            {
                OCR1B = 0;
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
                USER_LED_OFF;
                indication.pwmOutputStatus = CONNECTED;
     528:	c1 e0       	ldi	r28, 0x01	; 1
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
                {
                case 1:
                    indication.digit1 = (cad.counter / (1445 * 1 / 10)) % 10;
     52a:	3a e0       	ldi	r19, 0x0A	; 10
     52c:	83 2e       	mov	r8, r19
     52e:	91 2c       	mov	r9, r1
     530:	a1 2c       	mov	r10, r1
     532:	b1 2c       	mov	r11, r1
     534:	49 e6       	ldi	r20, 0x69	; 105
     536:	44 2e       	mov	r4, r20
     538:	55 24       	eor	r5, r5
     53a:	53 94       	inc	r5
     53c:	61 2c       	mov	r6, r1
     53e:	71 2c       	mov	r7, r1
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensation.factor;
                    }

                    indication.digit3 = temperature.value / 10000;
     540:	50 e1       	ldi	r21, 0x10	; 16
     542:	25 2e       	mov	r2, r21
     544:	57 e2       	ldi	r21, 0x27	; 39
     546:	35 2e       	mov	r3, r21
                    indication.digit4 = (temperature.value / 1000) % 10;
     548:	0a e0       	ldi	r16, 0x0A	; 10
     54a:	10 e0       	ldi	r17, 0x00	; 0
    // TWI_SendByte(RTC_DECtoBCD(15)); // Hour
    // TWI_Stop();

    while (1)
    {
        SoftStart(&indication, &voltage);
     54c:	6d e0       	ldi	r22, 0x0D	; 13
     54e:	71 e0       	ldi	r23, 0x01	; 1
     550:	85 e5       	ldi	r24, 0x55	; 85
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	93 dd       	rcall	.-1242   	; 0x7c <SoftStart>
        // voltage.pid.setPoint = VOUT_TASK; // Manual control

        /* Get time */
        TWI_Start();
     556:	1f d4       	rcall	.+2110   	; 0xd96 <TWI_Start>
        TWI_SendByte(0xA2); // Device address + write bit
     558:	82 ea       	ldi	r24, 0xA2	; 162
     55a:	29 d4       	rcall	.+2130   	; 0xdae <TWI_SendByte>
        TWI_SendByte(0x02); // Pointer
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	27 d4       	rcall	.+2126   	; 0xdae <TWI_SendByte>
        TWI_Start(); // Restart
     560:	1a d4       	rcall	.+2100   	; 0xd96 <TWI_Start>
        TWI_SendByte(0xA3); // Device address + read bit
     562:	83 ea       	ldi	r24, 0xA3	; 163
     564:	24 d4       	rcall	.+2120   	; 0xdae <TWI_SendByte>
        time.sec = RTC_BCDtoDEC((TWI_ReadByte()) & RTC_SEC_MASK);
     566:	2d d4       	rcall	.+2138   	; 0xdc2 <TWI_ReadByte>
     568:	8f 77       	andi	r24, 0x7F	; 127
     56a:	00 d4       	rcall	.+2048   	; 0xd6c <RTC_BCDtoDEC>
     56c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <time>
        time.min = RTC_BCDtoDEC((TWI_ReadByte()) & RTC_MIN_MASK);
     570:	28 d4       	rcall	.+2128   	; 0xdc2 <TWI_ReadByte>
     572:	8f 77       	andi	r24, 0x7F	; 127
     574:	fb d3       	rcall	.+2038   	; 0xd6c <RTC_BCDtoDEC>
     576:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <time+0x1>
        time.hour = RTC_BCDtoDEC((TWI_ReadLastByte()) & RTC_HOUR_MASK);
     57a:	2d d4       	rcall	.+2138   	; 0xdd6 <TWI_ReadLastByte>
     57c:	8f 73       	andi	r24, 0x3F	; 63
     57e:	f6 d3       	rcall	.+2028   	; 0xd6c <RTC_BCDtoDEC>
     580:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <time+0x2>
        TWI_Stop();
     584:	10 d4       	rcall	.+2080   	; 0xda6 <TWI_Stop>

        /* Time reset */
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
     586:	60 99       	sbic	0x0c, 0	; 12
     588:	20 c1       	rjmp	.+576    	; 0x7ca <main+0x388>
        {
            if (++buttonCounter == UINT8_MAX)
     58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     58e:	8f 5f       	subi	r24, 0xFF	; 255
     590:	8f 3f       	cpi	r24, 0xFF	; 255
     592:	09 f4       	brne	.+2      	; 0x596 <main+0x154>
     594:	1d c1       	rjmp	.+570    	; 0x7d0 <main+0x38e>
     596:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        else
            buttonCounter = 0;

        /* Time adjust */
        if ((time.hour == 19) && (time.min == 59) && (time.sec == 30))
     59a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     59e:	83 31       	cpi	r24, 0x13	; 19
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <main+0x162>
     5a2:	e0 c0       	rjmp	.+448    	; 0x764 <main+0x322>
                TWI_SendByte(RTC_DECtoBCD(time.sec + TIME_ADJUST_SEC));
                TWI_Stop();
                time.adjusted = true;
            }
        }
        if ((time.hour != 19) && (time.adjusted))
     5a4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <time+0x3>
     5a8:	91 11       	cpse	r25, r1
            time.adjusted = false;
     5aa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <time+0x3>

        /* Daily turnoff */
        if (time.hour < 6)
     5ae:	86 30       	cpi	r24, 0x06	; 6
     5b0:	08 f0       	brcs	.+2      	; 0x5b4 <main+0x172>
     5b2:	f6 c0       	rjmp	.+492    	; 0x7a0 <main+0x35e>
        {
            indication.isTurnedOff = true;
     5b4:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <indication+0x9>
            SoftTurnoff(&indication, &voltage);
     5b8:	6d e0       	ldi	r22, 0x0D	; 13
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	85 e5       	ldi	r24, 0x55	; 85
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	8a dd       	rcall	.-1260   	; 0xd6 <SoftTurnoff>
            if (voltage.pid.setPoint < 100.0)
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	48 ec       	ldi	r20, 0xC8	; 200
     5c8:	52 e4       	ldi	r21, 0x42	; 66
     5ca:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     5ce:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     5d2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     5d6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     5da:	ae d4       	rcall	.+2396   	; 0xf38 <__cmpsf2>
     5dc:	87 ff       	sbrs	r24, 7
     5de:	09 c0       	rjmp	.+18     	; 0x5f2 <main+0x1b0>
            {
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
     5e0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0xa>
     5e4:	81 11       	cpse	r24, r1
     5e6:	b0 c1       	rjmp	.+864    	; 0x948 <main+0x506>
                    indication.pwmOutputStatus = DISCONNECTED;
                    indication.pause = true;
                    temperature.compensation.counter = 0;
                    Display_DeadTime();
                }
                (time.sec % 2) ? USER_LED_ON : USER_LED_OFF;
     5e8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <time>
     5ec:	80 ff       	sbrs	r24, 0
     5ee:	02 c1       	rjmp	.+516    	; 0x7f4 <main+0x3b2>
     5f0:	58 9a       	sbi	0x0b, 0	; 11
                USER_LED_OFF;
                indication.pwmOutputStatus = CONNECTED;
            }
        }

        if (!indication.pause)
     5f2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x8>
     5f6:	81 11       	cpse	r24, r1
     5f8:	a9 cf       	rjmp	.-174    	; 0x54c <main+0x10a>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
     5fa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <voltage+0x3d>
     5fe:	81 11       	cpse	r24, r1
     600:	b6 c1       	rjmp	.+876    	; 0x96e <main+0x52c>
                OCR1B = voltage.pid.processValue * 0x1FF;
                voltage.pid.run = false;
            }

            /* Prepare time */
            if (indication.dispMode == DISPLAY_TIME)
     602:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <indication+0x7>
     606:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     60a:	21 11       	cpse	r18, r1
     60c:	15 c0       	rjmp	.+42     	; 0x638 <main+0x1f6>
            {
                indication.digit1 = time.hour / 10;
     60e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     612:	6a e0       	ldi	r22, 0x0A	; 10
     614:	ea d3       	rcall	.+2004   	; 0xdea <__udivmodqi4>
     616:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <indication>
                indication.digit2 = time.hour % 10;
     61a:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <indication+0x1>
                indication.digit3 = time.min / 10;
     61e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     622:	e3 d3       	rcall	.+1990   	; 0xdea <__udivmodqi4>
     624:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <indication+0x2>
                indication.digit4 = time.min % 10;
     628:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <indication+0x3>
                indication.digit5 = time.sec / 10;
     62c:	8d 2f       	mov	r24, r29
     62e:	dd d3       	rcall	.+1978   	; 0xdea <__udivmodqi4>
     630:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <indication+0x4>
                indication.digit6 = time.sec % 10;
     634:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <indication+0x5>
            }

            /* Temperature compensation */
            if (!temperature.compensation.ready)
     638:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
     63c:	81 11       	cpse	r24, r1
     63e:	dc c0       	rjmp	.+440    	; 0x7f8 <main+0x3b6>
     640:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temperature+0xa>
     644:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <temperature+0x8>
     648:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <temperature+0x9>
            {
                if ((time.sec % 2) && (temperature.compensation.allowIncrement == true))
     64c:	d0 ff       	sbrs	r29, 0
     64e:	ce c1       	rjmp	.+924    	; 0x9ec <main+0x5aa>
     650:	33 23       	and	r19, r19
     652:	39 f0       	breq	.+14     	; 0x662 <main+0x220>
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = false;
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temperature+0x9>
     65a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
     65e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temperature+0xa>
                if (!(time.sec % 2) && (temperature.compensation.allowIncrement == false))
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = true;
                if (temperature.compensation.counter == 3600)
     662:	80 31       	cpi	r24, 0x10	; 16
     664:	9e 40       	sbci	r25, 0x0E	; 14
     666:	09 f4       	brne	.+2      	; 0x66a <main+0x228>
     668:	10 c1       	rjmp	.+544    	; 0x88a <main+0x448>
                    temperature.compensation.ready = true; // Temperature is compensated after 3600 sec (60 min)
                }
            }

            /* Prepare temperature */
            if ((time.sec > 4) && (time.sec < 10))
     66a:	8b ef       	ldi	r24, 0xFB	; 251
     66c:	8d 0f       	add	r24, r29
     66e:	85 30       	cpi	r24, 0x05	; 5
     670:	08 f0       	brcs	.+2      	; 0x674 <main+0x232>
     672:	4e c1       	rjmp	.+668    	; 0x910 <main+0x4ce>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     674:	21 30       	cpi	r18, 0x01	; 1
     676:	09 f4       	brne	.+2      	; 0x67a <main+0x238>
     678:	69 cf       	rjmp	.-302    	; 0x54c <main+0x10a>
     67a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <temperature>
     67e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <temperature+0x1>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensation.factor;
                    }

                    indication.digit3 = temperature.value / 10000;
     682:	c9 01       	movw	r24, r18
     684:	b1 01       	movw	r22, r2
     686:	bd d3       	rcall	.+1914   	; 0xe02 <__udivmodhi4>
     688:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                    indication.digit4 = (temperature.value / 1000) % 10;
     68c:	c9 01       	movw	r24, r18
     68e:	68 ee       	ldi	r22, 0xE8	; 232
     690:	73 e0       	ldi	r23, 0x03	; 3
     692:	b7 d3       	rcall	.+1902   	; 0xe02 <__udivmodhi4>
     694:	cb 01       	movw	r24, r22
     696:	b8 01       	movw	r22, r16
     698:	b4 d3       	rcall	.+1896   	; 0xe02 <__udivmodhi4>
     69a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <indication+0x3>
                    indication.digit5 = (temperature.value / 100) % 10;
     69e:	c9 01       	movw	r24, r18
     6a0:	64 e6       	ldi	r22, 0x64	; 100
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	ae d3       	rcall	.+1884   	; 0xe02 <__udivmodhi4>
     6a6:	cb 01       	movw	r24, r22
     6a8:	b8 01       	movw	r22, r16
     6aa:	ab d3       	rcall	.+1878   	; 0xe02 <__udivmodhi4>
     6ac:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <indication+0x4>
                    indication.digit6 = (temperature.value / 10) % 10;
     6b0:	c9 01       	movw	r24, r18
     6b2:	b8 01       	movw	r22, r16
     6b4:	a6 d3       	rcall	.+1868   	; 0xe02 <__udivmodhi4>
     6b6:	cb 01       	movw	r24, r22
     6b8:	b8 01       	movw	r22, r16
     6ba:	a3 d3       	rcall	.+1862   	; 0xe02 <__udivmodhi4>
     6bc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication+0x5>
                    indication.dispMode = DISPLAY_TEMPERATURE;
     6c0:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <indication+0x7>
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                CLEAR_BIT(PORTA, 1 << 3), indication.dispMode = DISPLAY_CAD;

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     6c4:	8d ed       	ldi	r24, 0xDD	; 221
     6c6:	8d 0f       	add	r24, r29
     6c8:	85 30       	cpi	r24, 0x05	; 5
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <main+0x28c>
     6cc:	3f cf       	rjmp	.-386    	; 0x54c <main+0x10a>
            {
                if (indication.dispMode != DISPLAY_CAD)
                    indication.dispMode = DISPLAY_CAD, cad.counter = 0;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <indication+0x7>
     6d4:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     6d8:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     6dc:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     6e0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     6e4:	60 e0       	ldi	r22, 0x00	; 0
                indication.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
     6e6:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <indication>
                indication.digit2 = indication.digit1;
     6ea:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication+0x1>
                indication.digit3 = indication.digit1;
     6ee:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                indication.digit4 = indication.digit1;
     6f2:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x3>
                indication.digit5 = indication.digit1;
     6f6:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x4>
                indication.digit6 = indication.digit1;
     6fa:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x5>
                indication.digit6 = 0;
                cad.counter = 0;
                cad.updateStage = 1;
                cad.update = true;
            }
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
     6fe:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
     702:	88 23       	and	r24, r24
     704:	09 f4       	brne	.+2      	; 0x708 <main+0x2c6>
     706:	22 cf       	rjmp	.-444    	; 0x54c <main+0x10a>
            {
                switch (cad.updateStage)
     708:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cad+0x4>
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	09 f4       	brne	.+2      	; 0x712 <main+0x2d0>
     710:	2e c2       	rjmp	.+1116   	; 0xb6e <main+0x72c>
     712:	08 f4       	brcc	.+2      	; 0x716 <main+0x2d4>
     714:	53 c2       	rjmp	.+1190   	; 0xbbc <main+0x77a>
     716:	85 30       	cpi	r24, 0x05	; 5
     718:	09 f4       	brne	.+2      	; 0x71c <main+0x2da>
     71a:	03 c2       	rjmp	.+1030   	; 0xb22 <main+0x6e0>
     71c:	08 f4       	brcc	.+2      	; 0x720 <main+0x2de>
     71e:	da c1       	rjmp	.+948    	; 0xad4 <main+0x692>
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	09 f0       	breq	.+2      	; 0x726 <main+0x2e4>
     724:	13 cf       	rjmp	.-474    	; 0x54c <main+0x10a>
                    if ((time.sec / 10) == indication.digit5)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 6:
                    indication.digit6 = (cad.counter / (1445 * 1 / 10)) % 10;
     726:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     72a:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     72e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     732:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     736:	20 e9       	ldi	r18, 0x90	; 144
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	75 d3       	rcall	.+1770   	; 0xe2a <__udivmodsi4>
     740:	ca 01       	movw	r24, r20
     742:	b9 01       	movw	r22, r18
     744:	a5 01       	movw	r20, r10
     746:	94 01       	movw	r18, r8
     748:	70 d3       	rcall	.+1760   	; 0xe2a <__udivmodsi4>
     74a:	26 2f       	mov	r18, r22
     74c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x5>
                    if ((time.sec % 10) == indication.digit6)
     750:	8d 2f       	mov	r24, r29
     752:	6a e0       	ldi	r22, 0x0A	; 10
     754:	4a d3       	rcall	.+1684   	; 0xdea <__udivmodqi4>
     756:	92 13       	cpse	r25, r18
     758:	f9 ce       	rjmp	.-526    	; 0x54c <main+0x10a>
                        cad.update = false, indication.dispMode = DISPLAY_TIME;
     75a:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cad+0x5>
     75e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <indication+0x7>
     762:	f4 ce       	rjmp	.-536    	; 0x54c <main+0x10a>
        }
        else
            buttonCounter = 0;

        /* Time adjust */
        if ((time.hour == 19) && (time.min == 59) && (time.sec == 30))
     764:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     768:	8b 33       	cpi	r24, 0x3B	; 59
     76a:	d1 f4       	brne	.+52     	; 0x7a0 <main+0x35e>
     76c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <time>
     770:	8e 31       	cpi	r24, 0x1E	; 30
     772:	b1 f4       	brne	.+44     	; 0x7a0 <main+0x35e>
        {
            if (!time.adjusted)
     774:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <time+0x3>
     778:	81 11       	cpse	r24, r1
     77a:	12 c0       	rjmp	.+36     	; 0x7a0 <main+0x35e>
            {
                TWI_Start();
     77c:	0c d3       	rcall	.+1560   	; 0xd96 <TWI_Start>
                TWI_SendByte(0xA2); // Device address + write bit
     77e:	82 ea       	ldi	r24, 0xA2	; 162
     780:	16 d3       	rcall	.+1580   	; 0xdae <TWI_SendByte>
                TWI_SendByte(0x02); // Pointer
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	14 d3       	rcall	.+1576   	; 0xdae <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(time.sec + TIME_ADJUST_SEC));
     786:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <time>
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	fa d2       	rcall	.+1524   	; 0xd82 <RTC_DECtoBCD>
     78e:	0f d3       	rcall	.+1566   	; 0xdae <TWI_SendByte>
                TWI_Stop();
     790:	0a d3       	rcall	.+1556   	; 0xda6 <TWI_Stop>
                time.adjusted = true;
     792:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <time+0x3>
            }
        }
        if ((time.hour != 19) && (time.adjusted))
     796:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     79a:	83 31       	cpi	r24, 0x13	; 19
     79c:	09 f0       	breq	.+2      	; 0x7a0 <main+0x35e>
     79e:	05 cf       	rjmp	.-502    	; 0x5aa <main+0x168>
                (time.sec % 2) ? USER_LED_ON : USER_LED_OFF;
            }
        }
        else
        {
            indication.pause = false, indication.isTurnedOff = false;
     7a0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <indication+0x8>
     7a4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <indication+0x9>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
     7a8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0xa>
     7ac:	81 11       	cpse	r24, r1
     7ae:	25 cf       	rjmp	.-438    	; 0x5fa <main+0x1b8>
            {
                OCR1B = 0;
     7b0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     7b4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     7b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     7bc:	80 62       	ori	r24, 0x20	; 32
     7be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                USER_LED_OFF;
     7c2:	58 98       	cbi	0x0b, 0	; 11
                indication.pwmOutputStatus = CONNECTED;
     7c4:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <indication+0xa>
     7c8:	14 cf       	rjmp	.-472    	; 0x5f2 <main+0x1b0>
                TWI_SendByte(RTC_DECtoBCD(20)); // Hour
                TWI_Stop();
            }
        }
        else
            buttonCounter = 0;
     7ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     7ce:	e5 ce       	rjmp	.-566    	; 0x59a <main+0x158>
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
        {
            if (++buttonCounter == UINT8_MAX)
            {
                buttonCounter = 0;
     7d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                TWI_Start();
     7d4:	e0 d2       	rcall	.+1472   	; 0xd96 <TWI_Start>
                TWI_SendByte(0xA2); // Device address + write bit
     7d6:	82 ea       	ldi	r24, 0xA2	; 162
     7d8:	ea d2       	rcall	.+1492   	; 0xdae <TWI_SendByte>
                TWI_SendByte(0x02); // Pointer
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	e8 d2       	rcall	.+1488   	; 0xdae <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(00)); // Sec
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	d0 d2       	rcall	.+1440   	; 0xd82 <RTC_DECtoBCD>
     7e2:	e5 d2       	rcall	.+1482   	; 0xdae <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(00)); // Min
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	cd d2       	rcall	.+1434   	; 0xd82 <RTC_DECtoBCD>
     7e8:	e2 d2       	rcall	.+1476   	; 0xdae <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(20)); // Hour
     7ea:	84 e1       	ldi	r24, 0x14	; 20
     7ec:	ca d2       	rcall	.+1428   	; 0xd82 <RTC_DECtoBCD>
     7ee:	df d2       	rcall	.+1470   	; 0xdae <TWI_SendByte>
                TWI_Stop();
     7f0:	da d2       	rcall	.+1460   	; 0xda6 <TWI_Stop>
     7f2:	d3 ce       	rjmp	.-602    	; 0x59a <main+0x158>
                    indication.pwmOutputStatus = DISCONNECTED;
                    indication.pause = true;
                    temperature.compensation.counter = 0;
                    Display_DeadTime();
                }
                (time.sec % 2) ? USER_LED_ON : USER_LED_OFF;
     7f4:	58 98       	cbi	0x0b, 0	; 11
     7f6:	fd ce       	rjmp	.-518    	; 0x5f2 <main+0x1b0>
                    temperature.compensation.ready = true; // Temperature is compensated after 3600 sec (60 min)
                }
            }

            /* Prepare temperature */
            if ((time.sec > 4) && (time.sec < 10))
     7f8:	8b ef       	ldi	r24, 0xFB	; 251
     7fa:	8d 0f       	add	r24, r29
     7fc:	85 30       	cpi	r24, 0x05	; 5
     7fe:	08 f0       	brcs	.+2      	; 0x802 <main+0x3c0>
     800:	87 c0       	rjmp	.+270    	; 0x910 <main+0x4ce>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     802:	21 30       	cpi	r18, 0x01	; 1
     804:	09 f4       	brne	.+2      	; 0x808 <main+0x3c6>
     806:	a2 ce       	rjmp	.-700    	; 0x54c <main+0x10a>
                {
                    /* Read temperature */
                    if (temperature.compensation.ready)
                    {
                        TWI_Start();
     808:	c6 d2       	rcall	.+1420   	; 0xd96 <TWI_Start>
                        TWI_SendByte(0x90); // Device address + write bit
     80a:	80 e9       	ldi	r24, 0x90	; 144
     80c:	d0 d2       	rcall	.+1440   	; 0xdae <TWI_SendByte>
                        TWI_SendByte(0x00); // Pointer
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	ce d2       	rcall	.+1436   	; 0xdae <TWI_SendByte>
                        TWI_Start(); // Restart
     812:	c1 d2       	rcall	.+1410   	; 0xd96 <TWI_Start>
                        TWI_SendByte(0x91); // Device address + read bit
     814:	81 e9       	ldi	r24, 0x91	; 145
     816:	cb d2       	rcall	.+1430   	; 0xdae <TWI_SendByte>
                        temperature.msb = TWI_ReadByte();
     818:	d4 d2       	rcall	.+1448   	; 0xdc2 <TWI_ReadByte>
     81a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temperature+0x2>
                        temperature.lsb = TWI_ReadLastByte();
     81e:	db d2       	rcall	.+1462   	; 0xdd6 <TWI_ReadLastByte>
     820:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperature+0x3>
                        TWI_Stop();
     824:	c0 d2       	rcall	.+1408   	; 0xda6 <TWI_Stop>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
     826:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <temperature+0x2>
     82a:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <temperature+0x3>
     82e:	76 27       	eor	r23, r22
     830:	67 27       	eor	r22, r23
     832:	76 27       	eor	r23, r22
     834:	76 95       	lsr	r23
     836:	67 95       	ror	r22
     838:	72 95       	swap	r23
     83a:	62 95       	swap	r22
     83c:	6f 70       	andi	r22, 0x0F	; 15
     83e:	67 27       	eor	r22, r23
     840:	7f 70       	andi	r23, 0x0F	; 15
     842:	67 27       	eor	r22, r23
     844:	07 2e       	mov	r0, r23
     846:	00 0c       	add	r0, r0
     848:	88 0b       	sbc	r24, r24
     84a:	99 0b       	sbc	r25, r25
     84c:	a7 d3       	rcall	.+1870   	; 0xf9c <__floatsisf>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	4a ef       	ldi	r20, 0xFA	; 250
     854:	52 e4       	ldi	r21, 0x42	; 66
     856:	56 d4       	rcall	.+2220   	; 0x1104 <__mulsf3>
     858:	6b 01       	movw	r12, r22
     85a:	7c 01       	movw	r14, r24
     85c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <temperature+0x4>
     860:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <temperature+0x5>
     864:	07 2e       	mov	r0, r23
     866:	00 0c       	add	r0, r0
     868:	88 0b       	sbc	r24, r24
     86a:	99 0b       	sbc	r25, r25
     86c:	97 d3       	rcall	.+1838   	; 0xf9c <__floatsisf>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	fc d2       	rcall	.+1528   	; 0xe70 <__addsf3>
                        TWI_Start(); // Restart
                        TWI_SendByte(0x91); // Device address + read bit
                        temperature.msb = TWI_ReadByte();
                        temperature.lsb = TWI_ReadLastByte();
                        TWI_Stop();
                        temperature.value =
     878:	63 d3       	rcall	.+1734   	; 0xf40 <__fixunssfsi>
     87a:	9b 01       	movw	r18, r22
     87c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     880:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
     884:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     888:	fc ce       	rjmp	.-520    	; 0x682 <main+0x240>
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = false;
                if (!(time.sec % 2) && (temperature.compensation.allowIncrement == false))
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = true;
                if (temperature.compensation.counter == 3600)
                {
                    TWI_Start();
     88a:	85 d2       	rcall	.+1290   	; 0xd96 <TWI_Start>
                    TWI_SendByte(0x90); // Device address + write bit
     88c:	80 e9       	ldi	r24, 0x90	; 144
     88e:	8f d2       	rcall	.+1310   	; 0xdae <TWI_SendByte>
                    TWI_SendByte(0x00); // Pointer
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	8d d2       	rcall	.+1306   	; 0xdae <TWI_SendByte>
                    TWI_Start(); // Restart
     894:	80 d2       	rcall	.+1280   	; 0xd96 <TWI_Start>
                    TWI_SendByte(0x91); // Device address + read bit
     896:	81 e9       	ldi	r24, 0x91	; 145
     898:	8a d2       	rcall	.+1300   	; 0xdae <TWI_SendByte>
                    temperature.msb = TWI_ReadByte();
     89a:	93 d2       	rcall	.+1318   	; 0xdc2 <TWI_ReadByte>
     89c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temperature+0x2>
                    temperature.lsb = TWI_ReadLastByte();
     8a0:	9a d2       	rcall	.+1332   	; 0xdd6 <TWI_ReadLastByte>
     8a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperature+0x3>
                    TWI_Stop();
     8a6:	7f d2       	rcall	.+1278   	; 0xda6 <TWI_Stop>
                    temperature.value = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     8a8:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <temperature+0x2>
     8ac:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <temperature+0x3>
     8b0:	76 27       	eor	r23, r22
     8b2:	67 27       	eor	r22, r23
     8b4:	76 27       	eor	r23, r22
     8b6:	76 95       	lsr	r23
     8b8:	67 95       	ror	r22
     8ba:	72 95       	swap	r23
     8bc:	62 95       	swap	r22
     8be:	6f 70       	andi	r22, 0x0F	; 15
     8c0:	67 27       	eor	r22, r23
     8c2:	7f 70       	andi	r23, 0x0F	; 15
     8c4:	67 27       	eor	r22, r23
     8c6:	07 2e       	mov	r0, r23
     8c8:	00 0c       	add	r0, r0
     8ca:	88 0b       	sbc	r24, r24
     8cc:	99 0b       	sbc	r25, r25
     8ce:	66 d3       	rcall	.+1740   	; 0xf9c <__floatsisf>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	4a ef       	ldi	r20, 0xFA	; 250
     8d6:	52 e4       	ldi	r21, 0x42	; 66
     8d8:	15 d4       	rcall	.+2090   	; 0x1104 <__mulsf3>
     8da:	32 d3       	rcall	.+1636   	; 0xf40 <__fixunssfsi>
     8dc:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     8e0:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
                    temperature.compensation.factor = temperature.compensation.reference - temperature.value;
     8e4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <temperature+0x6>
     8e8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <temperature+0x7>
     8ec:	c9 01       	movw	r24, r18
     8ee:	86 1b       	sub	r24, r22
     8f0:	97 0b       	sbc	r25, r23
     8f2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperature+0x5>
     8f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperature+0x4>
                    temperature.compensation.ready = true; // Temperature is compensated after 3600 sec (60 min)
     8fa:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <temperature+0xb>
     8fe:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     902:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <indication+0x7>
                }
            }

            /* Prepare temperature */
            if ((time.sec > 4) && (time.sec < 10))
     906:	8b ef       	ldi	r24, 0xFB	; 251
     908:	8d 0f       	add	r24, r29
     90a:	85 30       	cpi	r24, 0x05	; 5
     90c:	08 f4       	brcc	.+2      	; 0x910 <main+0x4ce>
     90e:	79 cf       	rjmp	.-270    	; 0x802 <main+0x3c0>
                    indication.digit5 = (temperature.value / 100) % 10;
                    indication.digit6 = (temperature.value / 10) % 10;
                    indication.dispMode = DISPLAY_TEMPERATURE;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
     910:	21 30       	cpi	r18, 0x01	; 1
     912:	09 f4       	brne	.+2      	; 0x916 <main+0x4d4>
     914:	75 c0       	rjmp	.+234    	; 0xa00 <main+0x5be>
                CLEAR_BIT(PORTA, 1 << 3), indication.dispMode = DISPLAY_CAD;

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     916:	8d ed       	ldi	r24, 0xDD	; 221
     918:	8d 0f       	add	r24, r29
     91a:	85 30       	cpi	r24, 0x05	; 5
     91c:	08 f0       	brcs	.+2      	; 0x920 <main+0x4de>
     91e:	bc c0       	rjmp	.+376    	; 0xa98 <main+0x656>
            {
                if (indication.dispMode != DISPLAY_CAD)
     920:	22 30       	cpi	r18, 0x02	; 2
     922:	09 f0       	breq	.+2      	; 0x926 <main+0x4e4>
     924:	d4 ce       	rjmp	.-600    	; 0x6ce <main+0x28c>
     926:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     92a:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     92e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     932:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     936:	a3 01       	movw	r20, r6
     938:	92 01       	movw	r18, r4
     93a:	77 d2       	rcall	.+1262   	; 0xe2a <__udivmodsi4>
     93c:	ca 01       	movw	r24, r20
     93e:	b9 01       	movw	r22, r18
     940:	a5 01       	movw	r20, r10
     942:	94 01       	movw	r18, r8
     944:	72 d2       	rcall	.+1252   	; 0xe2a <__udivmodsi4>
     946:	cf ce       	rjmp	.-610    	; 0x6e6 <main+0x2a4>
            SoftTurnoff(&indication, &voltage);
            if (voltage.pid.setPoint < 100.0)
            {
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
                {
                    OCR1B = 0;
     948:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     94c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                    CLEAR_BIT(TCCR1A, 1 << COM1B1); // OC1A/OC1B disconnected
     950:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     954:	8f 7d       	andi	r24, 0xDF	; 223
     956:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                    indication.pwmOutputStatus = DISCONNECTED;
     95a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <indication+0xa>
                    indication.pause = true;
     95e:	c0 93 5d 01 	sts	0x015D, r28	; 0x80015d <indication+0x8>
                    temperature.compensation.counter = 0;
     962:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <temperature+0x9>
     966:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <temperature+0x8>
                    Display_DeadTime();
     96a:	83 db       	rcall	.-2298   	; 0x72 <Display_DeadTime>
     96c:	3d ce       	rjmp	.-902    	; 0x5e8 <main+0x1a6>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);
     96e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <voltage+0x4>
     972:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <voltage+0x5>
     976:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <voltage+0x6>
     97a:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <voltage+0x7>
     97e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     982:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     986:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     98a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     98e:	6f d2       	rcall	.+1246   	; 0xe6e <__subsf3>
     990:	ab 01       	movw	r20, r22
     992:	bc 01       	movw	r22, r24
     994:	8e e1       	ldi	r24, 0x1E	; 30
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	3e d1       	rcall	.+636    	; 0xc16 <arm_pid_f32>
     99a:	6b 01       	movw	r12, r22
     99c:	7c 01       	movw	r14, r24

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	a9 01       	movw	r20, r18
     9a4:	c9 d2       	rcall	.+1426   	; 0xf38 <__cmpsf2>
     9a6:	87 fd       	sbrc	r24, 7
     9a8:	7b c0       	rjmp	.+246    	; 0xaa0 <main+0x65e>
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
     9aa:	23 e3       	ldi	r18, 0x33	; 51
     9ac:	33 e3       	ldi	r19, 0x33	; 51
     9ae:	43 e3       	ldi	r20, 0x33	; 51
     9b0:	5f e3       	ldi	r21, 0x3F	; 63
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	a2 d3       	rcall	.+1860   	; 0x10fc <__gesf2>
     9b8:	18 16       	cp	r1, r24
     9ba:	0c f4       	brge	.+2      	; 0x9be <main+0x57c>
     9bc:	7c c0       	rjmp	.+248    	; 0xab6 <main+0x674>
        if (!indication.pause)
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
     9be:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <voltage+0x39>
     9c2:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <voltage+0x3a>
     9c6:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <voltage+0x3b>
     9ca:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <voltage+0x3c>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e8       	ldi	r19, 0x80	; 128
     9d2:	4f ef       	ldi	r20, 0xFF	; 255
     9d4:	53 e4       	ldi	r21, 0x43	; 67
     9d6:	c7 01       	movw	r24, r14
     9d8:	b6 01       	movw	r22, r12
     9da:	94 d3       	rcall	.+1832   	; 0x1104 <__mulsf3>
     9dc:	b1 d2       	rcall	.+1378   	; 0xf40 <__fixunssfsi>
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;

                OCR1B = voltage.pid.processValue * 0x1FF;
     9de:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     9e2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                voltage.pid.run = false;
     9e6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <voltage+0x3d>
     9ea:	0b ce       	rjmp	.-1002   	; 0x602 <main+0x1c0>
            /* Temperature compensation */
            if (!temperature.compensation.ready)
            {
                if ((time.sec % 2) && (temperature.compensation.allowIncrement == true))
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = false;
                if (!(time.sec % 2) && (temperature.compensation.allowIncrement == false))
     9ec:	31 11       	cpse	r19, r1
     9ee:	39 ce       	rjmp	.-910    	; 0x662 <main+0x220>
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = true;
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temperature+0x9>
     9f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
     9fa:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <temperature+0xa>
     9fe:	31 ce       	rjmp	.-926    	; 0x662 <main+0x220>
                    indication.digit6 = (temperature.value / 10) % 10;
                    indication.dispMode = DISPLAY_TEMPERATURE;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                CLEAR_BIT(PORTA, 1 << 3), indication.dispMode = DISPLAY_CAD;
     a00:	73 98       	cbi	0x0e, 3	; 14
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <indication+0x7>

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     a08:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     a0c:	8d ed       	ldi	r24, 0xDD	; 221
     a0e:	8d 0f       	add	r24, r29
     a10:	85 30       	cpi	r24, 0x05	; 5
     a12:	08 f4       	brcc	.+2      	; 0xa16 <main+0x5d4>
     a14:	88 cf       	rjmp	.-240    	; 0x926 <main+0x4e4>
                indication.digit3 = indication.digit1;
                indication.digit4 = indication.digit1;
                indication.digit5 = indication.digit1;
                indication.digit6 = indication.digit1;
            }
            else if ((indication.dispMode == DISPLAY_CAD) && (!cad.update))
     a16:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
     a1a:	81 11       	cpse	r24, r1
     a1c:	75 ce       	rjmp	.-790    	; 0x708 <main+0x2c6>
            {
                indication.digit1 = 0;
                indication.digit2 = 0;
     a1e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <indication+0x1>
                indication.digit3 = 0;
     a22:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <indication+0x2>
                indication.digit4 = 0;
     a26:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <indication+0x3>
                indication.digit5 = 0;
     a2a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <indication+0x4>
                indication.digit6 = 0;
     a2e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <indication+0x5>
                cad.counter = 0;
     a32:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     a36:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     a3a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     a3e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
                cad.updateStage = 1;
     a42:	c0 93 4f 01 	sts	0x014F, r28	; 0x80014f <cad+0x4>
                cad.update = true;
     a46:	c0 93 50 01 	sts	0x0150, r28	; 0x800150 <cad+0x5>
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
                {
                case 1:
                    indication.digit1 = (cad.counter / (1445 * 1 / 10)) % 10;
     a4a:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     a4e:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     a52:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     a56:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     a5a:	20 e9       	ldi	r18, 0x90	; 144
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	e3 d1       	rcall	.+966    	; 0xe2a <__udivmodsi4>
     a64:	ca 01       	movw	r24, r20
     a66:	b9 01       	movw	r22, r18
     a68:	a5 01       	movw	r20, r10
     a6a:	94 01       	movw	r18, r8
     a6c:	de d1       	rcall	.+956    	; 0xe2a <__udivmodsi4>
     a6e:	26 2f       	mov	r18, r22
     a70:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <indication>
                    if ((time.hour / 10) == indication.digit1)
     a74:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     a78:	6a e0       	ldi	r22, 0x0A	; 10
     a7a:	b7 d1       	rcall	.+878    	; 0xdea <__udivmodqi4>
     a7c:	82 13       	cpse	r24, r18
     a7e:	66 cd       	rjmp	.-1332   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     a86:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     a8a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     a8e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     a92:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     a96:	5a cd       	rjmp	.-1356   	; 0x54c <main+0x10a>
                indication.digit3 = indication.digit1;
                indication.digit4 = indication.digit1;
                indication.digit5 = indication.digit1;
                indication.digit6 = indication.digit1;
            }
            else if ((indication.dispMode == DISPLAY_CAD) && (!cad.update))
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	09 f4       	brne	.+2      	; 0xa9e <main+0x65c>
     a9c:	bc cf       	rjmp	.-136    	; 0xa16 <main+0x5d4>
     a9e:	56 cd       	rjmp	.-1364   	; 0x54c <main+0x10a>
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
     aa0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage+0x39>
     aa4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <voltage+0x3a>
     aa8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <voltage+0x3b>
     aac:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <voltage+0x3c>
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	94 cf       	rjmp	.-216    	; 0x9de <main+0x59c>
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;
     ab6:	83 e3       	ldi	r24, 0x33	; 51
     ab8:	93 e3       	ldi	r25, 0x33	; 51
     aba:	a3 e3       	ldi	r26, 0x33	; 51
     abc:	bf e3       	ldi	r27, 0x3F	; 63
     abe:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <voltage+0x39>
     ac2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <voltage+0x3a>
     ac6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <voltage+0x3b>
     aca:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <voltage+0x3c>
     ace:	65 e6       	ldi	r22, 0x65	; 101
     ad0:	71 e0       	ldi	r23, 0x01	; 1
     ad2:	85 cf       	rjmp	.-246    	; 0x9de <main+0x59c>
                    if ((time.min / 10) == indication.digit3)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 4:
                    indication.digit4 = (cad.counter / (1445 * 1 / 10)) % 10;
     ad4:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     ad8:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     adc:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     ae0:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     ae4:	20 e9       	ldi	r18, 0x90	; 144
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	9e d1       	rcall	.+828    	; 0xe2a <__udivmodsi4>
     aee:	ca 01       	movw	r24, r20
     af0:	b9 01       	movw	r22, r18
     af2:	a5 01       	movw	r20, r10
     af4:	94 01       	movw	r18, r8
     af6:	99 d1       	rcall	.+818    	; 0xe2a <__udivmodsi4>
     af8:	26 2f       	mov	r18, r22
     afa:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x3>
                    if ((time.min % 10) == indication.digit4)
     afe:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     b02:	6a e0       	ldi	r22, 0x0A	; 10
     b04:	72 d1       	rcall	.+740    	; 0xdea <__udivmodqi4>
     b06:	92 13       	cpse	r25, r18
     b08:	21 cd       	rjmp	.-1470   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     b0a:	85 e0       	ldi	r24, 0x05	; 5
     b0c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     b10:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     b14:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     b18:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     b1c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     b20:	15 cd       	rjmp	.-1494   	; 0x54c <main+0x10a>
                    break;

                case 5:
                    indication.digit5 = (cad.counter / (1445 * 1 / 10)) % 10;
     b22:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     b26:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     b2a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     b2e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     b32:	20 e9       	ldi	r18, 0x90	; 144
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	77 d1       	rcall	.+750    	; 0xe2a <__udivmodsi4>
     b3c:	ca 01       	movw	r24, r20
     b3e:	b9 01       	movw	r22, r18
     b40:	a5 01       	movw	r20, r10
     b42:	94 01       	movw	r18, r8
     b44:	72 d1       	rcall	.+740    	; 0xe2a <__udivmodsi4>
     b46:	26 2f       	mov	r18, r22
     b48:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x4>
                    if ((time.sec / 10) == indication.digit5)
     b4c:	8d 2f       	mov	r24, r29
     b4e:	6a e0       	ldi	r22, 0x0A	; 10
     b50:	4c d1       	rcall	.+664    	; 0xdea <__udivmodqi4>
     b52:	82 13       	cpse	r24, r18
     b54:	fb cc       	rjmp	.-1546   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     b56:	96 e0       	ldi	r25, 0x06	; 6
     b58:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <cad+0x4>
     b5c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     b60:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     b64:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     b68:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     b6c:	ef cc       	rjmp	.-1570   	; 0x54c <main+0x10a>
                    if ((time.hour % 10) == indication.digit2)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 3:
                    indication.digit3 = (cad.counter / (1445 * 1 / 10)) % 10;
     b6e:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     b72:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     b76:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     b7a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     b7e:	20 e9       	ldi	r18, 0x90	; 144
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	51 d1       	rcall	.+674    	; 0xe2a <__udivmodsi4>
     b88:	ca 01       	movw	r24, r20
     b8a:	b9 01       	movw	r22, r18
     b8c:	a5 01       	movw	r20, r10
     b8e:	94 01       	movw	r18, r8
     b90:	4c d1       	rcall	.+664    	; 0xe2a <__udivmodsi4>
     b92:	26 2f       	mov	r18, r22
     b94:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                    if ((time.min / 10) == indication.digit3)
     b98:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     b9c:	6a e0       	ldi	r22, 0x0A	; 10
     b9e:	25 d1       	rcall	.+586    	; 0xdea <__udivmodqi4>
     ba0:	82 13       	cpse	r24, r18
     ba2:	d4 cc       	rjmp	.-1624   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     baa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     bae:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     bb2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     bb6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     bba:	c8 cc       	rjmp	.-1648   	; 0x54c <main+0x10a>
                cad.updateStage = 1;
                cad.update = true;
            }
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <main+0x780>
     bc0:	44 cf       	rjmp	.-376    	; 0xa4a <main+0x608>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <main+0x786>
     bc6:	c2 cc       	rjmp	.-1660   	; 0x54c <main+0x10a>
                    if ((time.hour / 10) == indication.digit1)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 2:
                    indication.digit2 = (cad.counter / (1445 * 1 / 10)) % 10;
     bc8:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     bcc:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     bd0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     bd4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     bd8:	20 e9       	ldi	r18, 0x90	; 144
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	24 d1       	rcall	.+584    	; 0xe2a <__udivmodsi4>
     be2:	ca 01       	movw	r24, r20
     be4:	b9 01       	movw	r22, r18
     be6:	a5 01       	movw	r20, r10
     be8:	94 01       	movw	r18, r8
     bea:	1f d1       	rcall	.+574    	; 0xe2a <__udivmodsi4>
     bec:	26 2f       	mov	r18, r22
     bee:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication+0x1>
                    if ((time.hour % 10) == indication.digit2)
     bf2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     bf6:	6a e0       	ldi	r22, 0x0A	; 10
     bf8:	f8 d0       	rcall	.+496    	; 0xdea <__udivmodqi4>
     bfa:	92 13       	cpse	r25, r18
     bfc:	a7 cc       	rjmp	.-1714   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     c04:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     c08:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     c0c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     c10:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     c14:	9b cc       	rjmp	.-1738   	; 0x54c <main+0x10a>

00000c16 <arm_pid_f32>:
#include "PID.h"

float32_t arm_pid_f32(arm_pid_instance_f32 *S, float32_t in)
{
     c16:	4f 92       	push	r4
     c18:	5f 92       	push	r5
     c1a:	6f 92       	push	r6
     c1c:	7f 92       	push	r7
     c1e:	8f 92       	push	r8
     c20:	9f 92       	push	r9
     c22:	af 92       	push	r10
     c24:	bf 92       	push	r11
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	ec 01       	movw	r28, r24
     c34:	6a 01       	movw	r12, r20
     c36:	7b 01       	movw	r14, r22
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */
    out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
     c38:	8c 84       	ldd	r8, Y+12	; 0x0c
     c3a:	9d 84       	ldd	r9, Y+13	; 0x0d
     c3c:	ae 84       	ldd	r10, Y+14	; 0x0e
     c3e:	bf 84       	ldd	r11, Y+15	; 0x0f
     c40:	28 81       	ld	r18, Y
     c42:	39 81       	ldd	r19, Y+1	; 0x01
     c44:	4a 81       	ldd	r20, Y+2	; 0x02
     c46:	5b 81       	ldd	r21, Y+3	; 0x03
     c48:	cb 01       	movw	r24, r22
     c4a:	b6 01       	movw	r22, r12
     c4c:	5b d2       	rcall	.+1206   	; 0x1104 <__mulsf3>
     c4e:	2b 01       	movw	r4, r22
     c50:	3c 01       	movw	r6, r24
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	4e 81       	ldd	r20, Y+6	; 0x06
     c58:	5f 81       	ldd	r21, Y+7	; 0x07
     c5a:	c5 01       	movw	r24, r10
     c5c:	b4 01       	movw	r22, r8
     c5e:	52 d2       	rcall	.+1188   	; 0x1104 <__mulsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	c3 01       	movw	r24, r6
     c66:	b2 01       	movw	r22, r4
     c68:	03 d1       	rcall	.+518    	; 0xe70 <__addsf3>
     c6a:	2c 89       	ldd	r18, Y+20	; 0x14
     c6c:	3d 89       	ldd	r19, Y+21	; 0x15
     c6e:	4e 89       	ldd	r20, Y+22	; 0x16
     c70:	5f 89       	ldd	r21, Y+23	; 0x17
     c72:	fe d0       	rcall	.+508    	; 0xe70 <__addsf3>
     c74:	2b 01       	movw	r4, r22
     c76:	3c 01       	movw	r6, r24
     c78:	28 89       	ldd	r18, Y+16	; 0x10
     c7a:	39 89       	ldd	r19, Y+17	; 0x11
     c7c:	4a 89       	ldd	r20, Y+18	; 0x12
     c7e:	5b 89       	ldd	r21, Y+19	; 0x13
     c80:	68 85       	ldd	r22, Y+8	; 0x08
     c82:	79 85       	ldd	r23, Y+9	; 0x09
     c84:	8a 85       	ldd	r24, Y+10	; 0x0a
     c86:	9b 85       	ldd	r25, Y+11	; 0x0b
     c88:	3d d2       	rcall	.+1146   	; 0x1104 <__mulsf3>
     c8a:	9b 01       	movw	r18, r22
     c8c:	ac 01       	movw	r20, r24
     c8e:	c3 01       	movw	r24, r6
     c90:	b2 01       	movw	r22, r4
     c92:	ee d0       	rcall	.+476    	; 0xe70 <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
     c94:	88 8a       	std	Y+16, r8	; 0x10
     c96:	99 8a       	std	Y+17, r9	; 0x11
     c98:	aa 8a       	std	Y+18, r10	; 0x12
     c9a:	bb 8a       	std	Y+19, r11	; 0x13
    S->state[0] = in;
     c9c:	cc 86       	std	Y+12, r12	; 0x0c
     c9e:	dd 86       	std	Y+13, r13	; 0x0d
     ca0:	ee 86       	std	Y+14, r14	; 0x0e
     ca2:	ff 86       	std	Y+15, r15	; 0x0f
    S->state[2] = out;
     ca4:	6c 8b       	std	Y+20, r22	; 0x14
     ca6:	7d 8b       	std	Y+21, r23	; 0x15
     ca8:	8e 8b       	std	Y+22, r24	; 0x16
     caa:	9f 8b       	std	Y+23, r25	; 0x17

    /* return to application */
    return (out);
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	08 95       	ret

00000cca <arm_pid_init_f32>:

void arm_pid_init_f32(arm_pid_instance_f32 *S, int32_t resetStateFlag)
{
     cca:	4f 92       	push	r4
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
     ce8:	4a 01       	movw	r8, r20
     cea:	5b 01       	movw	r10, r22
    /* Derived coefficient A0 */
    S->A0 = S->Kp + S->Ki + S->Kd;
     cec:	48 8c       	ldd	r4, Y+24	; 0x18
     cee:	59 8c       	ldd	r5, Y+25	; 0x19
     cf0:	6a 8c       	ldd	r6, Y+26	; 0x1a
     cf2:	7b 8c       	ldd	r7, Y+27	; 0x1b
     cf4:	c8 a0       	ldd	r12, Y+32	; 0x20
     cf6:	d9 a0       	ldd	r13, Y+33	; 0x21
     cf8:	ea a0       	ldd	r14, Y+34	; 0x22
     cfa:	fb a0       	ldd	r15, Y+35	; 0x23
     cfc:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cfe:	3d 8d       	ldd	r19, Y+29	; 0x1d
     d00:	4e 8d       	ldd	r20, Y+30	; 0x1e
     d02:	5f 8d       	ldd	r21, Y+31	; 0x1f
     d04:	c3 01       	movw	r24, r6
     d06:	b2 01       	movw	r22, r4
     d08:	b3 d0       	rcall	.+358    	; 0xe70 <__addsf3>
     d0a:	a7 01       	movw	r20, r14
     d0c:	96 01       	movw	r18, r12
     d0e:	b0 d0       	rcall	.+352    	; 0xe70 <__addsf3>
     d10:	68 83       	st	Y, r22
     d12:	79 83       	std	Y+1, r23	; 0x01
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	9b 83       	std	Y+3, r25	; 0x03

    /* Derived coefficient A1 */
    S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
     d18:	a7 01       	movw	r20, r14
     d1a:	96 01       	movw	r18, r12
     d1c:	c7 01       	movw	r24, r14
     d1e:	b6 01       	movw	r22, r12
     d20:	a7 d0       	rcall	.+334    	; 0xe70 <__addsf3>
     d22:	a3 01       	movw	r20, r6
     d24:	92 01       	movw	r18, r4
     d26:	a4 d0       	rcall	.+328    	; 0xe70 <__addsf3>
     d28:	90 58       	subi	r25, 0x80	; 128
     d2a:	6c 83       	std	Y+4, r22	; 0x04
     d2c:	7d 83       	std	Y+5, r23	; 0x05
     d2e:	8e 83       	std	Y+6, r24	; 0x06
     d30:	9f 83       	std	Y+7, r25	; 0x07

    /* Derived coefficient A2 */
    S->A2 = S->Kd;
     d32:	c8 86       	std	Y+8, r12	; 0x08
     d34:	d9 86       	std	Y+9, r13	; 0x09
     d36:	ea 86       	std	Y+10, r14	; 0x0a
     d38:	fb 86       	std	Y+11, r15	; 0x0b

    /* Check whether state needs reset or not */
    if (resetStateFlag)
     d3a:	89 28       	or	r8, r9
     d3c:	8a 28       	or	r8, r10
     d3e:	8b 28       	or	r8, r11
     d40:	31 f0       	breq	.+12     	; 0xd4e <arm_pid_init_f32+0x84>
}

void arm_pid_reset_f32(arm_pid_instance_f32 *S)
{
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
     d42:	2c 96       	adiw	r28, 0x0c	; 12
     d44:	8c e0       	ldi	r24, 0x0C	; 12
     d46:	fe 01       	movw	r30, r28
     d48:	11 92       	st	Z+, r1
     d4a:	8a 95       	dec	r24
     d4c:	e9 f7       	brne	.-6      	; 0xd48 <arm_pid_init_f32+0x7e>
    S->A2 = S->Kd;

    /* Check whether state needs reset or not */
    if (resetStateFlag)
        arm_pid_reset_f32(S);
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	8f 90       	pop	r8
     d62:	7f 90       	pop	r7
     d64:	6f 90       	pop	r6
     d66:	5f 90       	pop	r5
     d68:	4f 90       	pop	r4
     d6a:	08 95       	ret

00000d6c <RTC_BCDtoDEC>:
#include "RTC.h"

uint8_t RTC_BCDtoDEC(uint8_t bcd)
{
    return ((bcd >> 4) * 10 + (0x0F & bcd));
     d6c:	28 2f       	mov	r18, r24
     d6e:	22 95       	swap	r18
     d70:	2f 70       	andi	r18, 0x0F	; 15
     d72:	92 2f       	mov	r25, r18
     d74:	99 0f       	add	r25, r25
     d76:	99 0f       	add	r25, r25
     d78:	92 0f       	add	r25, r18
     d7a:	99 0f       	add	r25, r25
     d7c:	8f 70       	andi	r24, 0x0F	; 15
}
     d7e:	89 0f       	add	r24, r25
     d80:	08 95       	ret

00000d82 <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t dec)
{
    return ((dec / 10) << 4) | (dec % 10);
     d82:	6a e0       	ldi	r22, 0x0A	; 10
     d84:	32 d0       	rcall	.+100    	; 0xdea <__udivmodqi4>
     d86:	82 95       	swap	r24
     d88:	80 7f       	andi	r24, 0xF0	; 240
     d8a:	89 2b       	or	r24, r25
     d8c:	08 95       	ret

00000d8e <TWI_Init>:
{
    TWI_Start();
    TWI_SendByte(addr);
    TWI_SendByte(byte);
    TWI_Stop();
}
     d8e:	88 e4       	ldi	r24, 0x48	; 72
     d90:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     d94:	08 95       	ret

00000d96 <TWI_Start>:
     d96:	84 ea       	ldi	r24, 0xA4	; 164
     d98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     da0:	87 ff       	sbrs	r24, 7
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <TWI_Start+0x6>
     da4:	08 95       	ret

00000da6 <TWI_Stop>:
     da6:	84 e9       	ldi	r24, 0x94	; 148
     da8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     dac:	08 95       	ret

00000dae <TWI_SendByte>:
     dae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     db2:	84 e8       	ldi	r24, 0x84	; 132
     db4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     db8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     dbc:	87 ff       	sbrs	r24, 7
     dbe:	fc cf       	rjmp	.-8      	; 0xdb8 <TWI_SendByte+0xa>
     dc0:	08 95       	ret

00000dc2 <TWI_ReadByte>:

uint8_t TWI_ReadByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     dc2:	84 ec       	ldi	r24, 0xC4	; 196
     dc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     dc8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     dcc:	87 ff       	sbrs	r24, 7
     dce:	fc cf       	rjmp	.-8      	; 0xdc8 <TWI_ReadByte+0x6>

    return TWDR;
     dd0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
     dd4:	08 95       	ret

00000dd6 <TWI_ReadLastByte>:

uint8_t TWI_ReadLastByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
     dd6:	84 e8       	ldi	r24, 0x84	; 132
     dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     ddc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     de0:	87 ff       	sbrs	r24, 7
     de2:	fc cf       	rjmp	.-8      	; 0xddc <TWI_ReadLastByte+0x6>

    return TWDR;
     de4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     de8:	08 95       	ret

00000dea <__udivmodqi4>:
     dea:	99 1b       	sub	r25, r25
     dec:	79 e0       	ldi	r23, 0x09	; 9
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__udivmodqi4_ep>

00000df0 <__udivmodqi4_loop>:
     df0:	99 1f       	adc	r25, r25
     df2:	96 17       	cp	r25, r22
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <__udivmodqi4_ep>
     df6:	96 1b       	sub	r25, r22

00000df8 <__udivmodqi4_ep>:
     df8:	88 1f       	adc	r24, r24
     dfa:	7a 95       	dec	r23
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__udivmodqi4_loop>
     dfe:	80 95       	com	r24
     e00:	08 95       	ret

00000e02 <__udivmodhi4>:
     e02:	aa 1b       	sub	r26, r26
     e04:	bb 1b       	sub	r27, r27
     e06:	51 e1       	ldi	r21, 0x11	; 17
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <__udivmodhi4_ep>

00000e0a <__udivmodhi4_loop>:
     e0a:	aa 1f       	adc	r26, r26
     e0c:	bb 1f       	adc	r27, r27
     e0e:	a6 17       	cp	r26, r22
     e10:	b7 07       	cpc	r27, r23
     e12:	10 f0       	brcs	.+4      	; 0xe18 <__udivmodhi4_ep>
     e14:	a6 1b       	sub	r26, r22
     e16:	b7 0b       	sbc	r27, r23

00000e18 <__udivmodhi4_ep>:
     e18:	88 1f       	adc	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	5a 95       	dec	r21
     e1e:	a9 f7       	brne	.-22     	; 0xe0a <__udivmodhi4_loop>
     e20:	80 95       	com	r24
     e22:	90 95       	com	r25
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	08 95       	ret

00000e2a <__udivmodsi4>:
     e2a:	a1 e2       	ldi	r26, 0x21	; 33
     e2c:	1a 2e       	mov	r1, r26
     e2e:	aa 1b       	sub	r26, r26
     e30:	bb 1b       	sub	r27, r27
     e32:	fd 01       	movw	r30, r26
     e34:	0d c0       	rjmp	.+26     	; 0xe50 <__udivmodsi4_ep>

00000e36 <__udivmodsi4_loop>:
     e36:	aa 1f       	adc	r26, r26
     e38:	bb 1f       	adc	r27, r27
     e3a:	ee 1f       	adc	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	a2 17       	cp	r26, r18
     e40:	b3 07       	cpc	r27, r19
     e42:	e4 07       	cpc	r30, r20
     e44:	f5 07       	cpc	r31, r21
     e46:	20 f0       	brcs	.+8      	; 0xe50 <__udivmodsi4_ep>
     e48:	a2 1b       	sub	r26, r18
     e4a:	b3 0b       	sbc	r27, r19
     e4c:	e4 0b       	sbc	r30, r20
     e4e:	f5 0b       	sbc	r31, r21

00000e50 <__udivmodsi4_ep>:
     e50:	66 1f       	adc	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	1a 94       	dec	r1
     e5a:	69 f7       	brne	.-38     	; 0xe36 <__udivmodsi4_loop>
     e5c:	60 95       	com	r22
     e5e:	70 95       	com	r23
     e60:	80 95       	com	r24
     e62:	90 95       	com	r25
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	bd 01       	movw	r22, r26
     e6a:	cf 01       	movw	r24, r30
     e6c:	08 95       	ret

00000e6e <__subsf3>:
     e6e:	50 58       	subi	r21, 0x80	; 128

00000e70 <__addsf3>:
     e70:	bb 27       	eor	r27, r27
     e72:	aa 27       	eor	r26, r26
     e74:	0e d0       	rcall	.+28     	; 0xe92 <__addsf3x>
     e76:	08 c1       	rjmp	.+528    	; 0x1088 <__fp_round>
     e78:	f9 d0       	rcall	.+498    	; 0x106c <__fp_pscA>
     e7a:	30 f0       	brcs	.+12     	; 0xe88 <__addsf3+0x18>
     e7c:	fe d0       	rcall	.+508    	; 0x107a <__fp_pscB>
     e7e:	20 f0       	brcs	.+8      	; 0xe88 <__addsf3+0x18>
     e80:	31 f4       	brne	.+12     	; 0xe8e <__addsf3+0x1e>
     e82:	9f 3f       	cpi	r25, 0xFF	; 255
     e84:	11 f4       	brne	.+4      	; 0xe8a <__addsf3+0x1a>
     e86:	1e f4       	brtc	.+6      	; 0xe8e <__addsf3+0x1e>
     e88:	ee c0       	rjmp	.+476    	; 0x1066 <__fp_nan>
     e8a:	0e f4       	brtc	.+2      	; 0xe8e <__addsf3+0x1e>
     e8c:	e0 95       	com	r30
     e8e:	e7 fb       	bst	r30, 7
     e90:	e4 c0       	rjmp	.+456    	; 0x105a <__fp_inf>

00000e92 <__addsf3x>:
     e92:	e9 2f       	mov	r30, r25
     e94:	0a d1       	rcall	.+532    	; 0x10aa <__fp_split3>
     e96:	80 f3       	brcs	.-32     	; 0xe78 <__addsf3+0x8>
     e98:	ba 17       	cp	r27, r26
     e9a:	62 07       	cpc	r22, r18
     e9c:	73 07       	cpc	r23, r19
     e9e:	84 07       	cpc	r24, r20
     ea0:	95 07       	cpc	r25, r21
     ea2:	18 f0       	brcs	.+6      	; 0xeaa <__addsf3x+0x18>
     ea4:	71 f4       	brne	.+28     	; 0xec2 <__addsf3x+0x30>
     ea6:	9e f5       	brtc	.+102    	; 0xf0e <__addsf3x+0x7c>
     ea8:	22 c1       	rjmp	.+580    	; 0x10ee <__fp_zero>
     eaa:	0e f4       	brtc	.+2      	; 0xeae <__addsf3x+0x1c>
     eac:	e0 95       	com	r30
     eae:	0b 2e       	mov	r0, r27
     eb0:	ba 2f       	mov	r27, r26
     eb2:	a0 2d       	mov	r26, r0
     eb4:	0b 01       	movw	r0, r22
     eb6:	b9 01       	movw	r22, r18
     eb8:	90 01       	movw	r18, r0
     eba:	0c 01       	movw	r0, r24
     ebc:	ca 01       	movw	r24, r20
     ebe:	a0 01       	movw	r20, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	ff 27       	eor	r31, r31
     ec4:	59 1b       	sub	r21, r25
     ec6:	99 f0       	breq	.+38     	; 0xeee <__addsf3x+0x5c>
     ec8:	59 3f       	cpi	r21, 0xF9	; 249
     eca:	50 f4       	brcc	.+20     	; 0xee0 <__addsf3x+0x4e>
     ecc:	50 3e       	cpi	r21, 0xE0	; 224
     ece:	68 f1       	brcs	.+90     	; 0xf2a <__addsf3x+0x98>
     ed0:	1a 16       	cp	r1, r26
     ed2:	f0 40       	sbci	r31, 0x00	; 0
     ed4:	a2 2f       	mov	r26, r18
     ed6:	23 2f       	mov	r18, r19
     ed8:	34 2f       	mov	r19, r20
     eda:	44 27       	eor	r20, r20
     edc:	58 5f       	subi	r21, 0xF8	; 248
     ede:	f3 cf       	rjmp	.-26     	; 0xec6 <__addsf3x+0x34>
     ee0:	46 95       	lsr	r20
     ee2:	37 95       	ror	r19
     ee4:	27 95       	ror	r18
     ee6:	a7 95       	ror	r26
     ee8:	f0 40       	sbci	r31, 0x00	; 0
     eea:	53 95       	inc	r21
     eec:	c9 f7       	brne	.-14     	; 0xee0 <__addsf3x+0x4e>
     eee:	7e f4       	brtc	.+30     	; 0xf0e <__addsf3x+0x7c>
     ef0:	1f 16       	cp	r1, r31
     ef2:	ba 0b       	sbc	r27, r26
     ef4:	62 0b       	sbc	r22, r18
     ef6:	73 0b       	sbc	r23, r19
     ef8:	84 0b       	sbc	r24, r20
     efa:	ba f0       	brmi	.+46     	; 0xf2a <__addsf3x+0x98>
     efc:	91 50       	subi	r25, 0x01	; 1
     efe:	a1 f0       	breq	.+40     	; 0xf28 <__addsf3x+0x96>
     f00:	ff 0f       	add	r31, r31
     f02:	bb 1f       	adc	r27, r27
     f04:	66 1f       	adc	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	c2 f7       	brpl	.-16     	; 0xefc <__addsf3x+0x6a>
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <__addsf3x+0x98>
     f0e:	ba 0f       	add	r27, r26
     f10:	62 1f       	adc	r22, r18
     f12:	73 1f       	adc	r23, r19
     f14:	84 1f       	adc	r24, r20
     f16:	48 f4       	brcc	.+18     	; 0xf2a <__addsf3x+0x98>
     f18:	87 95       	ror	r24
     f1a:	77 95       	ror	r23
     f1c:	67 95       	ror	r22
     f1e:	b7 95       	ror	r27
     f20:	f7 95       	ror	r31
     f22:	9e 3f       	cpi	r25, 0xFE	; 254
     f24:	08 f0       	brcs	.+2      	; 0xf28 <__addsf3x+0x96>
     f26:	b3 cf       	rjmp	.-154    	; 0xe8e <__addsf3+0x1e>
     f28:	93 95       	inc	r25
     f2a:	88 0f       	add	r24, r24
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <__addsf3x+0x9e>
     f2e:	99 27       	eor	r25, r25
     f30:	ee 0f       	add	r30, r30
     f32:	97 95       	ror	r25
     f34:	87 95       	ror	r24
     f36:	08 95       	ret

00000f38 <__cmpsf2>:
     f38:	6c d0       	rcall	.+216    	; 0x1012 <__fp_cmp>
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <__cmpsf2+0x6>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	08 95       	ret

00000f40 <__fixunssfsi>:
     f40:	bc d0       	rcall	.+376    	; 0x10ba <__fp_splitA>
     f42:	88 f0       	brcs	.+34     	; 0xf66 <__fixunssfsi+0x26>
     f44:	9f 57       	subi	r25, 0x7F	; 127
     f46:	90 f0       	brcs	.+36     	; 0xf6c <__fixunssfsi+0x2c>
     f48:	b9 2f       	mov	r27, r25
     f4a:	99 27       	eor	r25, r25
     f4c:	b7 51       	subi	r27, 0x17	; 23
     f4e:	a0 f0       	brcs	.+40     	; 0xf78 <__fixunssfsi+0x38>
     f50:	d1 f0       	breq	.+52     	; 0xf86 <__fixunssfsi+0x46>
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	88 1f       	adc	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	1a f0       	brmi	.+6      	; 0xf62 <__fixunssfsi+0x22>
     f5c:	ba 95       	dec	r27
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__fixunssfsi+0x12>
     f60:	12 c0       	rjmp	.+36     	; 0xf86 <__fixunssfsi+0x46>
     f62:	b1 30       	cpi	r27, 0x01	; 1
     f64:	81 f0       	breq	.+32     	; 0xf86 <__fixunssfsi+0x46>
     f66:	c3 d0       	rcall	.+390    	; 0x10ee <__fp_zero>
     f68:	b1 e0       	ldi	r27, 0x01	; 1
     f6a:	08 95       	ret
     f6c:	c0 c0       	rjmp	.+384    	; 0x10ee <__fp_zero>
     f6e:	67 2f       	mov	r22, r23
     f70:	78 2f       	mov	r23, r24
     f72:	88 27       	eor	r24, r24
     f74:	b8 5f       	subi	r27, 0xF8	; 248
     f76:	39 f0       	breq	.+14     	; 0xf86 <__fixunssfsi+0x46>
     f78:	b9 3f       	cpi	r27, 0xF9	; 249
     f7a:	cc f3       	brlt	.-14     	; 0xf6e <__fixunssfsi+0x2e>
     f7c:	86 95       	lsr	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b3 95       	inc	r27
     f84:	d9 f7       	brne	.-10     	; 0xf7c <__fixunssfsi+0x3c>
     f86:	3e f4       	brtc	.+14     	; 0xf96 <__fixunssfsi+0x56>
     f88:	90 95       	com	r25
     f8a:	80 95       	com	r24
     f8c:	70 95       	com	r23
     f8e:	61 95       	neg	r22
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	8f 4f       	sbci	r24, 0xFF	; 255
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	08 95       	ret

00000f98 <__floatunsisf>:
     f98:	e8 94       	clt
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <__floatsisf+0x12>

00000f9c <__floatsisf>:
     f9c:	97 fb       	bst	r25, 7
     f9e:	3e f4       	brtc	.+14     	; 0xfae <__floatsisf+0x12>
     fa0:	90 95       	com	r25
     fa2:	80 95       	com	r24
     fa4:	70 95       	com	r23
     fa6:	61 95       	neg	r22
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	99 23       	and	r25, r25
     fb0:	a9 f0       	breq	.+42     	; 0xfdc <__floatsisf+0x40>
     fb2:	f9 2f       	mov	r31, r25
     fb4:	96 e9       	ldi	r25, 0x96	; 150
     fb6:	bb 27       	eor	r27, r27
     fb8:	93 95       	inc	r25
     fba:	f6 95       	lsr	r31
     fbc:	87 95       	ror	r24
     fbe:	77 95       	ror	r23
     fc0:	67 95       	ror	r22
     fc2:	b7 95       	ror	r27
     fc4:	f1 11       	cpse	r31, r1
     fc6:	f8 cf       	rjmp	.-16     	; 0xfb8 <__floatsisf+0x1c>
     fc8:	fa f4       	brpl	.+62     	; 0x1008 <__floatsisf+0x6c>
     fca:	bb 0f       	add	r27, r27
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <__floatsisf+0x36>
     fce:	60 ff       	sbrs	r22, 0
     fd0:	1b c0       	rjmp	.+54     	; 0x1008 <__floatsisf+0x6c>
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <__floatsisf+0x6c>
     fdc:	88 23       	and	r24, r24
     fde:	11 f0       	breq	.+4      	; 0xfe4 <__floatsisf+0x48>
     fe0:	96 e9       	ldi	r25, 0x96	; 150
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <__floatsisf+0x6a>
     fe4:	77 23       	and	r23, r23
     fe6:	21 f0       	breq	.+8      	; 0xff0 <__floatsisf+0x54>
     fe8:	9e e8       	ldi	r25, 0x8E	; 142
     fea:	87 2f       	mov	r24, r23
     fec:	76 2f       	mov	r23, r22
     fee:	05 c0       	rjmp	.+10     	; 0xffa <__floatsisf+0x5e>
     ff0:	66 23       	and	r22, r22
     ff2:	71 f0       	breq	.+28     	; 0x1010 <__floatsisf+0x74>
     ff4:	96 e8       	ldi	r25, 0x86	; 134
     ff6:	86 2f       	mov	r24, r22
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	2a f0       	brmi	.+10     	; 0x1008 <__floatsisf+0x6c>
     ffe:	9a 95       	dec	r25
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	da f7       	brpl	.-10     	; 0xffe <__floatsisf+0x62>
    1008:	88 0f       	add	r24, r24
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__fp_cmp>:
    1012:	99 0f       	add	r25, r25
    1014:	00 08       	sbc	r0, r0
    1016:	55 0f       	add	r21, r21
    1018:	aa 0b       	sbc	r26, r26
    101a:	e0 e8       	ldi	r30, 0x80	; 128
    101c:	fe ef       	ldi	r31, 0xFE	; 254
    101e:	16 16       	cp	r1, r22
    1020:	17 06       	cpc	r1, r23
    1022:	e8 07       	cpc	r30, r24
    1024:	f9 07       	cpc	r31, r25
    1026:	c0 f0       	brcs	.+48     	; 0x1058 <__fp_cmp+0x46>
    1028:	12 16       	cp	r1, r18
    102a:	13 06       	cpc	r1, r19
    102c:	e4 07       	cpc	r30, r20
    102e:	f5 07       	cpc	r31, r21
    1030:	98 f0       	brcs	.+38     	; 0x1058 <__fp_cmp+0x46>
    1032:	62 1b       	sub	r22, r18
    1034:	73 0b       	sbc	r23, r19
    1036:	84 0b       	sbc	r24, r20
    1038:	95 0b       	sbc	r25, r21
    103a:	39 f4       	brne	.+14     	; 0x104a <__fp_cmp+0x38>
    103c:	0a 26       	eor	r0, r26
    103e:	61 f0       	breq	.+24     	; 0x1058 <__fp_cmp+0x46>
    1040:	23 2b       	or	r18, r19
    1042:	24 2b       	or	r18, r20
    1044:	25 2b       	or	r18, r21
    1046:	21 f4       	brne	.+8      	; 0x1050 <__fp_cmp+0x3e>
    1048:	08 95       	ret
    104a:	0a 26       	eor	r0, r26
    104c:	09 f4       	brne	.+2      	; 0x1050 <__fp_cmp+0x3e>
    104e:	a1 40       	sbci	r26, 0x01	; 1
    1050:	a6 95       	lsr	r26
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	81 1d       	adc	r24, r1
    1056:	81 1d       	adc	r24, r1
    1058:	08 95       	ret

0000105a <__fp_inf>:
    105a:	97 f9       	bld	r25, 7
    105c:	9f 67       	ori	r25, 0x7F	; 127
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	08 95       	ret

00001066 <__fp_nan>:
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	80 ec       	ldi	r24, 0xC0	; 192
    106a:	08 95       	ret

0000106c <__fp_pscA>:
    106c:	00 24       	eor	r0, r0
    106e:	0a 94       	dec	r0
    1070:	16 16       	cp	r1, r22
    1072:	17 06       	cpc	r1, r23
    1074:	18 06       	cpc	r1, r24
    1076:	09 06       	cpc	r0, r25
    1078:	08 95       	ret

0000107a <__fp_pscB>:
    107a:	00 24       	eor	r0, r0
    107c:	0a 94       	dec	r0
    107e:	12 16       	cp	r1, r18
    1080:	13 06       	cpc	r1, r19
    1082:	14 06       	cpc	r1, r20
    1084:	05 06       	cpc	r0, r21
    1086:	08 95       	ret

00001088 <__fp_round>:
    1088:	09 2e       	mov	r0, r25
    108a:	03 94       	inc	r0
    108c:	00 0c       	add	r0, r0
    108e:	11 f4       	brne	.+4      	; 0x1094 <__fp_round+0xc>
    1090:	88 23       	and	r24, r24
    1092:	52 f0       	brmi	.+20     	; 0x10a8 <__fp_round+0x20>
    1094:	bb 0f       	add	r27, r27
    1096:	40 f4       	brcc	.+16     	; 0x10a8 <__fp_round+0x20>
    1098:	bf 2b       	or	r27, r31
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__fp_round+0x18>
    109c:	60 ff       	sbrs	r22, 0
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__fp_round+0x20>
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8f 4f       	sbci	r24, 0xFF	; 255
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__fp_split3>:
    10aa:	57 fd       	sbrc	r21, 7
    10ac:	90 58       	subi	r25, 0x80	; 128
    10ae:	44 0f       	add	r20, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	59 f0       	breq	.+22     	; 0x10ca <__fp_splitA+0x10>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <__fp_splitA+0x1a>
    10b8:	47 95       	ror	r20

000010ba <__fp_splitA>:
    10ba:	88 0f       	add	r24, r24
    10bc:	97 fb       	bst	r25, 7
    10be:	99 1f       	adc	r25, r25
    10c0:	61 f0       	breq	.+24     	; 0x10da <__fp_splitA+0x20>
    10c2:	9f 3f       	cpi	r25, 0xFF	; 255
    10c4:	79 f0       	breq	.+30     	; 0x10e4 <__fp_splitA+0x2a>
    10c6:	87 95       	ror	r24
    10c8:	08 95       	ret
    10ca:	12 16       	cp	r1, r18
    10cc:	13 06       	cpc	r1, r19
    10ce:	14 06       	cpc	r1, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	f2 cf       	rjmp	.-28     	; 0x10b8 <__fp_split3+0xe>
    10d4:	46 95       	lsr	r20
    10d6:	f1 df       	rcall	.-30     	; 0x10ba <__fp_splitA>
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <__fp_splitA+0x30>
    10da:	16 16       	cp	r1, r22
    10dc:	17 06       	cpc	r1, r23
    10de:	18 06       	cpc	r1, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	f1 cf       	rjmp	.-30     	; 0x10c6 <__fp_splitA+0xc>
    10e4:	86 95       	lsr	r24
    10e6:	71 05       	cpc	r23, r1
    10e8:	61 05       	cpc	r22, r1
    10ea:	08 94       	sec
    10ec:	08 95       	ret

000010ee <__fp_zero>:
    10ee:	e8 94       	clt

000010f0 <__fp_szero>:
    10f0:	bb 27       	eor	r27, r27
    10f2:	66 27       	eor	r22, r22
    10f4:	77 27       	eor	r23, r23
    10f6:	cb 01       	movw	r24, r22
    10f8:	97 f9       	bld	r25, 7
    10fa:	08 95       	ret

000010fc <__gesf2>:
    10fc:	8a df       	rcall	.-236    	; 0x1012 <__fp_cmp>
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <__gesf2+0x6>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	08 95       	ret

00001104 <__mulsf3>:
    1104:	0a d0       	rcall	.+20     	; 0x111a <__mulsf3x>
    1106:	c0 cf       	rjmp	.-128    	; 0x1088 <__fp_round>
    1108:	b1 df       	rcall	.-158    	; 0x106c <__fp_pscA>
    110a:	28 f0       	brcs	.+10     	; 0x1116 <__mulsf3+0x12>
    110c:	b6 df       	rcall	.-148    	; 0x107a <__fp_pscB>
    110e:	18 f0       	brcs	.+6      	; 0x1116 <__mulsf3+0x12>
    1110:	95 23       	and	r25, r21
    1112:	09 f0       	breq	.+2      	; 0x1116 <__mulsf3+0x12>
    1114:	a2 cf       	rjmp	.-188    	; 0x105a <__fp_inf>
    1116:	a7 cf       	rjmp	.-178    	; 0x1066 <__fp_nan>
    1118:	eb cf       	rjmp	.-42     	; 0x10f0 <__fp_szero>

0000111a <__mulsf3x>:
    111a:	c7 df       	rcall	.-114    	; 0x10aa <__fp_split3>
    111c:	a8 f3       	brcs	.-22     	; 0x1108 <__mulsf3+0x4>

0000111e <__mulsf3_pse>:
    111e:	99 23       	and	r25, r25
    1120:	d9 f3       	breq	.-10     	; 0x1118 <__mulsf3+0x14>
    1122:	55 23       	and	r21, r21
    1124:	c9 f3       	breq	.-14     	; 0x1118 <__mulsf3+0x14>
    1126:	95 0f       	add	r25, r21
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	55 1f       	adc	r21, r21
    112c:	aa 27       	eor	r26, r26
    112e:	ee 27       	eor	r30, r30
    1130:	ff 27       	eor	r31, r31
    1132:	bb 27       	eor	r27, r27
    1134:	00 24       	eor	r0, r0
    1136:	08 94       	sec
    1138:	67 95       	ror	r22
    113a:	20 f4       	brcc	.+8      	; 0x1144 <__mulsf3_pse+0x26>
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	b4 1f       	adc	r27, r20
    1142:	0a 1e       	adc	r0, r26
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	44 1f       	adc	r20, r20
    114a:	aa 1f       	adc	r26, r26
    114c:	66 95       	lsr	r22
    114e:	a9 f7       	brne	.-22     	; 0x113a <__mulsf3_pse+0x1c>
    1150:	77 95       	ror	r23
    1152:	30 f4       	brcc	.+12     	; 0x1160 <__mulsf3_pse+0x42>
    1154:	f3 0f       	add	r31, r19
    1156:	b4 1f       	adc	r27, r20
    1158:	0a 1e       	adc	r0, r26
    115a:	12 1e       	adc	r1, r18
    115c:	08 f4       	brcc	.+2      	; 0x1160 <__mulsf3_pse+0x42>
    115e:	63 95       	inc	r22
    1160:	33 0f       	add	r19, r19
    1162:	44 1f       	adc	r20, r20
    1164:	aa 1f       	adc	r26, r26
    1166:	22 1f       	adc	r18, r18
    1168:	76 95       	lsr	r23
    116a:	99 f7       	brne	.-26     	; 0x1152 <__mulsf3_pse+0x34>
    116c:	87 95       	ror	r24
    116e:	20 f4       	brcc	.+8      	; 0x1178 <__mulsf3_pse+0x5a>
    1170:	b4 0f       	add	r27, r20
    1172:	0a 1e       	adc	r0, r26
    1174:	12 1e       	adc	r1, r18
    1176:	63 1f       	adc	r22, r19
    1178:	44 0f       	add	r20, r20
    117a:	aa 1f       	adc	r26, r26
    117c:	22 1f       	adc	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	86 95       	lsr	r24
    1182:	a9 f7       	brne	.-22     	; 0x116e <__mulsf3_pse+0x50>
    1184:	86 2f       	mov	r24, r22
    1186:	71 2d       	mov	r23, r1
    1188:	60 2d       	mov	r22, r0
    118a:	11 24       	eor	r1, r1
    118c:	9f 57       	subi	r25, 0x7F	; 127
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	8a f0       	brmi	.+34     	; 0x11b4 <__mulsf3_pse+0x96>
    1192:	e1 f0       	breq	.+56     	; 0x11cc <__mulsf3_pse+0xae>
    1194:	88 23       	and	r24, r24
    1196:	4a f0       	brmi	.+18     	; 0x11aa <__mulsf3_pse+0x8c>
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	bb 1f       	adc	r27, r27
    119e:	66 1f       	adc	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	91 50       	subi	r25, 0x01	; 1
    11a6:	50 40       	sbci	r21, 0x00	; 0
    11a8:	a9 f7       	brne	.-22     	; 0x1194 <__mulsf3_pse+0x76>
    11aa:	9e 3f       	cpi	r25, 0xFE	; 254
    11ac:	51 05       	cpc	r21, r1
    11ae:	70 f0       	brcs	.+28     	; 0x11cc <__mulsf3_pse+0xae>
    11b0:	54 cf       	rjmp	.-344    	; 0x105a <__fp_inf>
    11b2:	9e cf       	rjmp	.-196    	; 0x10f0 <__fp_szero>
    11b4:	5f 3f       	cpi	r21, 0xFF	; 255
    11b6:	ec f3       	brlt	.-6      	; 0x11b2 <__mulsf3_pse+0x94>
    11b8:	98 3e       	cpi	r25, 0xE8	; 232
    11ba:	dc f3       	brlt	.-10     	; 0x11b2 <__mulsf3_pse+0x94>
    11bc:	86 95       	lsr	r24
    11be:	77 95       	ror	r23
    11c0:	67 95       	ror	r22
    11c2:	b7 95       	ror	r27
    11c4:	f7 95       	ror	r31
    11c6:	e7 95       	ror	r30
    11c8:	9f 5f       	subi	r25, 0xFF	; 255
    11ca:	c1 f7       	brne	.-16     	; 0x11bc <__mulsf3_pse+0x9e>
    11cc:	fe 2b       	or	r31, r30
    11ce:	88 0f       	add	r24, r24
    11d0:	91 1d       	adc	r25, r1
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	97 f9       	bld	r25, 7
    11d8:	08 95       	ret

000011da <_exit>:
    11da:	f8 94       	cli

000011dc <__stop_program>:
    11dc:	ff cf       	rjmp	.-2      	; 0x11dc <__stop_program>
