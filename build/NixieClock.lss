
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000101a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800100  00800100  0000101a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001afb  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  00002ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d20  00000000  00000000  00003801  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000750  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2d  00000000  00000000  00004fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005bf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	25 c0       	rjmp	.+74     	; 0x64 <__vector_12>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	8c c1       	rjmp	.+792    	; 0x33a <__vector_16>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	af 35       	cpi	r26, 0x5F	; 95
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	06 d2       	rcall	.+1036   	; 0x452 <main>
  46:	ad c7       	rjmp	.+3930   	; 0xfa2 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <IO_Init>:

void SoftTurnoff(void)
{
    if ((indication.isTurnedOff) && (voltage.pid.setPoint > 0.0))
        voltage.pid.setPoint -= 0.005;
}
  4a:	8d b1       	in	r24, 0x0d	; 13
  4c:	8c e0       	ldi	r24, 0x0C	; 12
  4e:	8d b9       	out	0x0d, r24	; 13
  50:	1e b8       	out	0x0e, r1	; 14
  52:	68 98       	cbi	0x0d, 0	; 13
  54:	70 9a       	sbi	0x0e, 0	; 14
  56:	22 9a       	sbi	0x04, 2	; 4
  58:	15 b8       	out	0x05, r1	; 5
  5a:	8a b1       	in	r24, 0x0a	; 10
  5c:	8e ef       	ldi	r24, 0xFE	; 254
  5e:	8a b9       	out	0x0a, r24	; 10
  60:	1b b8       	out	0x0b, r1	; 11
  62:	08 95       	ret

00000064 <__vector_12>:

ISR(TIMER0_COMPA_vect)
{
  64:	1f 92       	push	r1
  66:	0f 92       	push	r0
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	0f 92       	push	r0
  6c:	11 24       	eor	r1, r1
  6e:	2f 93       	push	r18
  70:	5f 93       	push	r21
  72:	6f 93       	push	r22
  74:	7f 93       	push	r23
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
  7a:	af 93       	push	r26
  7c:	bf 93       	push	r27
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	ef 93       	push	r30
  84:	ff 93       	push	r31
    if (!indication.pause)
  86:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <indication+0x6>
  8a:	81 11       	cpse	r24, r1
  8c:	30 c0       	rjmp	.+96     	; 0xee <__vector_12+0x8a>
    {
        if (indication.dispMode == DISPLAY_TIME)
  8e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x5>
  92:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <indication+0x4>
  96:	81 11       	cpse	r24, r1
  98:	14 c0       	rjmp	.+40     	; 0xc2 <__vector_12+0x5e>
        {
            switch (indication.counter)
  9a:	ef ef       	ldi	r30, 0xFF	; 255
  9c:	e2 0f       	add	r30, r18
  9e:	ec 30       	cpi	r30, 0x0C	; 12
  a0:	a8 f4       	brcc	.+42     	; 0xcc <__vector_12+0x68>
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	eb 5a       	subi	r30, 0xAB	; 171
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	09 94       	ijmp
  aa:	af c0       	rjmp	.+350    	; 0x20a <__DATA_REGION_LENGTH__+0xa>
  ac:	48 c0       	rjmp	.+144    	; 0x13e <__vector_12+0xda>
  ae:	99 c0       	rjmp	.+306    	; 0x1e2 <__vector_12+0x17e>
  b0:	46 c0       	rjmp	.+140    	; 0x13e <__vector_12+0xda>
  b2:	73 c0       	rjmp	.+230    	; 0x19a <__vector_12+0x136>
  b4:	44 c0       	rjmp	.+136    	; 0x13e <__vector_12+0xda>
  b6:	62 c0       	rjmp	.+196    	; 0x17c <__vector_12+0x118>
  b8:	42 c0       	rjmp	.+132    	; 0x13e <__vector_12+0xda>
  ba:	81 c0       	rjmp	.+258    	; 0x1be <__vector_12+0x15a>
  bc:	40 c0       	rjmp	.+128    	; 0x13e <__vector_12+0xda>
  be:	9b c0       	rjmp	.+310    	; 0x1f6 <__vector_12+0x192>
  c0:	3e c0       	rjmp	.+124    	; 0x13e <__vector_12+0xda>
                Display_DeadTime();
                break;
            }
        }

        if (indication.dispMode == DISPLAY_TEMPERATURE)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	49 f1       	breq	.+82     	; 0x118 <__vector_12+0xb4>
            case 12:
                break;
            }
        }

        if (indication.dispMode == DISPLAY_CAD)
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	09 f4       	brne	.+2      	; 0xcc <__vector_12+0x68>
  ca:	3e c0       	rjmp	.+124    	; 0x148 <__vector_12+0xe4>
            case 12:
                Display_DeadTime();
                break;
            }
        }
        if (++indication.counter > 12)
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	2d 30       	cpi	r18, 0x0D	; 13
  d0:	f8 f4       	brcc	.+62     	; 0x110 <__vector_12+0xac>
  d2:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <indication+0x4>
            indication.counter = 1;
        ++cad.counter;
  d6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
  da:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <cad+0x7>
  e4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <cad+0x6>
        voltage.pid.run = true;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <voltage+0x3d>
    }
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti
                Display_DeadTime();
                break;
            }
        }
        if (++indication.counter > 12)
            indication.counter = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication+0x4>
 116:	df cf       	rjmp	.-66     	; 0xd6 <__vector_12+0x72>
            }
        }

        if (indication.dispMode == DISPLAY_TEMPERATURE)
        {
            switch (indication.counter)
 118:	ef ef       	ldi	r30, 0xFF	; 255
 11a:	e2 0f       	add	r30, r18
 11c:	eb 30       	cpi	r30, 0x0B	; 11
 11e:	b0 f6       	brcc	.-84     	; 0xcc <__vector_12+0x68>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ec 56       	subi	r30, 0x6C	; 108
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	09 94       	ijmp
 128:	a2 c0       	rjmp	.+324    	; 0x26e <__DATA_REGION_LENGTH__+0x6e>
 12a:	09 c0       	rjmp	.+18     	; 0x13e <__vector_12+0xda>
 12c:	cf cf       	rjmp	.-98     	; 0xcc <__vector_12+0x68>
 12e:	7f c0       	rjmp	.+254    	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
 130:	06 c0       	rjmp	.+12     	; 0x13e <__vector_12+0xda>
 132:	cc cf       	rjmp	.-104    	; 0xcc <__vector_12+0x68>
 134:	91 c0       	rjmp	.+290    	; 0x258 <__DATA_REGION_LENGTH__+0x58>
 136:	03 c0       	rjmp	.+6      	; 0x13e <__vector_12+0xda>
 138:	c9 cf       	rjmp	.-110    	; 0xcc <__vector_12+0x68>
 13a:	84 c0       	rjmp	.+264    	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_12+0xda>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	81 70       	andi	r24, 0x01	; 1
 142:	88 61       	ori	r24, 0x18	; 24
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c2 cf       	rjmp	.-124    	; 0xcc <__vector_12+0x68>
            }
        }

        if (indication.dispMode == DISPLAY_CAD)
        {
            switch (indication.counter)
 148:	ef ef       	ldi	r30, 0xFF	; 255
 14a:	e2 0f       	add	r30, r18
 14c:	ec 30       	cpi	r30, 0x0C	; 12
 14e:	08 f0       	brcs	.+2      	; 0x152 <__vector_12+0xee>
 150:	bd cf       	rjmp	.-134    	; 0xcc <__vector_12+0x68>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e2 55       	subi	r30, 0x52	; 82
 156:	ff 4f       	sbci	r31, 0xFF	; 255
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
 158:	8b b1       	in	r24, 0x0b	; 11
            }
        }

        if (indication.dispMode == DISPLAY_CAD)
        {
            switch (indication.counter)
 15a:	09 94       	ijmp
 15c:	d7 c0       	rjmp	.+430    	; 0x30c <__stack+0xd>
 15e:	0a c0       	rjmp	.+20     	; 0x174 <__vector_12+0x110>
 160:	c3 c0       	rjmp	.+390    	; 0x2e8 <__DATA_REGION_LENGTH__+0xe8>
 162:	08 c0       	rjmp	.+16     	; 0x174 <__vector_12+0x110>
 164:	af c0       	rjmp	.+350    	; 0x2c4 <__DATA_REGION_LENGTH__+0xc4>
 166:	06 c0       	rjmp	.+12     	; 0x174 <__vector_12+0x110>
 168:	a4 c0       	rjmp	.+328    	; 0x2b2 <__DATA_REGION_LENGTH__+0xb2>
 16a:	04 c0       	rjmp	.+8      	; 0x174 <__vector_12+0x110>
 16c:	b4 c0       	rjmp	.+360    	; 0x2d6 <__DATA_REGION_LENGTH__+0xd6>
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_12+0x110>
 170:	c4 c0       	rjmp	.+392    	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
 172:	00 c0       	rjmp	.+0      	; 0x174 <__vector_12+0x110>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
 174:	81 70       	andi	r24, 0x01	; 1
 176:	88 61       	ori	r24, 0x18	; 24
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	a8 cf       	rjmp	.-176    	; 0xcc <__vector_12+0x68>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8f 71       	andi	r24, 0x1F	; 31
 180:	80 68       	ori	r24, 0x80	; 128
 182:	8b b9       	out	0x0b, r24	; 11
            case 6:
                Display_DeadTime();
                break;
            case 7:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit2);
 184:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 188:	8a 30       	cpi	r24, 0x0A	; 10
 18a:	08 f0       	brcs	.+2      	; 0x18e <__vector_12+0x12a>
 18c:	9f cf       	rjmp	.-194    	; 0xcc <__vector_12+0x68>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	91 7e       	andi	r25, 0xE1	; 225
 192:	88 0f       	add	r24, r24
 194:	89 2b       	or	r24, r25
 196:	8b b9       	out	0x0b, r24	; 11
 198:	99 cf       	rjmp	.-206    	; 0xcc <__vector_12+0x68>
                break;
            case 4:
                Display_DeadTime();
                break;
            case 5:
                TimeToDigit(time.min);
 19a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <time+0x1>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	08 d5       	rcall	.+2576   	; 0xbb2 <__udivmodqi4>
 1a2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <indication>
    indication.digit2 = number % 10;
 1a6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8f 71       	andi	r24, 0x1F	; 31
 1ae:	80 66       	ori	r24, 0x60	; 96
 1b0:	8b b9       	out	0x0b, r24	; 11
            switch (indication.counter)
            {
            case 1:
                TemperatureToDigit(temperature.value);
                AnodeSwitch(3u);
                CathodeSwitch(indication.digit1);
 1b2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <__vector_12+0x158>
 1ba:	88 cf       	rjmp	.-240    	; 0xcc <__vector_12+0x68>
 1bc:	e8 cf       	rjmp	.-48     	; 0x18e <__vector_12+0x12a>
                break;
            case 8:
                Display_DeadTime();
                break;
            case 9:
                TimeToDigit(time.sec);
 1be:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
 1c2:	6a e0       	ldi	r22, 0x0A	; 10
 1c4:	f6 d4       	rcall	.+2540   	; 0xbb2 <__udivmodqi4>
 1c6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <indication>
    indication.digit2 = number % 10;
 1ca:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 71       	andi	r24, 0x1F	; 31
 1d2:	80 6a       	ori	r24, 0xA0	; 160
 1d4:	8b b9       	out	0x0b, r24	; 11
                Display_DeadTime();
                break;
            case 9:
                TimeToDigit(time.sec);
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit1);
 1d6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 1da:	8a 30       	cpi	r24, 0x0A	; 10
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__vector_12+0x17c>
 1de:	76 cf       	rjmp	.-276    	; 0xcc <__vector_12+0x68>
 1e0:	d6 cf       	rjmp	.-84     	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	8f 71       	andi	r24, 0x1F	; 31
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	8b b9       	out	0x0b, r24	; 11
            case 2:
                Display_DeadTime();
                break;
            case 3:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit2);
 1ea:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 1ee:	8a 30       	cpi	r24, 0x0A	; 10
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <__vector_12+0x190>
 1f2:	6c cf       	rjmp	.-296    	; 0xcc <__vector_12+0x68>
 1f4:	cc cf       	rjmp	.-104    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	8f 71       	andi	r24, 0x1F	; 31
 1fa:	80 6c       	ori	r24, 0xC0	; 192
 1fc:	8b b9       	out	0x0b, r24	; 11
            case 10:
                Display_DeadTime();
                break;
            case 11:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit2);
 1fe:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 202:	8a 30       	cpi	r24, 0x0A	; 10
 204:	08 f0       	brcs	.+2      	; 0x208 <__DATA_REGION_LENGTH__+0x8>
 206:	62 cf       	rjmp	.-316    	; 0xcc <__vector_12+0x68>
 208:	c2 cf       	rjmp	.-124    	; 0x18e <__vector_12+0x12a>
        if (indication.dispMode == DISPLAY_TIME)
        {
            switch (indication.counter)
            {
            case 1:
                TimeToDigit(time.hour);
 20a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time+0x2>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	d0 d4       	rcall	.+2464   	; 0xbb2 <__udivmodqi4>
 212:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <indication>
    indication.digit2 = number % 10;
 216:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 71       	andi	r24, 0x1F	; 31
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	8b b9       	out	0x0b, r24	; 11
            switch (indication.counter)
            {
            case 1:
                TimeToDigit(time.hour);
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(indication.digit1);
 222:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 226:	8a 30       	cpi	r24, 0x0A	; 10
 228:	08 f0       	brcs	.+2      	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
 22a:	50 cf       	rjmp	.-352    	; 0xcc <__vector_12+0x68>
 22c:	b0 cf       	rjmp	.-160    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	8f 71       	andi	r24, 0x1F	; 31
 232:	80 68       	ori	r24, 0x80	; 128
 234:	8b b9       	out	0x0b, r24	; 11
                break;
            case 3:
                break;
            case 4:
                AnodeSwitch(4u);
                CathodeSwitch(indication.digit2);
 236:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 23a:	8a 30       	cpi	r24, 0x0A	; 10
 23c:	08 f4       	brcc	.+2      	; 0x240 <__DATA_REGION_LENGTH__+0x40>
 23e:	76 c0       	rjmp	.+236    	; 0x32c <__stack+0x2d>
            case 3:
                break;
            case 4:
                AnodeSwitch(4u);
                CathodeSwitch(indication.digit2);
                SET_BIT(PORTA, 1 << 3); // RDP turn on
 240:	73 9a       	sbi	0x0e, 3	; 14
                break;
 242:	44 cf       	rjmp	.-376    	; 0xcc <__vector_12+0x68>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8f 71       	andi	r24, 0x1F	; 31
 248:	80 6c       	ori	r24, 0xC0	; 192
 24a:	8b b9       	out	0x0b, r24	; 11
                break;
            case 9:
                break;
            case 10:
                AnodeSwitch(6u);
                CathodeSwitch(indication.digit4);
 24c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x3>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 250:	8a 30       	cpi	r24, 0x0A	; 10
 252:	08 f0       	brcs	.+2      	; 0x256 <__DATA_REGION_LENGTH__+0x56>
 254:	3b cf       	rjmp	.-394    	; 0xcc <__vector_12+0x68>
 256:	9b cf       	rjmp	.-202    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	8f 71       	andi	r24, 0x1F	; 31
 25c:	80 6a       	ori	r24, 0xA0	; 160
 25e:	8b b9       	out	0x0b, r24	; 11
                break;
            case 6:
                break;
            case 7:
                AnodeSwitch(5u);
                CathodeSwitch(indication.digit3);
 260:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x2>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	08 f4       	brcc	.+2      	; 0x26a <__DATA_REGION_LENGTH__+0x6a>
 268:	5a c0       	rjmp	.+180    	; 0x31e <__stack+0x1f>
            case 6:
                break;
            case 7:
                AnodeSwitch(5u);
                CathodeSwitch(indication.digit3);
                CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
 26a:	73 98       	cbi	0x0e, 3	; 14
                break;
 26c:	2f cf       	rjmp	.-418    	; 0xcc <__vector_12+0x68>
        if (indication.dispMode == DISPLAY_TEMPERATURE)
        {
            switch (indication.counter)
            {
            case 1:
                TemperatureToDigit(temperature.value);
 26e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <temperature>
 272:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <temperature+0x1>
    indication.digit2 = number % 10;
}

void TemperatureToDigit(uint16_t temperature)
{
    indication.digit1 = temperature / 10000;
 276:	cf 01       	movw	r24, r30
 278:	60 e1       	ldi	r22, 0x10	; 16
 27a:	77 e2       	ldi	r23, 0x27	; 39
 27c:	a6 d4       	rcall	.+2380   	; 0xbca <__udivmodhi4>
 27e:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication>
    indication.digit2 = (temperature % 10000) / 1000;
 282:	c8 ee       	ldi	r28, 0xE8	; 232
 284:	d3 e0       	ldi	r29, 0x03	; 3
 286:	be 01       	movw	r22, r28
 288:	a0 d4       	rcall	.+2368   	; 0xbca <__udivmodhi4>
 28a:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x1>
    indication.digit3 = (temperature % 1000) / 100;
 28e:	cf 01       	movw	r24, r30
 290:	be 01       	movw	r22, r28
 292:	9b d4       	rcall	.+2358   	; 0xbca <__udivmodhi4>
 294:	c4 e6       	ldi	r28, 0x64	; 100
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	be 01       	movw	r22, r28
 29a:	97 d4       	rcall	.+2350   	; 0xbca <__udivmodhi4>
 29c:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x2>
    indication.digit4 = (temperature % 100) / 10;
 2a0:	cf 01       	movw	r24, r30
 2a2:	be 01       	movw	r22, r28
 2a4:	92 d4       	rcall	.+2340   	; 0xbca <__udivmodhi4>
 2a6:	6a e0       	ldi	r22, 0x0A	; 10
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	8f d4       	rcall	.+2334   	; 0xbca <__udivmodhi4>
 2ac:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x3>
 2b0:	7c cf       	rjmp	.-264    	; 0x1aa <__vector_12+0x146>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 2b2:	8f 71       	andi	r24, 0x1F	; 31
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	8b b9       	out	0x0b, r24	; 11
            case 6:
                Display_DeadTime();
                break;
            case 7:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit4);
 2b8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cad+0x3>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 2bc:	8a 30       	cpi	r24, 0x0A	; 10
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <__DATA_REGION_LENGTH__+0xc2>
 2c0:	05 cf       	rjmp	.-502    	; 0xcc <__vector_12+0x68>
 2c2:	65 cf       	rjmp	.-310    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 2c4:	8f 71       	andi	r24, 0x1F	; 31
 2c6:	80 66       	ori	r24, 0x60	; 96
 2c8:	8b b9       	out	0x0b, r24	; 11
            case 4:
                Display_DeadTime();
                break;
            case 5:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit3);
 2ca:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 2ce:	8a 30       	cpi	r24, 0x0A	; 10
 2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__DATA_REGION_LENGTH__+0xd4>
 2d2:	fc ce       	rjmp	.-520    	; 0xcc <__vector_12+0x68>
 2d4:	5c cf       	rjmp	.-328    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 2d6:	8f 71       	andi	r24, 0x1F	; 31
 2d8:	80 6a       	ori	r24, 0xA0	; 160
 2da:	8b b9       	out	0x0b, r24	; 11
            case 8:
                Display_DeadTime();
                break;
            case 9:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit5);
 2dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cad+0x4>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 2e0:	8a 30       	cpi	r24, 0x0A	; 10
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
 2e4:	f3 ce       	rjmp	.-538    	; 0xcc <__vector_12+0x68>
 2e6:	53 cf       	rjmp	.-346    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 2e8:	8f 71       	andi	r24, 0x1F	; 31
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	8b b9       	out	0x0b, r24	; 11
            case 2:
                Display_DeadTime();
                break;
            case 3:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit2);
 2ee:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cad+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 2f2:	8a 30       	cpi	r24, 0x0A	; 10
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <__DATA_REGION_LENGTH__+0xf8>
 2f6:	ea ce       	rjmp	.-556    	; 0xcc <__vector_12+0x68>
 2f8:	4a cf       	rjmp	.-364    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 2fa:	8f 71       	andi	r24, 0x1F	; 31
 2fc:	80 6c       	ori	r24, 0xC0	; 192
 2fe:	8b b9       	out	0x0b, r24	; 11
            case 10:
                Display_DeadTime();
                break;
            case 11:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit6);
 300:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 304:	8a 30       	cpi	r24, 0x0A	; 10
 306:	08 f0       	brcs	.+2      	; 0x30a <__stack+0xb>
 308:	e1 ce       	rjmp	.-574    	; 0xcc <__vector_12+0x68>
 30a:	41 cf       	rjmp	.-382    	; 0x18e <__vector_12+0x12a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
 30c:	8f 71       	andi	r24, 0x1F	; 31
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	8b b9       	out	0x0b, r24	; 11
        {
            switch (indication.counter)
            {
            case 1:
                AnodeSwitch((indication.counter + 1) / 2);
                CathodeSwitch(cad.digit1);
 312:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cad>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
 316:	8a 30       	cpi	r24, 0x0A	; 10
 318:	08 f0       	brcs	.+2      	; 0x31c <__stack+0x1d>
 31a:	d8 ce       	rjmp	.-592    	; 0xcc <__vector_12+0x68>
 31c:	38 cf       	rjmp	.-400    	; 0x18e <__vector_12+0x12a>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
 31e:	9b b1       	in	r25, 0x0b	; 11
 320:	91 7e       	andi	r25, 0xE1	; 225
 322:	88 0f       	add	r24, r24
 324:	89 2b       	or	r24, r25
 326:	8b b9       	out	0x0b, r24	; 11
            case 6:
                break;
            case 7:
                AnodeSwitch(5u);
                CathodeSwitch(indication.digit3);
                CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
 328:	73 98       	cbi	0x0e, 3	; 14
 32a:	d0 ce       	rjmp	.-608    	; 0xcc <__vector_12+0x68>
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
 32c:	9b b1       	in	r25, 0x0b	; 11
 32e:	91 7e       	andi	r25, 0xE1	; 225
 330:	88 0f       	add	r24, r24
 332:	89 2b       	or	r24, r25
 334:	8b b9       	out	0x0b, r24	; 11
            case 3:
                break;
            case 4:
                AnodeSwitch(4u);
                CathodeSwitch(indication.digit2);
                SET_BIT(PORTA, 1 << 3); // RDP turn on
 336:	73 9a       	sbi	0x0e, 3	; 14
 338:	c9 ce       	rjmp	.-622    	; 0xcc <__vector_12+0x68>

0000033a <__vector_16>:
        voltage.pid.run = true;
    }
}

ISR(ADC_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
    if (voltage.adc.counter < ADC_SAMPLES) // Get ADC_sum by x samples
 35c:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <voltage+0x10>
 360:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <voltage+0xc>
 364:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <voltage+0xd>
 368:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <voltage+0xe>
 36c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <voltage+0xf>
 370:	e4 31       	cpi	r30, 0x14	; 20
 372:	d0 f5       	brcc	.+116    	; 0x3e8 <__vector_16+0xae>
    {
        voltage.adc.sum += ADC;
 374:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 378:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 37c:	ab 01       	movw	r20, r22
 37e:	bc 01       	movw	r22, r24
 380:	42 0f       	add	r20, r18
 382:	53 1f       	adc	r21, r19
 384:	61 1d       	adc	r22, r1
 386:	71 1d       	adc	r23, r1
 388:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <voltage+0xc>
 38c:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <voltage+0xd>
 390:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <voltage+0xe>
 394:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <voltage+0xf>
        ++voltage.adc.counter;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	8e 0f       	add	r24, r30
 39c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <voltage+0x10>
 3a0:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <voltage+0x4>
 3a4:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <voltage+0x5>
 3a8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <voltage+0x6>
 3ac:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <voltage+0x7>
        voltage.adc.value = (voltage.adc.mean * VREF) / 0x3FF;
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
        voltage.adc.sum = 0;
        voltage.adc.counter = 0;
    }
    if (voltage.adc.valueScaled > 200.0)
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	48 e4       	ldi	r20, 0x48	; 72
 3b6:	53 e4       	ldi	r21, 0x43	; 67
 3b8:	85 d5       	rcall	.+2826   	; 0xec4 <__gesf2>
 3ba:	18 16       	cp	r1, r24
 3bc:	24 f4       	brge	.+8      	; 0x3c6 <__vector_16+0x8c>
        OCR1B = 0; // Output voltage limitation
 3be:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
 3c2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
}
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti
        voltage.adc.sum += ADC;
        ++voltage.adc.counter;
    }
    else
    {
        voltage.adc.mean = voltage.adc.sum / ADC_SAMPLES;
 3e8:	24 e1       	ldi	r18, 0x14	; 20
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	00 d4       	rcall	.+2048   	; 0xbf2 <__udivmodsi4>
 3f2:	ca 01       	movw	r24, r20
 3f4:	b9 01       	movw	r22, r18
 3f6:	b4 d4       	rcall	.+2408   	; 0xd60 <__floatunsisf>
 3f8:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <voltage+0x8>
 3fc:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <voltage+0x9>
 400:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <voltage+0xa>
 404:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <voltage+0xb>
        voltage.adc.value = (voltage.adc.mean * VREF) / 0x3FF;
 408:	29 e0       	ldi	r18, 0x09	; 9
 40a:	30 ef       	ldi	r19, 0xF0	; 240
 40c:	4c e8       	ldi	r20, 0x8C	; 140
 40e:	5a e3       	ldi	r21, 0x3A	; 58
 410:	5d d5       	rcall	.+2746   	; 0xecc <__mulsf3>
 412:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <voltage>
 416:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <voltage+0x1>
 41a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <voltage+0x2>
 41e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <voltage+0x3>
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	43 e5       	ldi	r20, 0x53	; 83
 428:	53 e4       	ldi	r21, 0x43	; 67
 42a:	50 d5       	rcall	.+2720   	; 0xecc <__mulsf3>
 42c:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <voltage+0x4>
 430:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <voltage+0x5>
 434:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <voltage+0x6>
 438:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <voltage+0x7>
        voltage.adc.sum = 0;
 43c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <voltage+0xc>
 440:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <voltage+0xd>
 444:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <voltage+0xe>
 448:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <voltage+0xf>
        voltage.adc.counter = 0;
 44c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <voltage+0x10>
 450:	af cf       	rjmp	.-162    	; 0x3b0 <__vector_16+0x76>

00000452 <main>:
        OCR1B = 0; // Output voltage limitation
}

int main(void)
{
    voltage.pid.pidData.Kp = K_P;
 452:	8a e0       	ldi	r24, 0x0A	; 10
 454:	97 ed       	ldi	r25, 0xD7	; 215
 456:	a3 e2       	ldi	r26, 0x23	; 35
 458:	bc e3       	ldi	r27, 0x3C	; 60
 45a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <voltage+0x29>
 45e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <voltage+0x2a>
 462:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <voltage+0x2b>
 466:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <voltage+0x2c>
    voltage.pid.pidData.Ki = K_I;
 46a:	87 e1       	ldi	r24, 0x17	; 23
 46c:	97 eb       	ldi	r25, 0xB7	; 183
 46e:	a1 e5       	ldi	r26, 0x51	; 81
 470:	b8 e3       	ldi	r27, 0x38	; 56
 472:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <voltage+0x2d>
 476:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <voltage+0x2e>
 47a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <voltage+0x2f>
 47e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <voltage+0x30>
    voltage.pid.pidData.Kd = K_D;
 482:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <voltage+0x31>
 486:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <voltage+0x32>
 48a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <voltage+0x33>
 48e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <voltage+0x34>
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	8e e1       	ldi	r24, 0x1E	; 30
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	f9 d2       	rcall	.+1522   	; 0xa92 <arm_pid_init_f32>
    IO_Init();
 4a0:	d4 dd       	rcall	.-1112   	; 0x4a <IO_Init>
#include "main.h"

void TIM0_Init(void) // F = 1445Hz; T = 692us
{
    SET_BIT(TCCR0A, (1 << CS00) | (1 << CS01)); // clk/64
 4a2:	85 b5       	in	r24, 0x25	; 37
 4a4:	83 60       	ori	r24, 0x03	; 3
 4a6:	85 bd       	out	0x25, r24	; 37
    SET_BIT(TCCR0A, 1 << CTC0); // CTC EN
 4a8:	85 b5       	in	r24, 0x25	; 37
 4aa:	88 60       	ori	r24, 0x08	; 8
 4ac:	85 bd       	out	0x25, r24	; 37
    SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
 4ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
    OCR0A = 173 - 1;
 4b8:	8c ea       	ldi	r24, 0xAC	; 172
 4ba:	87 bd       	out	0x27, r24	; 39
}

void TIM1_Init(void) // F = 31.25kHz; T = 32us
{
    SET_BIT(TCCR1A, 1 << WGM11); // Fast PWM, 9-bit
 4bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
    SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
 4c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 4ca:	80 62       	ori	r24, 0x20	; 32
 4cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
    SET_BIT(TCCR1B, 1 << CS10); // clk/1
 4d0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
    SET_BIT(TCCR1B, 1 << WGM12); // Fast PWM, 9-bit
 4da:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
 4de:	88 60       	ori	r24, 0x08	; 8
 4e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
    voltage.pid.pidData.Kd = K_D;
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
    IO_Init();
    TIM0_Init();
    TIM1_Init();
    ADC_Init();
 4e4:	6b d2       	rcall	.+1238   	; 0x9bc <ADC_Init>
    I2C_Init();
 4e6:	37 d3       	rcall	.+1646   	; 0xb56 <I2C_Init>
    sei();
 4e8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	83 ed       	ldi	r24, 0xD3	; 211
 4ee:	90 e3       	ldi	r25, 0x30	; 48
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x9e>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0xa8>
 4fa:	00 00       	nop
    _delay_ms(1000);

    /* Read reference temperature */
    I2C_StartCondition();
 4fc:	30 d3       	rcall	.+1632   	; 0xb5e <I2C_StartCondition>
    I2C_SendByte(0b10010000); // Device address + write bit
 4fe:	80 e9       	ldi	r24, 0x90	; 144
 500:	3a d3       	rcall	.+1652   	; 0xb76 <I2C_SendByte>
    I2C_SendByte(0x00); // Pointer
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	38 d3       	rcall	.+1648   	; 0xb76 <I2C_SendByte>
    I2C_StartCondition(); // Restart
 506:	2b d3       	rcall	.+1622   	; 0xb5e <I2C_StartCondition>
    I2C_SendByte(0b10010001); // Device address + read bit
 508:	81 e9       	ldi	r24, 0x91	; 145
 50a:	35 d3       	rcall	.+1642   	; 0xb76 <I2C_SendByte>
    temperature.msb = I2C_ReadByte();
 50c:	3e d3       	rcall	.+1660   	; 0xb8a <I2C_ReadByte>
 50e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
    temperature.lsb = I2C_ReadLastByte();
 512:	45 d3       	rcall	.+1674   	; 0xb9e <I2C_ReadLastByte>
 514:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
    I2C_StopCondition();
 518:	2a d3       	rcall	.+1620   	; 0xb6e <I2C_StopCondition>
    temperature.valueRef = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
 51a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
 51e:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
 522:	76 27       	eor	r23, r22
 524:	67 27       	eor	r22, r23
 526:	76 27       	eor	r23, r22
 528:	76 95       	lsr	r23
 52a:	67 95       	ror	r22
 52c:	72 95       	swap	r23
 52e:	62 95       	swap	r22
 530:	6f 70       	andi	r22, 0x0F	; 15
 532:	67 27       	eor	r22, r23
 534:	7f 70       	andi	r23, 0x0F	; 15
 536:	67 27       	eor	r22, r23
 538:	07 2e       	mov	r0, r23
 53a:	00 0c       	add	r0, r0
 53c:	88 0b       	sbc	r24, r24
 53e:	99 0b       	sbc	r25, r25
 540:	11 d4       	rcall	.+2082   	; 0xd64 <__floatsisf>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	4a ef       	ldi	r20, 0xFA	; 250
 548:	52 e4       	ldi	r21, 0x42	; 66
 54a:	c0 d4       	rcall	.+2432   	; 0xecc <__mulsf3>
 54c:	dd d3       	rcall	.+1978   	; 0xd08 <__fixunssfsi>
 54e:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <temperature+0x3>
 552:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <temperature+0x2>
            indication.pause = false, indication.isTurnedOff = false;
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
            {
                OCR1B = 0;
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
                indication.pwmOutputStatus = CONNECTED;
 556:	bb 24       	eor	r11, r11
 558:	b3 94       	inc	r11
            if (time.sec == 29)
                cad.counter = 0;
            if ((time.sec > 29) && (time.sec < 35))
            {
                indication.dispMode = DISPLAY_CAD;
                cad.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
 55a:	09 e6       	ldi	r16, 0x69	; 105
 55c:	11 e0       	ldi	r17, 0x01	; 1
 55e:	ca e0       	ldi	r28, 0x0A	; 10
 560:	d0 e0       	ldi	r29, 0x00	; 0
    indication.digit4 = (temperature % 100) / 10;
}

void SoftStart(void)
{
    if ((!indication.pause) && (!indication.isTurnedOff) && (voltage.pid.setPoint <= VOUT_TASK))
 562:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <indication+0x6>
 566:	81 11       	cpse	r24, r1
 568:	05 c0       	rjmp	.+10     	; 0x574 <main+0x122>
 56a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x7>
 56e:	88 23       	and	r24, r24
 570:	09 f4       	brne	.+2      	; 0x574 <main+0x122>
 572:	cf c0       	rjmp	.+414    	; 0x712 <main+0x2c0>
    {
        SoftStart();
        // voltage.pid.setPoint = VOUT_TASK; // Manual control

        /* Get time */
        I2C_StartCondition();
 574:	f4 d2       	rcall	.+1512   	; 0xb5e <I2C_StartCondition>
        I2C_SendByte(0xA2); // Device address + write bit
 576:	82 ea       	ldi	r24, 0xA2	; 162
 578:	fe d2       	rcall	.+1532   	; 0xb76 <I2C_SendByte>
        I2C_SendByte(0x02); // Pointer
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	fc d2       	rcall	.+1528   	; 0xb76 <I2C_SendByte>
        I2C_StartCondition(); // Restart
 57e:	ef d2       	rcall	.+1502   	; 0xb5e <I2C_StartCondition>
        I2C_SendByte(0xA3); // Device address + read bit
 580:	83 ea       	ldi	r24, 0xA3	; 163
 582:	f9 d2       	rcall	.+1522   	; 0xb76 <I2C_SendByte>
        time.sec = RTC_BCDtoDEC((I2C_ReadByte()) & 0b01111111);
 584:	02 d3       	rcall	.+1540   	; 0xb8a <I2C_ReadByte>
 586:	8f 77       	andi	r24, 0x7F	; 127
 588:	d5 d2       	rcall	.+1450   	; 0xb34 <RTC_BCDtoDEC>
 58a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <time>
        time.min = RTC_BCDtoDEC((I2C_ReadByte()) & 0b01111111);
 58e:	fd d2       	rcall	.+1530   	; 0xb8a <I2C_ReadByte>
 590:	8f 77       	andi	r24, 0x7F	; 127
 592:	d0 d2       	rcall	.+1440   	; 0xb34 <RTC_BCDtoDEC>
 594:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <time+0x1>
        time.hour = RTC_BCDtoDEC((I2C_ReadLastByte()) & 0b00111111);
 598:	02 d3       	rcall	.+1540   	; 0xb9e <I2C_ReadLastByte>
 59a:	8f 73       	andi	r24, 0x3F	; 63
 59c:	cb d2       	rcall	.+1430   	; 0xb34 <RTC_BCDtoDEC>
 59e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <time+0x2>
        I2C_StopCondition();
 5a2:	e5 d2       	rcall	.+1482   	; 0xb6e <I2C_StopCondition>
        //     I2C_StopCondition();
        // }

        /* TimeRes */
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
 5a4:	60 99       	sbic	0x0c, 0	; 12
 5a6:	5a c0       	rjmp	.+180    	; 0x65c <main+0x20a>
        {
            if (++buttonCounter == 0xFF)
 5a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	8f 3f       	cpi	r24, 0xFF	; 255
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <main+0x162>
 5b2:	d1 c0       	rjmp	.+418    	; 0x756 <main+0x304>
 5b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        }
        else
            buttonCounter = 0;

        /* Daily turnoff */
        if (time.hour < 6)
 5b8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time+0x2>
 5bc:	86 30       	cpi	r24, 0x06	; 6
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <main+0x170>
 5c0:	54 c0       	rjmp	.+168    	; 0x66a <main+0x218>
                }
            }
        }
        else
        {
            indication.pause = false, indication.isTurnedOff = false;
 5c2:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <indication+0x6>
 5c6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <indication+0x7>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
 5ca:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <indication+0x8>
 5ce:	81 11       	cpse	r24, r1
 5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <main+0x19e>
            {
                OCR1B = 0;
 5d2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
 5d6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
 5da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 5de:	80 62       	ori	r24, 0x20	; 32
 5e0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                indication.pwmOutputStatus = CONNECTED;
 5e4:	b0 92 5e 01 	sts	0x015E, r11	; 0x80015e <indication+0x8>
            }
        }

        if (!indication.pause)
 5e8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <indication+0x6>
 5ec:	81 11       	cpse	r24, r1
 5ee:	c2 cf       	rjmp	.-124    	; 0x574 <main+0x122>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
 5f0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <voltage+0x3d>
 5f4:	81 11       	cpse	r24, r1
 5f6:	23 c1       	rjmp	.+582    	; 0x83e <main+0x3ec>
                OCR1B = voltage.pid.processValue * 0x1FF;
                voltage.pid.run = false;
            }

            /* Read temperature */
            if (time.sec == 9)
 5f8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time>
 5fc:	89 30       	cpi	r24, 0x09	; 9
 5fe:	09 f4       	brne	.+2      	; 0x602 <main+0x1b0>
 600:	c1 c0       	rjmp	.+386    	; 0x784 <main+0x332>
                else
                    temperature.value = temperature.valueRef;
            }

            /* Display temperature */
            if ((time.sec > 9) && (time.sec < 15))
 602:	96 ef       	ldi	r25, 0xF6	; 246
 604:	98 0f       	add	r25, r24
 606:	95 30       	cpi	r25, 0x05	; 5
 608:	08 f0       	brcs	.+2      	; 0x60c <main+0x1ba>
 60a:	6b c1       	rjmp	.+726    	; 0x8e2 <main+0x490>
                indication.dispMode = DISPLAY_TEMPERATURE;
 60c:	b0 92 5b 01 	sts	0x015B, r11	; 0x80015b <indication+0x5>
 610:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <temperature+0xb>
            if (time.sec == 15)
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
 614:	99 23       	and	r25, r25
 616:	09 f4       	brne	.+2      	; 0x61a <main+0x1c8>
 618:	51 c1       	rjmp	.+674    	; 0x8bc <main+0x46a>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
                }
            }

            /* Cathodes anti-degradation (CAD) */
            if (time.sec == 29)
 61a:	8d 31       	cpi	r24, 0x1D	; 29
 61c:	09 f4       	brne	.+2      	; 0x620 <main+0x1ce>
 61e:	ad c0       	rjmp	.+346    	; 0x77a <main+0x328>
                cad.counter = 0;
            if ((time.sec > 29) && (time.sec < 35))
 620:	92 ee       	ldi	r25, 0xE2	; 226
 622:	98 0f       	add	r25, r24
 624:	95 30       	cpi	r25, 0x05	; 5
 626:	08 f0       	brcs	.+2      	; 0x62a <main+0x1d8>
 628:	69 c1       	rjmp	.+722    	; 0x8fc <main+0x4aa>
            {
                indication.dispMode = DISPLAY_CAD;
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <indication+0x5>
                cad.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
 630:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
 634:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
 638:	b8 01       	movw	r22, r16
 63a:	c7 d2       	rcall	.+1422   	; 0xbca <__udivmodhi4>
 63c:	cb 01       	movw	r24, r22
 63e:	be 01       	movw	r22, r28
 640:	c4 d2       	rcall	.+1416   	; 0xbca <__udivmodhi4>
 642:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cad>
                cad.digit2 = cad.digit1;
 646:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <cad+0x1>
                cad.digit3 = cad.digit1;
 64a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <cad+0x2>
                cad.digit4 = cad.digit1;
 64e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cad+0x3>
                cad.digit5 = cad.digit1;
 652:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
                cad.digit6 = cad.digit1;
 656:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cad+0x5>
 65a:	83 cf       	rjmp	.-250    	; 0x562 <main+0x110>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
                I2C_StopCondition();
            }
        }
        else
            buttonCounter = 0;
 65c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

        /* Daily turnoff */
        if (time.hour < 6)
 660:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <time+0x2>
 664:	86 30       	cpi	r24, 0x06	; 6
 666:	08 f0       	brcs	.+2      	; 0x66a <main+0x218>
 668:	ac cf       	rjmp	.-168    	; 0x5c2 <main+0x170>
        {
            indication.isTurnedOff = true;
 66a:	b0 92 5d 01 	sts	0x015D, r11	; 0x80015d <indication+0x7>
        voltage.pid.setPoint += 0.01;
}

void SoftTurnoff(void)
{
    if ((indication.isTurnedOff) && (voltage.pid.setPoint > 0.0))
 66e:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage+0x35>
 672:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x36>
 676:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x37>
 67a:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x38>
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	a9 01       	movw	r20, r18
 684:	c7 01       	movw	r24, r14
 686:	b6 01       	movw	r22, r12
 688:	1d d4       	rcall	.+2106   	; 0xec4 <__gesf2>
 68a:	18 16       	cp	r1, r24
 68c:	8c f4       	brge	.+34     	; 0x6b0 <main+0x25e>
        voltage.pid.setPoint -= 0.005;
 68e:	2a e0       	ldi	r18, 0x0A	; 10
 690:	37 ed       	ldi	r19, 0xD7	; 215
 692:	43 ea       	ldi	r20, 0xA3	; 163
 694:	5b e3       	ldi	r21, 0x3B	; 59
 696:	c7 01       	movw	r24, r14
 698:	b6 01       	movw	r22, r12
 69a:	cd d2       	rcall	.+1434   	; 0xc36 <__subsf3>
 69c:	6b 01       	movw	r12, r22
 69e:	7c 01       	movw	r14, r24
 6a0:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <voltage+0x35>
 6a4:	d0 92 43 01 	sts	0x0143, r13	; 0x800143 <voltage+0x36>
 6a8:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <voltage+0x37>
 6ac:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <voltage+0x38>
        /* Daily turnoff */
        if (time.hour < 6)
        {
            indication.isTurnedOff = true;
            SoftTurnoff();
            if (voltage.pid.setPoint < 100.0)
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	48 ec       	ldi	r20, 0xC8	; 200
 6b6:	52 e4       	ldi	r21, 0x42	; 66
 6b8:	c7 01       	movw	r24, r14
 6ba:	b6 01       	movw	r22, r12
 6bc:	21 d3       	rcall	.+1602   	; 0xd00 <__cmpsf2>
 6be:	87 ff       	sbrs	r24, 7
 6c0:	93 cf       	rjmp	.-218    	; 0x5e8 <main+0x196>
            {
                indication.pause = true, Display_DeadTime();
 6c2:	b0 92 5c 01 	sts	0x015C, r11	; 0x80015c <indication+0x6>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
 6c6:	8b b1       	in	r24, 0x0b	; 11
 6c8:	81 70       	andi	r24, 0x01	; 1
 6ca:	88 61       	ori	r24, 0x18	; 24
 6cc:	8b b9       	out	0x0b, r24	; 11
            indication.isTurnedOff = true;
            SoftTurnoff();
            if (voltage.pid.setPoint < 100.0)
            {
                indication.pause = true, Display_DeadTime();
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
 6ce:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <indication+0x8>
 6d2:	88 23       	and	r24, r24
 6d4:	59 f0       	breq	.+22     	; 0x6ec <main+0x29a>
                {
                    OCR1B = 0;
 6d6:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
 6da:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                    CLEAR_BIT(TCCR1A, 1 << COM1B1); // OC1A/OC1B disconnected
 6de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
 6e2:	8f 7d       	andi	r24, 0xDF	; 223
 6e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                    indication.pwmOutputStatus = DISCONNECTED;
 6e8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <indication+0x8>
                }
                if (time.sec % 2) // Turnoff status LED blink
 6ec:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time>
 6f0:	80 ff       	sbrs	r24, 0
 6f2:	7a cf       	rjmp	.-268    	; 0x5e8 <main+0x196>
                {
                    SET_BIT(PORTD, 1 << 0);
 6f4:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f6:	8f e8       	ldi	r24, 0x8F	; 143
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <main+0x2a8>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <main+0x2ae>
 700:	00 00       	nop
                    _delay_us(100);
                    CLEAR_BIT(PORTD, 1 << 0);
 702:	58 98       	cbi	0x0b, 0	; 11
 704:	8f e1       	ldi	r24, 0x1F	; 31
 706:	93 e0       	ldi	r25, 0x03	; 3
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	f1 f7       	brne	.-4      	; 0x708 <main+0x2b6>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x2bc>
 70e:	00 00       	nop
 710:	6b cf       	rjmp	.-298    	; 0x5e8 <main+0x196>
    indication.digit4 = (temperature % 100) / 10;
}

void SoftStart(void)
{
    if ((!indication.pause) && (!indication.isTurnedOff) && (voltage.pid.setPoint <= VOUT_TASK))
 712:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage+0x35>
 716:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x36>
 71a:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x37>
 71e:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x38>
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	44 e3       	ldi	r20, 0x34	; 52
 728:	53 e4       	ldi	r21, 0x43	; 67
 72a:	c7 01       	movw	r24, r14
 72c:	b6 01       	movw	r22, r12
 72e:	e8 d2       	rcall	.+1488   	; 0xd00 <__cmpsf2>
 730:	18 16       	cp	r1, r24
 732:	0c f4       	brge	.+2      	; 0x736 <main+0x2e4>
 734:	1f cf       	rjmp	.-450    	; 0x574 <main+0x122>
        voltage.pid.setPoint += 0.01;
 736:	2a e0       	ldi	r18, 0x0A	; 10
 738:	37 ed       	ldi	r19, 0xD7	; 215
 73a:	43 e2       	ldi	r20, 0x23	; 35
 73c:	5c e3       	ldi	r21, 0x3C	; 60
 73e:	c7 01       	movw	r24, r14
 740:	b6 01       	movw	r22, r12
 742:	7a d2       	rcall	.+1268   	; 0xc38 <__addsf3>
 744:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <voltage+0x35>
 748:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <voltage+0x36>
 74c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <voltage+0x37>
 750:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <voltage+0x38>
 754:	0f cf       	rjmp	.-482    	; 0x574 <main+0x122>
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
        {
            if (++buttonCounter == 0xFF)
            {
                buttonCounter = 0;
 756:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                I2C_StartCondition();
 75a:	01 d2       	rcall	.+1026   	; 0xb5e <I2C_StartCondition>
                I2C_SendByte(0xA2); // Device address + write bit
 75c:	82 ea       	ldi	r24, 0xA2	; 162
 75e:	0b d2       	rcall	.+1046   	; 0xb76 <I2C_SendByte>
                I2C_SendByte(0x02); // Pointer
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	09 d2       	rcall	.+1042   	; 0xb76 <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Sec
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	f1 d1       	rcall	.+994    	; 0xb4a <RTC_DECtoBCD>
 768:	06 d2       	rcall	.+1036   	; 0xb76 <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Min
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	ee d1       	rcall	.+988    	; 0xb4a <RTC_DECtoBCD>
 76e:	03 d2       	rcall	.+1030   	; 0xb76 <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
 770:	84 e1       	ldi	r24, 0x14	; 20
 772:	eb d1       	rcall	.+982    	; 0xb4a <RTC_DECtoBCD>
 774:	00 d2       	rcall	.+1024   	; 0xb76 <I2C_SendByte>
                I2C_StopCondition();
 776:	fb d1       	rcall	.+1014   	; 0xb6e <I2C_StopCondition>
 778:	1f cf       	rjmp	.-450    	; 0x5b8 <main+0x166>
                }
            }

            /* Cathodes anti-degradation (CAD) */
            if (time.sec == 29)
                cad.counter = 0;
 77a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
 77e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
 782:	ef ce       	rjmp	.-546    	; 0x562 <main+0x110>
            }

            /* Read temperature */
            if (time.sec == 9)
            {
                if (temperature.isCompensated)
 784:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <temperature+0xb>
 788:	91 11       	cpse	r25, r1
 78a:	c9 c0       	rjmp	.+402    	; 0x91e <main+0x4cc>
                    I2C_StopCondition();
                    temperature.value = (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                                        temperature.compensationFactor;
                }
                else
                    temperature.value = temperature.valueRef;
 78c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temperature+0x2>
 790:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temperature+0x3>
 794:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <temperature+0x1>
 798:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <temperature>
 79c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0xa>
 7a0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <temperature+0x6>
 7a4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <temperature+0x7>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
            {
                if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
 7a8:	99 23       	and	r25, r25
 7aa:	41 f0       	breq	.+16     	; 0x7bc <main+0x36a>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
 7ac:	2f 5f       	subi	r18, 0xFF	; 255
 7ae:	3f 4f       	sbci	r19, 0xFF	; 255
 7b0:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <temperature+0x7>
 7b4:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <temperature+0x6>
 7b8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temperature+0xa>
                if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
                if (temperature.compensationCounter == 3600)
 7bc:	20 31       	cpi	r18, 0x10	; 16
 7be:	3e 40       	sbci	r19, 0x0E	; 14
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <main+0x372>
 7c2:	2b cf       	rjmp	.-426    	; 0x61a <main+0x1c8>
                {
                    I2C_StartCondition();
 7c4:	cc d1       	rcall	.+920    	; 0xb5e <I2C_StartCondition>
                    I2C_SendByte(0b10010000); // Device address + write bit
 7c6:	80 e9       	ldi	r24, 0x90	; 144
 7c8:	d6 d1       	rcall	.+940    	; 0xb76 <I2C_SendByte>
                    I2C_SendByte(0x00); // Pointer
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	d4 d1       	rcall	.+936    	; 0xb76 <I2C_SendByte>
                    I2C_StartCondition(); // Restart
 7ce:	c7 d1       	rcall	.+910    	; 0xb5e <I2C_StartCondition>
                    I2C_SendByte(0b10010001); // Device address + read bit
 7d0:	81 e9       	ldi	r24, 0x91	; 145
 7d2:	d1 d1       	rcall	.+930    	; 0xb76 <I2C_SendByte>
                    temperature.msb = I2C_ReadByte();
 7d4:	da d1       	rcall	.+948    	; 0xb8a <I2C_ReadByte>
 7d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                    temperature.lsb = I2C_ReadLastByte();
 7da:	e1 d1       	rcall	.+962    	; 0xb9e <I2C_ReadLastByte>
 7dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                    I2C_StopCondition();
 7e0:	c6 d1       	rcall	.+908    	; 0xb6e <I2C_StopCondition>
                    temperature.value = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
 7e2:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
 7e6:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
 7ea:	76 27       	eor	r23, r22
 7ec:	67 27       	eor	r22, r23
 7ee:	76 27       	eor	r23, r22
 7f0:	76 95       	lsr	r23
 7f2:	67 95       	ror	r22
 7f4:	72 95       	swap	r23
 7f6:	62 95       	swap	r22
 7f8:	6f 70       	andi	r22, 0x0F	; 15
 7fa:	67 27       	eor	r22, r23
 7fc:	7f 70       	andi	r23, 0x0F	; 15
 7fe:	67 27       	eor	r22, r23
 800:	07 2e       	mov	r0, r23
 802:	00 0c       	add	r0, r0
 804:	88 0b       	sbc	r24, r24
 806:	99 0b       	sbc	r25, r25
 808:	ad d2       	rcall	.+1370   	; 0xd64 <__floatsisf>
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	4a ef       	ldi	r20, 0xFA	; 250
 810:	52 e4       	ldi	r21, 0x42	; 66
 812:	5c d3       	rcall	.+1720   	; 0xecc <__mulsf3>
 814:	79 d2       	rcall	.+1266   	; 0xd08 <__fixunssfsi>
 816:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
 81a:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
                    temperature.compensationFactor = temperature.valueRef - temperature.value;
 81e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temperature+0x2>
 822:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temperature+0x3>
 826:	c9 01       	movw	r24, r18
 828:	86 1b       	sub	r24, r22
 82a:	97 0b       	sbc	r25, r23
 82c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperature+0x5>
 830:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperature+0x4>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
 834:	b0 92 0c 01 	sts	0x010C, r11	; 0x80010c <temperature+0xb>
 838:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time>
 83c:	ee ce       	rjmp	.-548    	; 0x61a <main+0x1c8>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);
 83e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <voltage+0x4>
 842:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <voltage+0x5>
 846:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <voltage+0x6>
 84a:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <voltage+0x7>
 84e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
 852:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
 856:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
 85a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
 85e:	eb d1       	rcall	.+982    	; 0xc36 <__subsf3>
 860:	ab 01       	movw	r20, r22
 862:	bc 01       	movw	r22, r24
 864:	8e e1       	ldi	r24, 0x1E	; 30
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	ba d0       	rcall	.+372    	; 0x9de <arm_pid_f32>
 86a:	6b 01       	movw	r12, r22
 86c:	7c 01       	movw	r14, r24

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
 86e:	20 e0       	ldi	r18, 0x00	; 0
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	a9 01       	movw	r20, r18
 874:	45 d2       	rcall	.+1162   	; 0xd00 <__cmpsf2>
 876:	87 fd       	sbrc	r24, 7
 878:	47 c0       	rjmp	.+142    	; 0x908 <main+0x4b6>
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
 87a:	23 e3       	ldi	r18, 0x33	; 51
 87c:	33 e3       	ldi	r19, 0x33	; 51
 87e:	43 e3       	ldi	r20, 0x33	; 51
 880:	5f e3       	ldi	r21, 0x3F	; 63
 882:	c7 01       	movw	r24, r14
 884:	b6 01       	movw	r22, r12
 886:	1e d3       	rcall	.+1596   	; 0xec4 <__gesf2>
 888:	18 16       	cp	r1, r24
 88a:	0c f4       	brge	.+2      	; 0x88e <main+0x43c>
 88c:	88 c0       	rjmp	.+272    	; 0x99e <main+0x54c>
        if (!indication.pause)
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
 88e:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <voltage+0x39>
 892:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <voltage+0x3a>
 896:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <voltage+0x3b>
 89a:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <voltage+0x3c>
 89e:	20 e0       	ldi	r18, 0x00	; 0
 8a0:	30 e8       	ldi	r19, 0x80	; 128
 8a2:	4f ef       	ldi	r20, 0xFF	; 255
 8a4:	53 e4       	ldi	r21, 0x43	; 67
 8a6:	c7 01       	movw	r24, r14
 8a8:	b6 01       	movw	r22, r12
 8aa:	10 d3       	rcall	.+1568   	; 0xecc <__mulsf3>
 8ac:	2d d2       	rcall	.+1114   	; 0xd08 <__fixunssfsi>
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;

                OCR1B = voltage.pid.processValue * 0x1FF;
 8ae:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
 8b2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                voltage.pid.run = false;
 8b6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <voltage+0x3d>
 8ba:	9e ce       	rjmp	.-708    	; 0x5f8 <main+0x1a6>
 8bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0xa>
 8c0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <temperature+0x6>
 8c4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <temperature+0x7>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
            {
                if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
 8c8:	80 fd       	sbrc	r24, 0
 8ca:	6e cf       	rjmp	.-292    	; 0x7a8 <main+0x356>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
                if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
 8cc:	91 11       	cpse	r25, r1
 8ce:	76 cf       	rjmp	.-276    	; 0x7bc <main+0x36a>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
 8d0:	2f 5f       	subi	r18, 0xFF	; 255
 8d2:	3f 4f       	sbci	r19, 0xFF	; 255
 8d4:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <temperature+0x7>
 8d8:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <temperature+0x6>
 8dc:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <temperature+0xa>
 8e0:	6d cf       	rjmp	.-294    	; 0x7bc <main+0x36a>
 8e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <temperature+0xb>
            }

            /* Display temperature */
            if ((time.sec > 9) && (time.sec < 15))
                indication.dispMode = DISPLAY_TEMPERATURE;
            if (time.sec == 15)
 8e6:	8f 30       	cpi	r24, 0x0F	; 15
 8e8:	09 f0       	breq	.+2      	; 0x8ec <main+0x49a>
 8ea:	94 ce       	rjmp	.-728    	; 0x614 <main+0x1c2>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);
 8ec:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <indication+0x5>
 8f0:	73 98       	cbi	0x0e, 3	; 14
 8f2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <temperature+0xb>
 8f6:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time>
 8fa:	8c ce       	rjmp	.-744    	; 0x614 <main+0x1c2>
                cad.digit3 = cad.digit1;
                cad.digit4 = cad.digit1;
                cad.digit5 = cad.digit1;
                cad.digit6 = cad.digit1;
            }
            else if (time.sec == 35)
 8fc:	83 32       	cpi	r24, 0x23	; 35
 8fe:	09 f0       	breq	.+2      	; 0x902 <main+0x4b0>
 900:	30 ce       	rjmp	.-928    	; 0x562 <main+0x110>
                indication.dispMode = DISPLAY_TIME;
 902:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <indication+0x5>
 906:	2d ce       	rjmp	.-934    	; 0x562 <main+0x110>
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
 908:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage+0x39>
 90c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <voltage+0x3a>
 910:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <voltage+0x3b>
 914:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <voltage+0x3c>
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	c8 cf       	rjmp	.-112    	; 0x8ae <main+0x45c>
            /* Read temperature */
            if (time.sec == 9)
            {
                if (temperature.isCompensated)
                {
                    I2C_StartCondition();
 91e:	1f d1       	rcall	.+574    	; 0xb5e <I2C_StartCondition>
                    I2C_SendByte(0b10010000); // Device address + write bit
 920:	80 e9       	ldi	r24, 0x90	; 144
 922:	29 d1       	rcall	.+594    	; 0xb76 <I2C_SendByte>
                    I2C_SendByte(0x00); // Pointer
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	27 d1       	rcall	.+590    	; 0xb76 <I2C_SendByte>
                    I2C_StartCondition(); // Restart
 928:	1a d1       	rcall	.+564    	; 0xb5e <I2C_StartCondition>
                    I2C_SendByte(0b10010001); // Device address + read bit
 92a:	81 e9       	ldi	r24, 0x91	; 145
 92c:	24 d1       	rcall	.+584    	; 0xb76 <I2C_SendByte>
                    temperature.msb = I2C_ReadByte();
 92e:	2d d1       	rcall	.+602    	; 0xb8a <I2C_ReadByte>
 930:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                    temperature.lsb = I2C_ReadLastByte();
 934:	34 d1       	rcall	.+616    	; 0xb9e <I2C_ReadLastByte>
 936:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                    I2C_StopCondition();
 93a:	19 d1       	rcall	.+562    	; 0xb6e <I2C_StopCondition>
                    temperature.value = (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
 93c:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
 940:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
 944:	76 27       	eor	r23, r22
 946:	67 27       	eor	r22, r23
 948:	76 27       	eor	r23, r22
 94a:	76 95       	lsr	r23
 94c:	67 95       	ror	r22
 94e:	72 95       	swap	r23
 950:	62 95       	swap	r22
 952:	6f 70       	andi	r22, 0x0F	; 15
 954:	67 27       	eor	r22, r23
 956:	7f 70       	andi	r23, 0x0F	; 15
 958:	67 27       	eor	r22, r23
 95a:	07 2e       	mov	r0, r23
 95c:	00 0c       	add	r0, r0
 95e:	88 0b       	sbc	r24, r24
 960:	99 0b       	sbc	r25, r25
 962:	00 d2       	rcall	.+1024   	; 0xd64 <__floatsisf>
 964:	20 e0       	ldi	r18, 0x00	; 0
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	4a ef       	ldi	r20, 0xFA	; 250
 96a:	52 e4       	ldi	r21, 0x42	; 66
 96c:	af d2       	rcall	.+1374   	; 0xecc <__mulsf3>
 96e:	6b 01       	movw	r12, r22
 970:	7c 01       	movw	r14, r24
 972:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <temperature+0x4>
 976:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <temperature+0x5>
 97a:	07 2e       	mov	r0, r23
 97c:	00 0c       	add	r0, r0
 97e:	88 0b       	sbc	r24, r24
 980:	99 0b       	sbc	r25, r25
 982:	f0 d1       	rcall	.+992    	; 0xd64 <__floatsisf>
 984:	9b 01       	movw	r18, r22
 986:	ac 01       	movw	r20, r24
 988:	c7 01       	movw	r24, r14
 98a:	b6 01       	movw	r22, r12
 98c:	55 d1       	rcall	.+682    	; 0xc38 <__addsf3>
 98e:	bc d1       	rcall	.+888    	; 0xd08 <__fixunssfsi>
 990:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
 994:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
 998:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time>
 99c:	32 ce       	rjmp	.-924    	; 0x602 <main+0x1b0>

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;
 99e:	83 e3       	ldi	r24, 0x33	; 51
 9a0:	93 e3       	ldi	r25, 0x33	; 51
 9a2:	a3 e3       	ldi	r26, 0x33	; 51
 9a4:	bf e3       	ldi	r27, 0x3F	; 63
 9a6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <voltage+0x39>
 9aa:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <voltage+0x3a>
 9ae:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <voltage+0x3b>
 9b2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <voltage+0x3c>
 9b6:	65 e6       	ldi	r22, 0x65	; 101
 9b8:	71 e0       	ldi	r23, 0x01	; 1
 9ba:	79 cf       	rjmp	.-270    	; 0x8ae <main+0x45c>

000009bc <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
    ADCSRA |= ((1 << ADEN) // ADC EN
 9bc:	ea e7       	ldi	r30, 0x7A	; 122
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	80 81       	ld	r24, Z
 9c2:	8f 6a       	ori	r24, 0xAF	; 175
 9c4:	80 83       	st	Z, r24
               | (1 << ADATE) // AUTO TRIG EN
               | (1 << ADIE) // ADC CONVERSION INTERRUPT EN
               | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); // 128 PRESCALE

    ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3)); // ADC0 INPUT
 9c6:	ac e7       	ldi	r26, 0x7C	; 124
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	8c 91       	ld	r24, X
 9cc:	80 7f       	andi	r24, 0xF0	; 240
 9ce:	8c 93       	st	X, r24
    ADMUX &= ~(1 << REFS0); // 1.1V REFs
 9d0:	8c 91       	ld	r24, X
 9d2:	8f 7b       	andi	r24, 0xBF	; 191
 9d4:	8c 93       	st	X, r24

    ADCSRA |= (1 << ADSC); // ADC START
 9d6:	80 81       	ld	r24, Z
 9d8:	80 64       	ori	r24, 0x40	; 64
 9da:	80 83       	st	Z, r24
 9dc:	08 95       	ret

000009de <arm_pid_f32>:
#include "PID.h"

float32_t arm_pid_f32(arm_pid_instance_f32 *S, float32_t in)
{
 9de:	4f 92       	push	r4
 9e0:	5f 92       	push	r5
 9e2:	6f 92       	push	r6
 9e4:	7f 92       	push	r7
 9e6:	8f 92       	push	r8
 9e8:	9f 92       	push	r9
 9ea:	af 92       	push	r10
 9ec:	bf 92       	push	r11
 9ee:	cf 92       	push	r12
 9f0:	df 92       	push	r13
 9f2:	ef 92       	push	r14
 9f4:	ff 92       	push	r15
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	ec 01       	movw	r28, r24
 9fc:	6a 01       	movw	r12, r20
 9fe:	7b 01       	movw	r14, r22
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */
    out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 a00:	8c 84       	ldd	r8, Y+12	; 0x0c
 a02:	9d 84       	ldd	r9, Y+13	; 0x0d
 a04:	ae 84       	ldd	r10, Y+14	; 0x0e
 a06:	bf 84       	ldd	r11, Y+15	; 0x0f
 a08:	28 81       	ld	r18, Y
 a0a:	39 81       	ldd	r19, Y+1	; 0x01
 a0c:	4a 81       	ldd	r20, Y+2	; 0x02
 a0e:	5b 81       	ldd	r21, Y+3	; 0x03
 a10:	cb 01       	movw	r24, r22
 a12:	b6 01       	movw	r22, r12
 a14:	5b d2       	rcall	.+1206   	; 0xecc <__mulsf3>
 a16:	2b 01       	movw	r4, r22
 a18:	3c 01       	movw	r6, r24
 a1a:	2c 81       	ldd	r18, Y+4	; 0x04
 a1c:	3d 81       	ldd	r19, Y+5	; 0x05
 a1e:	4e 81       	ldd	r20, Y+6	; 0x06
 a20:	5f 81       	ldd	r21, Y+7	; 0x07
 a22:	c5 01       	movw	r24, r10
 a24:	b4 01       	movw	r22, r8
 a26:	52 d2       	rcall	.+1188   	; 0xecc <__mulsf3>
 a28:	9b 01       	movw	r18, r22
 a2a:	ac 01       	movw	r20, r24
 a2c:	c3 01       	movw	r24, r6
 a2e:	b2 01       	movw	r22, r4
 a30:	03 d1       	rcall	.+518    	; 0xc38 <__addsf3>
 a32:	2c 89       	ldd	r18, Y+20	; 0x14
 a34:	3d 89       	ldd	r19, Y+21	; 0x15
 a36:	4e 89       	ldd	r20, Y+22	; 0x16
 a38:	5f 89       	ldd	r21, Y+23	; 0x17
 a3a:	fe d0       	rcall	.+508    	; 0xc38 <__addsf3>
 a3c:	2b 01       	movw	r4, r22
 a3e:	3c 01       	movw	r6, r24
 a40:	28 89       	ldd	r18, Y+16	; 0x10
 a42:	39 89       	ldd	r19, Y+17	; 0x11
 a44:	4a 89       	ldd	r20, Y+18	; 0x12
 a46:	5b 89       	ldd	r21, Y+19	; 0x13
 a48:	68 85       	ldd	r22, Y+8	; 0x08
 a4a:	79 85       	ldd	r23, Y+9	; 0x09
 a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
 a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
 a50:	3d d2       	rcall	.+1146   	; 0xecc <__mulsf3>
 a52:	9b 01       	movw	r18, r22
 a54:	ac 01       	movw	r20, r24
 a56:	c3 01       	movw	r24, r6
 a58:	b2 01       	movw	r22, r4
 a5a:	ee d0       	rcall	.+476    	; 0xc38 <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
 a5c:	88 8a       	std	Y+16, r8	; 0x10
 a5e:	99 8a       	std	Y+17, r9	; 0x11
 a60:	aa 8a       	std	Y+18, r10	; 0x12
 a62:	bb 8a       	std	Y+19, r11	; 0x13
    S->state[0] = in;
 a64:	cc 86       	std	Y+12, r12	; 0x0c
 a66:	dd 86       	std	Y+13, r13	; 0x0d
 a68:	ee 86       	std	Y+14, r14	; 0x0e
 a6a:	ff 86       	std	Y+15, r15	; 0x0f
    S->state[2] = out;
 a6c:	6c 8b       	std	Y+20, r22	; 0x14
 a6e:	7d 8b       	std	Y+21, r23	; 0x15
 a70:	8e 8b       	std	Y+22, r24	; 0x16
 a72:	9f 8b       	std	Y+23, r25	; 0x17

    /* return to application */
    return (out);
}
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	ff 90       	pop	r15
 a7a:	ef 90       	pop	r14
 a7c:	df 90       	pop	r13
 a7e:	cf 90       	pop	r12
 a80:	bf 90       	pop	r11
 a82:	af 90       	pop	r10
 a84:	9f 90       	pop	r9
 a86:	8f 90       	pop	r8
 a88:	7f 90       	pop	r7
 a8a:	6f 90       	pop	r6
 a8c:	5f 90       	pop	r5
 a8e:	4f 90       	pop	r4
 a90:	08 95       	ret

00000a92 <arm_pid_init_f32>:

void arm_pid_init_f32(arm_pid_instance_f32 *S, int32_t resetStateFlag)
{
 a92:	4f 92       	push	r4
 a94:	5f 92       	push	r5
 a96:	6f 92       	push	r6
 a98:	7f 92       	push	r7
 a9a:	8f 92       	push	r8
 a9c:	9f 92       	push	r9
 a9e:	af 92       	push	r10
 aa0:	bf 92       	push	r11
 aa2:	cf 92       	push	r12
 aa4:	df 92       	push	r13
 aa6:	ef 92       	push	r14
 aa8:	ff 92       	push	r15
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
 aae:	ec 01       	movw	r28, r24
 ab0:	4a 01       	movw	r8, r20
 ab2:	5b 01       	movw	r10, r22
    /* Derived coefficient A0 */
    S->A0 = S->Kp + S->Ki + S->Kd;
 ab4:	48 8c       	ldd	r4, Y+24	; 0x18
 ab6:	59 8c       	ldd	r5, Y+25	; 0x19
 ab8:	6a 8c       	ldd	r6, Y+26	; 0x1a
 aba:	7b 8c       	ldd	r7, Y+27	; 0x1b
 abc:	c8 a0       	ldd	r12, Y+32	; 0x20
 abe:	d9 a0       	ldd	r13, Y+33	; 0x21
 ac0:	ea a0       	ldd	r14, Y+34	; 0x22
 ac2:	fb a0       	ldd	r15, Y+35	; 0x23
 ac4:	2c 8d       	ldd	r18, Y+28	; 0x1c
 ac6:	3d 8d       	ldd	r19, Y+29	; 0x1d
 ac8:	4e 8d       	ldd	r20, Y+30	; 0x1e
 aca:	5f 8d       	ldd	r21, Y+31	; 0x1f
 acc:	c3 01       	movw	r24, r6
 ace:	b2 01       	movw	r22, r4
 ad0:	b3 d0       	rcall	.+358    	; 0xc38 <__addsf3>
 ad2:	a7 01       	movw	r20, r14
 ad4:	96 01       	movw	r18, r12
 ad6:	b0 d0       	rcall	.+352    	; 0xc38 <__addsf3>
 ad8:	68 83       	st	Y, r22
 ada:	79 83       	std	Y+1, r23	; 0x01
 adc:	8a 83       	std	Y+2, r24	; 0x02
 ade:	9b 83       	std	Y+3, r25	; 0x03

    /* Derived coefficient A1 */
    S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 ae0:	a7 01       	movw	r20, r14
 ae2:	96 01       	movw	r18, r12
 ae4:	c7 01       	movw	r24, r14
 ae6:	b6 01       	movw	r22, r12
 ae8:	a7 d0       	rcall	.+334    	; 0xc38 <__addsf3>
 aea:	a3 01       	movw	r20, r6
 aec:	92 01       	movw	r18, r4
 aee:	a4 d0       	rcall	.+328    	; 0xc38 <__addsf3>
 af0:	90 58       	subi	r25, 0x80	; 128
 af2:	6c 83       	std	Y+4, r22	; 0x04
 af4:	7d 83       	std	Y+5, r23	; 0x05
 af6:	8e 83       	std	Y+6, r24	; 0x06
 af8:	9f 83       	std	Y+7, r25	; 0x07

    /* Derived coefficient A2 */
    S->A2 = S->Kd;
 afa:	c8 86       	std	Y+8, r12	; 0x08
 afc:	d9 86       	std	Y+9, r13	; 0x09
 afe:	ea 86       	std	Y+10, r14	; 0x0a
 b00:	fb 86       	std	Y+11, r15	; 0x0b

    /* Check whether state needs reset or not */
    if (resetStateFlag)
 b02:	89 28       	or	r8, r9
 b04:	8a 28       	or	r8, r10
 b06:	8b 28       	or	r8, r11
 b08:	31 f0       	breq	.+12     	; 0xb16 <arm_pid_init_f32+0x84>
}

void arm_pid_reset_f32(arm_pid_instance_f32 *S)
{
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 b0a:	2c 96       	adiw	r28, 0x0c	; 12
 b0c:	8c e0       	ldi	r24, 0x0C	; 12
 b0e:	fe 01       	movw	r30, r28
 b10:	11 92       	st	Z+, r1
 b12:	8a 95       	dec	r24
 b14:	e9 f7       	brne	.-6      	; 0xb10 <arm_pid_init_f32+0x7e>
    S->A2 = S->Kd;

    /* Check whether state needs reset or not */
    if (resetStateFlag)
        arm_pid_reset_f32(S);
}
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	ff 90       	pop	r15
 b1c:	ef 90       	pop	r14
 b1e:	df 90       	pop	r13
 b20:	cf 90       	pop	r12
 b22:	bf 90       	pop	r11
 b24:	af 90       	pop	r10
 b26:	9f 90       	pop	r9
 b28:	8f 90       	pop	r8
 b2a:	7f 90       	pop	r7
 b2c:	6f 90       	pop	r6
 b2e:	5f 90       	pop	r5
 b30:	4f 90       	pop	r4
 b32:	08 95       	ret

00000b34 <RTC_BCDtoDEC>:
#include "RTC.h"

uint8_t RTC_BCDtoDEC(uint8_t c)
{
    uint8_t ch = ((c >> 4) * 10 + (0b00001111 & c));
 b34:	28 2f       	mov	r18, r24
 b36:	22 95       	swap	r18
 b38:	2f 70       	andi	r18, 0x0F	; 15
 b3a:	92 2f       	mov	r25, r18
 b3c:	99 0f       	add	r25, r25
 b3e:	99 0f       	add	r25, r25
 b40:	92 0f       	add	r25, r18
 b42:	99 0f       	add	r25, r25
 b44:	8f 70       	andi	r24, 0x0F	; 15

    return ch;
}
 b46:	89 0f       	add	r24, r25
 b48:	08 95       	ret

00000b4a <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t c)
{
    uint8_t ch = ((c / 10) << 4) | (c % 10);
 b4a:	6a e0       	ldi	r22, 0x0A	; 10
 b4c:	32 d0       	rcall	.+100    	; 0xbb2 <__udivmodqi4>
 b4e:	82 95       	swap	r24
 b50:	80 7f       	andi	r24, 0xF0	; 240

    return ch;
 b52:	89 2b       	or	r24, r25
 b54:	08 95       	ret

00000b56 <I2C_Init>:
{
    I2C_StartCondition();
    I2C_SendByte(addr);
    I2C_SendByte(c);
    I2C_StopCondition();
}
 b56:	88 e4       	ldi	r24, 0x48	; 72
 b58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
 b5c:	08 95       	ret

00000b5e <I2C_StartCondition>:
 b5e:	84 ea       	ldi	r24, 0xA4	; 164
 b60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 b64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 b68:	87 ff       	sbrs	r24, 7
 b6a:	fc cf       	rjmp	.-8      	; 0xb64 <I2C_StartCondition+0x6>
 b6c:	08 95       	ret

00000b6e <I2C_StopCondition>:
 b6e:	84 e9       	ldi	r24, 0x94	; 148
 b70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 b74:	08 95       	ret

00000b76 <I2C_SendByte>:
 b76:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
 b7a:	84 e8       	ldi	r24, 0x84	; 132
 b7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 b80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 b84:	87 ff       	sbrs	r24, 7
 b86:	fc cf       	rjmp	.-8      	; 0xb80 <I2C_SendByte+0xa>
 b88:	08 95       	ret

00000b8a <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 b8a:	84 ec       	ldi	r24, 0xC4	; 196
 b8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
 b90:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 b94:	87 ff       	sbrs	r24, 7
 b96:	fc cf       	rjmp	.-8      	; 0xb90 <I2C_ReadByte+0x6>

    return TWDR;
 b98:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
 b9c:	08 95       	ret

00000b9e <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
 b9e:	84 e8       	ldi	r24, 0x84	; 132
 ba0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
 ba4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
 ba8:	87 ff       	sbrs	r24, 7
 baa:	fc cf       	rjmp	.-8      	; 0xba4 <I2C_ReadLastByte+0x6>

    return TWDR;
 bac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
 bb0:	08 95       	ret

00000bb2 <__udivmodqi4>:
 bb2:	99 1b       	sub	r25, r25
 bb4:	79 e0       	ldi	r23, 0x09	; 9
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <__udivmodqi4_ep>

00000bb8 <__udivmodqi4_loop>:
 bb8:	99 1f       	adc	r25, r25
 bba:	96 17       	cp	r25, r22
 bbc:	08 f0       	brcs	.+2      	; 0xbc0 <__udivmodqi4_ep>
 bbe:	96 1b       	sub	r25, r22

00000bc0 <__udivmodqi4_ep>:
 bc0:	88 1f       	adc	r24, r24
 bc2:	7a 95       	dec	r23
 bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__udivmodqi4_loop>
 bc6:	80 95       	com	r24
 bc8:	08 95       	ret

00000bca <__udivmodhi4>:
 bca:	aa 1b       	sub	r26, r26
 bcc:	bb 1b       	sub	r27, r27
 bce:	51 e1       	ldi	r21, 0x11	; 17
 bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <__udivmodhi4_ep>

00000bd2 <__udivmodhi4_loop>:
 bd2:	aa 1f       	adc	r26, r26
 bd4:	bb 1f       	adc	r27, r27
 bd6:	a6 17       	cp	r26, r22
 bd8:	b7 07       	cpc	r27, r23
 bda:	10 f0       	brcs	.+4      	; 0xbe0 <__udivmodhi4_ep>
 bdc:	a6 1b       	sub	r26, r22
 bde:	b7 0b       	sbc	r27, r23

00000be0 <__udivmodhi4_ep>:
 be0:	88 1f       	adc	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	5a 95       	dec	r21
 be6:	a9 f7       	brne	.-22     	; 0xbd2 <__udivmodhi4_loop>
 be8:	80 95       	com	r24
 bea:	90 95       	com	r25
 bec:	bc 01       	movw	r22, r24
 bee:	cd 01       	movw	r24, r26
 bf0:	08 95       	ret

00000bf2 <__udivmodsi4>:
 bf2:	a1 e2       	ldi	r26, 0x21	; 33
 bf4:	1a 2e       	mov	r1, r26
 bf6:	aa 1b       	sub	r26, r26
 bf8:	bb 1b       	sub	r27, r27
 bfa:	fd 01       	movw	r30, r26
 bfc:	0d c0       	rjmp	.+26     	; 0xc18 <__udivmodsi4_ep>

00000bfe <__udivmodsi4_loop>:
 bfe:	aa 1f       	adc	r26, r26
 c00:	bb 1f       	adc	r27, r27
 c02:	ee 1f       	adc	r30, r30
 c04:	ff 1f       	adc	r31, r31
 c06:	a2 17       	cp	r26, r18
 c08:	b3 07       	cpc	r27, r19
 c0a:	e4 07       	cpc	r30, r20
 c0c:	f5 07       	cpc	r31, r21
 c0e:	20 f0       	brcs	.+8      	; 0xc18 <__udivmodsi4_ep>
 c10:	a2 1b       	sub	r26, r18
 c12:	b3 0b       	sbc	r27, r19
 c14:	e4 0b       	sbc	r30, r20
 c16:	f5 0b       	sbc	r31, r21

00000c18 <__udivmodsi4_ep>:
 c18:	66 1f       	adc	r22, r22
 c1a:	77 1f       	adc	r23, r23
 c1c:	88 1f       	adc	r24, r24
 c1e:	99 1f       	adc	r25, r25
 c20:	1a 94       	dec	r1
 c22:	69 f7       	brne	.-38     	; 0xbfe <__udivmodsi4_loop>
 c24:	60 95       	com	r22
 c26:	70 95       	com	r23
 c28:	80 95       	com	r24
 c2a:	90 95       	com	r25
 c2c:	9b 01       	movw	r18, r22
 c2e:	ac 01       	movw	r20, r24
 c30:	bd 01       	movw	r22, r26
 c32:	cf 01       	movw	r24, r30
 c34:	08 95       	ret

00000c36 <__subsf3>:
 c36:	50 58       	subi	r21, 0x80	; 128

00000c38 <__addsf3>:
 c38:	bb 27       	eor	r27, r27
 c3a:	aa 27       	eor	r26, r26
 c3c:	0e d0       	rcall	.+28     	; 0xc5a <__addsf3x>
 c3e:	08 c1       	rjmp	.+528    	; 0xe50 <__fp_round>
 c40:	f9 d0       	rcall	.+498    	; 0xe34 <__fp_pscA>
 c42:	30 f0       	brcs	.+12     	; 0xc50 <__addsf3+0x18>
 c44:	fe d0       	rcall	.+508    	; 0xe42 <__fp_pscB>
 c46:	20 f0       	brcs	.+8      	; 0xc50 <__addsf3+0x18>
 c48:	31 f4       	brne	.+12     	; 0xc56 <__addsf3+0x1e>
 c4a:	9f 3f       	cpi	r25, 0xFF	; 255
 c4c:	11 f4       	brne	.+4      	; 0xc52 <__addsf3+0x1a>
 c4e:	1e f4       	brtc	.+6      	; 0xc56 <__addsf3+0x1e>
 c50:	ee c0       	rjmp	.+476    	; 0xe2e <__fp_nan>
 c52:	0e f4       	brtc	.+2      	; 0xc56 <__addsf3+0x1e>
 c54:	e0 95       	com	r30
 c56:	e7 fb       	bst	r30, 7
 c58:	e4 c0       	rjmp	.+456    	; 0xe22 <__fp_inf>

00000c5a <__addsf3x>:
 c5a:	e9 2f       	mov	r30, r25
 c5c:	0a d1       	rcall	.+532    	; 0xe72 <__fp_split3>
 c5e:	80 f3       	brcs	.-32     	; 0xc40 <__addsf3+0x8>
 c60:	ba 17       	cp	r27, r26
 c62:	62 07       	cpc	r22, r18
 c64:	73 07       	cpc	r23, r19
 c66:	84 07       	cpc	r24, r20
 c68:	95 07       	cpc	r25, r21
 c6a:	18 f0       	brcs	.+6      	; 0xc72 <__addsf3x+0x18>
 c6c:	71 f4       	brne	.+28     	; 0xc8a <__addsf3x+0x30>
 c6e:	9e f5       	brtc	.+102    	; 0xcd6 <__addsf3x+0x7c>
 c70:	22 c1       	rjmp	.+580    	; 0xeb6 <__fp_zero>
 c72:	0e f4       	brtc	.+2      	; 0xc76 <__addsf3x+0x1c>
 c74:	e0 95       	com	r30
 c76:	0b 2e       	mov	r0, r27
 c78:	ba 2f       	mov	r27, r26
 c7a:	a0 2d       	mov	r26, r0
 c7c:	0b 01       	movw	r0, r22
 c7e:	b9 01       	movw	r22, r18
 c80:	90 01       	movw	r18, r0
 c82:	0c 01       	movw	r0, r24
 c84:	ca 01       	movw	r24, r20
 c86:	a0 01       	movw	r20, r0
 c88:	11 24       	eor	r1, r1
 c8a:	ff 27       	eor	r31, r31
 c8c:	59 1b       	sub	r21, r25
 c8e:	99 f0       	breq	.+38     	; 0xcb6 <__addsf3x+0x5c>
 c90:	59 3f       	cpi	r21, 0xF9	; 249
 c92:	50 f4       	brcc	.+20     	; 0xca8 <__addsf3x+0x4e>
 c94:	50 3e       	cpi	r21, 0xE0	; 224
 c96:	68 f1       	brcs	.+90     	; 0xcf2 <__addsf3x+0x98>
 c98:	1a 16       	cp	r1, r26
 c9a:	f0 40       	sbci	r31, 0x00	; 0
 c9c:	a2 2f       	mov	r26, r18
 c9e:	23 2f       	mov	r18, r19
 ca0:	34 2f       	mov	r19, r20
 ca2:	44 27       	eor	r20, r20
 ca4:	58 5f       	subi	r21, 0xF8	; 248
 ca6:	f3 cf       	rjmp	.-26     	; 0xc8e <__addsf3x+0x34>
 ca8:	46 95       	lsr	r20
 caa:	37 95       	ror	r19
 cac:	27 95       	ror	r18
 cae:	a7 95       	ror	r26
 cb0:	f0 40       	sbci	r31, 0x00	; 0
 cb2:	53 95       	inc	r21
 cb4:	c9 f7       	brne	.-14     	; 0xca8 <__addsf3x+0x4e>
 cb6:	7e f4       	brtc	.+30     	; 0xcd6 <__addsf3x+0x7c>
 cb8:	1f 16       	cp	r1, r31
 cba:	ba 0b       	sbc	r27, r26
 cbc:	62 0b       	sbc	r22, r18
 cbe:	73 0b       	sbc	r23, r19
 cc0:	84 0b       	sbc	r24, r20
 cc2:	ba f0       	brmi	.+46     	; 0xcf2 <__addsf3x+0x98>
 cc4:	91 50       	subi	r25, 0x01	; 1
 cc6:	a1 f0       	breq	.+40     	; 0xcf0 <__addsf3x+0x96>
 cc8:	ff 0f       	add	r31, r31
 cca:	bb 1f       	adc	r27, r27
 ccc:	66 1f       	adc	r22, r22
 cce:	77 1f       	adc	r23, r23
 cd0:	88 1f       	adc	r24, r24
 cd2:	c2 f7       	brpl	.-16     	; 0xcc4 <__addsf3x+0x6a>
 cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <__addsf3x+0x98>
 cd6:	ba 0f       	add	r27, r26
 cd8:	62 1f       	adc	r22, r18
 cda:	73 1f       	adc	r23, r19
 cdc:	84 1f       	adc	r24, r20
 cde:	48 f4       	brcc	.+18     	; 0xcf2 <__addsf3x+0x98>
 ce0:	87 95       	ror	r24
 ce2:	77 95       	ror	r23
 ce4:	67 95       	ror	r22
 ce6:	b7 95       	ror	r27
 ce8:	f7 95       	ror	r31
 cea:	9e 3f       	cpi	r25, 0xFE	; 254
 cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0x96>
 cee:	b3 cf       	rjmp	.-154    	; 0xc56 <__addsf3+0x1e>
 cf0:	93 95       	inc	r25
 cf2:	88 0f       	add	r24, r24
 cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__addsf3x+0x9e>
 cf6:	99 27       	eor	r25, r25
 cf8:	ee 0f       	add	r30, r30
 cfa:	97 95       	ror	r25
 cfc:	87 95       	ror	r24
 cfe:	08 95       	ret

00000d00 <__cmpsf2>:
 d00:	6c d0       	rcall	.+216    	; 0xdda <__fp_cmp>
 d02:	08 f4       	brcc	.+2      	; 0xd06 <__cmpsf2+0x6>
 d04:	81 e0       	ldi	r24, 0x01	; 1
 d06:	08 95       	ret

00000d08 <__fixunssfsi>:
 d08:	bc d0       	rcall	.+376    	; 0xe82 <__fp_splitA>
 d0a:	88 f0       	brcs	.+34     	; 0xd2e <__fixunssfsi+0x26>
 d0c:	9f 57       	subi	r25, 0x7F	; 127
 d0e:	90 f0       	brcs	.+36     	; 0xd34 <__fixunssfsi+0x2c>
 d10:	b9 2f       	mov	r27, r25
 d12:	99 27       	eor	r25, r25
 d14:	b7 51       	subi	r27, 0x17	; 23
 d16:	a0 f0       	brcs	.+40     	; 0xd40 <__fixunssfsi+0x38>
 d18:	d1 f0       	breq	.+52     	; 0xd4e <__fixunssfsi+0x46>
 d1a:	66 0f       	add	r22, r22
 d1c:	77 1f       	adc	r23, r23
 d1e:	88 1f       	adc	r24, r24
 d20:	99 1f       	adc	r25, r25
 d22:	1a f0       	brmi	.+6      	; 0xd2a <__fixunssfsi+0x22>
 d24:	ba 95       	dec	r27
 d26:	c9 f7       	brne	.-14     	; 0xd1a <__fixunssfsi+0x12>
 d28:	12 c0       	rjmp	.+36     	; 0xd4e <__fixunssfsi+0x46>
 d2a:	b1 30       	cpi	r27, 0x01	; 1
 d2c:	81 f0       	breq	.+32     	; 0xd4e <__fixunssfsi+0x46>
 d2e:	c3 d0       	rcall	.+390    	; 0xeb6 <__fp_zero>
 d30:	b1 e0       	ldi	r27, 0x01	; 1
 d32:	08 95       	ret
 d34:	c0 c0       	rjmp	.+384    	; 0xeb6 <__fp_zero>
 d36:	67 2f       	mov	r22, r23
 d38:	78 2f       	mov	r23, r24
 d3a:	88 27       	eor	r24, r24
 d3c:	b8 5f       	subi	r27, 0xF8	; 248
 d3e:	39 f0       	breq	.+14     	; 0xd4e <__fixunssfsi+0x46>
 d40:	b9 3f       	cpi	r27, 0xF9	; 249
 d42:	cc f3       	brlt	.-14     	; 0xd36 <__fixunssfsi+0x2e>
 d44:	86 95       	lsr	r24
 d46:	77 95       	ror	r23
 d48:	67 95       	ror	r22
 d4a:	b3 95       	inc	r27
 d4c:	d9 f7       	brne	.-10     	; 0xd44 <__fixunssfsi+0x3c>
 d4e:	3e f4       	brtc	.+14     	; 0xd5e <__fixunssfsi+0x56>
 d50:	90 95       	com	r25
 d52:	80 95       	com	r24
 d54:	70 95       	com	r23
 d56:	61 95       	neg	r22
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	8f 4f       	sbci	r24, 0xFF	; 255
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	08 95       	ret

00000d60 <__floatunsisf>:
 d60:	e8 94       	clt
 d62:	09 c0       	rjmp	.+18     	; 0xd76 <__floatsisf+0x12>

00000d64 <__floatsisf>:
 d64:	97 fb       	bst	r25, 7
 d66:	3e f4       	brtc	.+14     	; 0xd76 <__floatsisf+0x12>
 d68:	90 95       	com	r25
 d6a:	80 95       	com	r24
 d6c:	70 95       	com	r23
 d6e:	61 95       	neg	r22
 d70:	7f 4f       	sbci	r23, 0xFF	; 255
 d72:	8f 4f       	sbci	r24, 0xFF	; 255
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	99 23       	and	r25, r25
 d78:	a9 f0       	breq	.+42     	; 0xda4 <__floatsisf+0x40>
 d7a:	f9 2f       	mov	r31, r25
 d7c:	96 e9       	ldi	r25, 0x96	; 150
 d7e:	bb 27       	eor	r27, r27
 d80:	93 95       	inc	r25
 d82:	f6 95       	lsr	r31
 d84:	87 95       	ror	r24
 d86:	77 95       	ror	r23
 d88:	67 95       	ror	r22
 d8a:	b7 95       	ror	r27
 d8c:	f1 11       	cpse	r31, r1
 d8e:	f8 cf       	rjmp	.-16     	; 0xd80 <__floatsisf+0x1c>
 d90:	fa f4       	brpl	.+62     	; 0xdd0 <__floatsisf+0x6c>
 d92:	bb 0f       	add	r27, r27
 d94:	11 f4       	brne	.+4      	; 0xd9a <__floatsisf+0x36>
 d96:	60 ff       	sbrs	r22, 0
 d98:	1b c0       	rjmp	.+54     	; 0xdd0 <__floatsisf+0x6c>
 d9a:	6f 5f       	subi	r22, 0xFF	; 255
 d9c:	7f 4f       	sbci	r23, 0xFF	; 255
 d9e:	8f 4f       	sbci	r24, 0xFF	; 255
 da0:	9f 4f       	sbci	r25, 0xFF	; 255
 da2:	16 c0       	rjmp	.+44     	; 0xdd0 <__floatsisf+0x6c>
 da4:	88 23       	and	r24, r24
 da6:	11 f0       	breq	.+4      	; 0xdac <__floatsisf+0x48>
 da8:	96 e9       	ldi	r25, 0x96	; 150
 daa:	11 c0       	rjmp	.+34     	; 0xdce <__floatsisf+0x6a>
 dac:	77 23       	and	r23, r23
 dae:	21 f0       	breq	.+8      	; 0xdb8 <__floatsisf+0x54>
 db0:	9e e8       	ldi	r25, 0x8E	; 142
 db2:	87 2f       	mov	r24, r23
 db4:	76 2f       	mov	r23, r22
 db6:	05 c0       	rjmp	.+10     	; 0xdc2 <__floatsisf+0x5e>
 db8:	66 23       	and	r22, r22
 dba:	71 f0       	breq	.+28     	; 0xdd8 <__floatsisf+0x74>
 dbc:	96 e8       	ldi	r25, 0x86	; 134
 dbe:	86 2f       	mov	r24, r22
 dc0:	70 e0       	ldi	r23, 0x00	; 0
 dc2:	60 e0       	ldi	r22, 0x00	; 0
 dc4:	2a f0       	brmi	.+10     	; 0xdd0 <__floatsisf+0x6c>
 dc6:	9a 95       	dec	r25
 dc8:	66 0f       	add	r22, r22
 dca:	77 1f       	adc	r23, r23
 dcc:	88 1f       	adc	r24, r24
 dce:	da f7       	brpl	.-10     	; 0xdc6 <__floatsisf+0x62>
 dd0:	88 0f       	add	r24, r24
 dd2:	96 95       	lsr	r25
 dd4:	87 95       	ror	r24
 dd6:	97 f9       	bld	r25, 7
 dd8:	08 95       	ret

00000dda <__fp_cmp>:
 dda:	99 0f       	add	r25, r25
 ddc:	00 08       	sbc	r0, r0
 dde:	55 0f       	add	r21, r21
 de0:	aa 0b       	sbc	r26, r26
 de2:	e0 e8       	ldi	r30, 0x80	; 128
 de4:	fe ef       	ldi	r31, 0xFE	; 254
 de6:	16 16       	cp	r1, r22
 de8:	17 06       	cpc	r1, r23
 dea:	e8 07       	cpc	r30, r24
 dec:	f9 07       	cpc	r31, r25
 dee:	c0 f0       	brcs	.+48     	; 0xe20 <__fp_cmp+0x46>
 df0:	12 16       	cp	r1, r18
 df2:	13 06       	cpc	r1, r19
 df4:	e4 07       	cpc	r30, r20
 df6:	f5 07       	cpc	r31, r21
 df8:	98 f0       	brcs	.+38     	; 0xe20 <__fp_cmp+0x46>
 dfa:	62 1b       	sub	r22, r18
 dfc:	73 0b       	sbc	r23, r19
 dfe:	84 0b       	sbc	r24, r20
 e00:	95 0b       	sbc	r25, r21
 e02:	39 f4       	brne	.+14     	; 0xe12 <__fp_cmp+0x38>
 e04:	0a 26       	eor	r0, r26
 e06:	61 f0       	breq	.+24     	; 0xe20 <__fp_cmp+0x46>
 e08:	23 2b       	or	r18, r19
 e0a:	24 2b       	or	r18, r20
 e0c:	25 2b       	or	r18, r21
 e0e:	21 f4       	brne	.+8      	; 0xe18 <__fp_cmp+0x3e>
 e10:	08 95       	ret
 e12:	0a 26       	eor	r0, r26
 e14:	09 f4       	brne	.+2      	; 0xe18 <__fp_cmp+0x3e>
 e16:	a1 40       	sbci	r26, 0x01	; 1
 e18:	a6 95       	lsr	r26
 e1a:	8f ef       	ldi	r24, 0xFF	; 255
 e1c:	81 1d       	adc	r24, r1
 e1e:	81 1d       	adc	r24, r1
 e20:	08 95       	ret

00000e22 <__fp_inf>:
 e22:	97 f9       	bld	r25, 7
 e24:	9f 67       	ori	r25, 0x7F	; 127
 e26:	80 e8       	ldi	r24, 0x80	; 128
 e28:	70 e0       	ldi	r23, 0x00	; 0
 e2a:	60 e0       	ldi	r22, 0x00	; 0
 e2c:	08 95       	ret

00000e2e <__fp_nan>:
 e2e:	9f ef       	ldi	r25, 0xFF	; 255
 e30:	80 ec       	ldi	r24, 0xC0	; 192
 e32:	08 95       	ret

00000e34 <__fp_pscA>:
 e34:	00 24       	eor	r0, r0
 e36:	0a 94       	dec	r0
 e38:	16 16       	cp	r1, r22
 e3a:	17 06       	cpc	r1, r23
 e3c:	18 06       	cpc	r1, r24
 e3e:	09 06       	cpc	r0, r25
 e40:	08 95       	ret

00000e42 <__fp_pscB>:
 e42:	00 24       	eor	r0, r0
 e44:	0a 94       	dec	r0
 e46:	12 16       	cp	r1, r18
 e48:	13 06       	cpc	r1, r19
 e4a:	14 06       	cpc	r1, r20
 e4c:	05 06       	cpc	r0, r21
 e4e:	08 95       	ret

00000e50 <__fp_round>:
 e50:	09 2e       	mov	r0, r25
 e52:	03 94       	inc	r0
 e54:	00 0c       	add	r0, r0
 e56:	11 f4       	brne	.+4      	; 0xe5c <__fp_round+0xc>
 e58:	88 23       	and	r24, r24
 e5a:	52 f0       	brmi	.+20     	; 0xe70 <__fp_round+0x20>
 e5c:	bb 0f       	add	r27, r27
 e5e:	40 f4       	brcc	.+16     	; 0xe70 <__fp_round+0x20>
 e60:	bf 2b       	or	r27, r31
 e62:	11 f4       	brne	.+4      	; 0xe68 <__fp_round+0x18>
 e64:	60 ff       	sbrs	r22, 0
 e66:	04 c0       	rjmp	.+8      	; 0xe70 <__fp_round+0x20>
 e68:	6f 5f       	subi	r22, 0xFF	; 255
 e6a:	7f 4f       	sbci	r23, 0xFF	; 255
 e6c:	8f 4f       	sbci	r24, 0xFF	; 255
 e6e:	9f 4f       	sbci	r25, 0xFF	; 255
 e70:	08 95       	ret

00000e72 <__fp_split3>:
 e72:	57 fd       	sbrc	r21, 7
 e74:	90 58       	subi	r25, 0x80	; 128
 e76:	44 0f       	add	r20, r20
 e78:	55 1f       	adc	r21, r21
 e7a:	59 f0       	breq	.+22     	; 0xe92 <__fp_splitA+0x10>
 e7c:	5f 3f       	cpi	r21, 0xFF	; 255
 e7e:	71 f0       	breq	.+28     	; 0xe9c <__fp_splitA+0x1a>
 e80:	47 95       	ror	r20

00000e82 <__fp_splitA>:
 e82:	88 0f       	add	r24, r24
 e84:	97 fb       	bst	r25, 7
 e86:	99 1f       	adc	r25, r25
 e88:	61 f0       	breq	.+24     	; 0xea2 <__fp_splitA+0x20>
 e8a:	9f 3f       	cpi	r25, 0xFF	; 255
 e8c:	79 f0       	breq	.+30     	; 0xeac <__fp_splitA+0x2a>
 e8e:	87 95       	ror	r24
 e90:	08 95       	ret
 e92:	12 16       	cp	r1, r18
 e94:	13 06       	cpc	r1, r19
 e96:	14 06       	cpc	r1, r20
 e98:	55 1f       	adc	r21, r21
 e9a:	f2 cf       	rjmp	.-28     	; 0xe80 <__fp_split3+0xe>
 e9c:	46 95       	lsr	r20
 e9e:	f1 df       	rcall	.-30     	; 0xe82 <__fp_splitA>
 ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <__fp_splitA+0x30>
 ea2:	16 16       	cp	r1, r22
 ea4:	17 06       	cpc	r1, r23
 ea6:	18 06       	cpc	r1, r24
 ea8:	99 1f       	adc	r25, r25
 eaa:	f1 cf       	rjmp	.-30     	; 0xe8e <__fp_splitA+0xc>
 eac:	86 95       	lsr	r24
 eae:	71 05       	cpc	r23, r1
 eb0:	61 05       	cpc	r22, r1
 eb2:	08 94       	sec
 eb4:	08 95       	ret

00000eb6 <__fp_zero>:
 eb6:	e8 94       	clt

00000eb8 <__fp_szero>:
 eb8:	bb 27       	eor	r27, r27
 eba:	66 27       	eor	r22, r22
 ebc:	77 27       	eor	r23, r23
 ebe:	cb 01       	movw	r24, r22
 ec0:	97 f9       	bld	r25, 7
 ec2:	08 95       	ret

00000ec4 <__gesf2>:
 ec4:	8a df       	rcall	.-236    	; 0xdda <__fp_cmp>
 ec6:	08 f4       	brcc	.+2      	; 0xeca <__gesf2+0x6>
 ec8:	8f ef       	ldi	r24, 0xFF	; 255
 eca:	08 95       	ret

00000ecc <__mulsf3>:
 ecc:	0a d0       	rcall	.+20     	; 0xee2 <__mulsf3x>
 ece:	c0 cf       	rjmp	.-128    	; 0xe50 <__fp_round>
 ed0:	b1 df       	rcall	.-158    	; 0xe34 <__fp_pscA>
 ed2:	28 f0       	brcs	.+10     	; 0xede <__mulsf3+0x12>
 ed4:	b6 df       	rcall	.-148    	; 0xe42 <__fp_pscB>
 ed6:	18 f0       	brcs	.+6      	; 0xede <__mulsf3+0x12>
 ed8:	95 23       	and	r25, r21
 eda:	09 f0       	breq	.+2      	; 0xede <__mulsf3+0x12>
 edc:	a2 cf       	rjmp	.-188    	; 0xe22 <__fp_inf>
 ede:	a7 cf       	rjmp	.-178    	; 0xe2e <__fp_nan>
 ee0:	eb cf       	rjmp	.-42     	; 0xeb8 <__fp_szero>

00000ee2 <__mulsf3x>:
 ee2:	c7 df       	rcall	.-114    	; 0xe72 <__fp_split3>
 ee4:	a8 f3       	brcs	.-22     	; 0xed0 <__mulsf3+0x4>

00000ee6 <__mulsf3_pse>:
 ee6:	99 23       	and	r25, r25
 ee8:	d9 f3       	breq	.-10     	; 0xee0 <__mulsf3+0x14>
 eea:	55 23       	and	r21, r21
 eec:	c9 f3       	breq	.-14     	; 0xee0 <__mulsf3+0x14>
 eee:	95 0f       	add	r25, r21
 ef0:	50 e0       	ldi	r21, 0x00	; 0
 ef2:	55 1f       	adc	r21, r21
 ef4:	aa 27       	eor	r26, r26
 ef6:	ee 27       	eor	r30, r30
 ef8:	ff 27       	eor	r31, r31
 efa:	bb 27       	eor	r27, r27
 efc:	00 24       	eor	r0, r0
 efe:	08 94       	sec
 f00:	67 95       	ror	r22
 f02:	20 f4       	brcc	.+8      	; 0xf0c <__mulsf3_pse+0x26>
 f04:	e2 0f       	add	r30, r18
 f06:	f3 1f       	adc	r31, r19
 f08:	b4 1f       	adc	r27, r20
 f0a:	0a 1e       	adc	r0, r26
 f0c:	22 0f       	add	r18, r18
 f0e:	33 1f       	adc	r19, r19
 f10:	44 1f       	adc	r20, r20
 f12:	aa 1f       	adc	r26, r26
 f14:	66 95       	lsr	r22
 f16:	a9 f7       	brne	.-22     	; 0xf02 <__mulsf3_pse+0x1c>
 f18:	77 95       	ror	r23
 f1a:	30 f4       	brcc	.+12     	; 0xf28 <__mulsf3_pse+0x42>
 f1c:	f3 0f       	add	r31, r19
 f1e:	b4 1f       	adc	r27, r20
 f20:	0a 1e       	adc	r0, r26
 f22:	12 1e       	adc	r1, r18
 f24:	08 f4       	brcc	.+2      	; 0xf28 <__mulsf3_pse+0x42>
 f26:	63 95       	inc	r22
 f28:	33 0f       	add	r19, r19
 f2a:	44 1f       	adc	r20, r20
 f2c:	aa 1f       	adc	r26, r26
 f2e:	22 1f       	adc	r18, r18
 f30:	76 95       	lsr	r23
 f32:	99 f7       	brne	.-26     	; 0xf1a <__mulsf3_pse+0x34>
 f34:	87 95       	ror	r24
 f36:	20 f4       	brcc	.+8      	; 0xf40 <__mulsf3_pse+0x5a>
 f38:	b4 0f       	add	r27, r20
 f3a:	0a 1e       	adc	r0, r26
 f3c:	12 1e       	adc	r1, r18
 f3e:	63 1f       	adc	r22, r19
 f40:	44 0f       	add	r20, r20
 f42:	aa 1f       	adc	r26, r26
 f44:	22 1f       	adc	r18, r18
 f46:	33 1f       	adc	r19, r19
 f48:	86 95       	lsr	r24
 f4a:	a9 f7       	brne	.-22     	; 0xf36 <__mulsf3_pse+0x50>
 f4c:	86 2f       	mov	r24, r22
 f4e:	71 2d       	mov	r23, r1
 f50:	60 2d       	mov	r22, r0
 f52:	11 24       	eor	r1, r1
 f54:	9f 57       	subi	r25, 0x7F	; 127
 f56:	50 40       	sbci	r21, 0x00	; 0
 f58:	8a f0       	brmi	.+34     	; 0xf7c <__mulsf3_pse+0x96>
 f5a:	e1 f0       	breq	.+56     	; 0xf94 <__mulsf3_pse+0xae>
 f5c:	88 23       	and	r24, r24
 f5e:	4a f0       	brmi	.+18     	; 0xf72 <__mulsf3_pse+0x8c>
 f60:	ee 0f       	add	r30, r30
 f62:	ff 1f       	adc	r31, r31
 f64:	bb 1f       	adc	r27, r27
 f66:	66 1f       	adc	r22, r22
 f68:	77 1f       	adc	r23, r23
 f6a:	88 1f       	adc	r24, r24
 f6c:	91 50       	subi	r25, 0x01	; 1
 f6e:	50 40       	sbci	r21, 0x00	; 0
 f70:	a9 f7       	brne	.-22     	; 0xf5c <__mulsf3_pse+0x76>
 f72:	9e 3f       	cpi	r25, 0xFE	; 254
 f74:	51 05       	cpc	r21, r1
 f76:	70 f0       	brcs	.+28     	; 0xf94 <__mulsf3_pse+0xae>
 f78:	54 cf       	rjmp	.-344    	; 0xe22 <__fp_inf>
 f7a:	9e cf       	rjmp	.-196    	; 0xeb8 <__fp_szero>
 f7c:	5f 3f       	cpi	r21, 0xFF	; 255
 f7e:	ec f3       	brlt	.-6      	; 0xf7a <__mulsf3_pse+0x94>
 f80:	98 3e       	cpi	r25, 0xE8	; 232
 f82:	dc f3       	brlt	.-10     	; 0xf7a <__mulsf3_pse+0x94>
 f84:	86 95       	lsr	r24
 f86:	77 95       	ror	r23
 f88:	67 95       	ror	r22
 f8a:	b7 95       	ror	r27
 f8c:	f7 95       	ror	r31
 f8e:	e7 95       	ror	r30
 f90:	9f 5f       	subi	r25, 0xFF	; 255
 f92:	c1 f7       	brne	.-16     	; 0xf84 <__mulsf3_pse+0x9e>
 f94:	fe 2b       	or	r31, r30
 f96:	88 0f       	add	r24, r24
 f98:	91 1d       	adc	r25, r1
 f9a:	96 95       	lsr	r25
 f9c:	87 95       	ror	r24
 f9e:	97 f9       	bld	r25, 7
 fa0:	08 95       	ret

00000fa2 <_exit>:
 fa2:	f8 94       	cli

00000fa4 <__stop_program>:
 fa4:	ff cf       	rjmp	.-2      	; 0xfa4 <__stop_program>
