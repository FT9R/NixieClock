
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000120a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  00800100  00800100  0000120a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000120a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f1  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b84  00000000  00000000  00002db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d64  00000000  00000000  00003935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  0000469c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072d  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000787  00000000  00000000  00005111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
       4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
       6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
       8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
       a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
       c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
       e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
      10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
      12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
      14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
      16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
      18:	d9 c0       	rjmp	.+434    	; 0x1cc <__vector_12>
      1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
      1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
      1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
      20:	91 c1       	rjmp	.+802    	; 0x344 <__vector_16>
      22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
      24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
      26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf ef       	ldi	r28, 0xFF	; 255
      2e:	d2 e0       	ldi	r29, 0x02	; 2
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
      34:	21 e0       	ldi	r18, 0x01	; 1
      36:	a0 e0       	ldi	r26, 0x00	; 0
      38:	b1 e0       	ldi	r27, 0x01	; 1
      3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
      3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
      3e:	a0 36       	cpi	r26, 0x60	; 96
      40:	b2 07       	cpc	r27, r18
      42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
      44:	fe d1       	rcall	.+1020   	; 0x442 <main>
      46:	a5 c8       	rjmp	.-3766   	; 0xfffff192 <__eeprom_end+0xff7ef192>

00000048 <__bad_interrupt>:
      48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <AnodeSwitch>:
#include "indication.h"

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
      4a:	9f ef       	ldi	r25, 0xFF	; 255
      4c:	98 0f       	add	r25, r24
      4e:	96 30       	cpi	r25, 0x06	; 6
      50:	38 f4       	brcc	.+14     	; 0x60 <AnodeSwitch+0x16>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
      52:	9b b1       	in	r25, 0x0b	; 11
      54:	9f 71       	andi	r25, 0x1F	; 31
      56:	82 95       	swap	r24
      58:	88 0f       	add	r24, r24
      5a:	80 7e       	andi	r24, 0xE0	; 224
      5c:	89 2b       	or	r24, r25
      5e:	8b b9       	out	0x0b, r24	; 11
}
      60:	08 95       	ret

00000062 <CathodeSwitch>:

void CathodeSwitch(uint8_t cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
      62:	8a 30       	cpi	r24, 0x0A	; 10
      64:	28 f4       	brcc	.+10     	; 0x70 <CathodeSwitch+0xe>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
      66:	9b b1       	in	r25, 0x0b	; 11
      68:	91 7e       	andi	r25, 0xE1	; 225
      6a:	88 0f       	add	r24, r24
      6c:	89 2b       	or	r24, r25
      6e:	8b b9       	out	0x0b, r24	; 11
}
      70:	08 95       	ret

00000072 <Display_DeadTime>:

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
      72:	8b b1       	in	r24, 0x0b	; 11
      74:	81 70       	andi	r24, 0x01	; 1
      76:	88 61       	ori	r24, 0x18	; 24
      78:	8b b9       	out	0x0b, r24	; 11
}
      7a:	08 95       	ret

0000007c <SoftStart>:

void SoftStart(struct Indication_s *indication, struct Voltage_s *voltage)
{
      7c:	cf 92       	push	r12
      7e:	df 92       	push	r13
      80:	ef 92       	push	r14
      82:	ff 92       	push	r15
      84:	cf 93       	push	r28
      86:	df 93       	push	r29
    if ((!indication->pause) && (!indication->isTurnedOff) && (voltage->pid.setPoint <= VOUT_TASK))
      88:	fc 01       	movw	r30, r24
      8a:	20 85       	ldd	r18, Z+8	; 0x08
      8c:	21 11       	cpse	r18, r1
      8e:	1c c0       	rjmp	.+56     	; 0xc8 <SoftStart+0x4c>
      90:	81 85       	ldd	r24, Z+9	; 0x09
      92:	81 11       	cpse	r24, r1
      94:	19 c0       	rjmp	.+50     	; 0xc8 <SoftStart+0x4c>
      96:	eb 01       	movw	r28, r22
      98:	cd a8       	ldd	r12, Y+53	; 0x35
      9a:	de a8       	ldd	r13, Y+54	; 0x36
      9c:	ef a8       	ldd	r14, Y+55	; 0x37
      9e:	f8 ac       	ldd	r15, Y+56	; 0x38
      a0:	20 e0       	ldi	r18, 0x00	; 0
      a2:	30 e0       	ldi	r19, 0x00	; 0
      a4:	44 e3       	ldi	r20, 0x34	; 52
      a6:	53 e4       	ldi	r21, 0x43	; 67
      a8:	c7 01       	movw	r24, r14
      aa:	b6 01       	movw	r22, r12
      ac:	21 d7       	rcall	.+3650   	; 0xef0 <__cmpsf2>
      ae:	18 16       	cp	r1, r24
      b0:	5c f0       	brlt	.+22     	; 0xc8 <SoftStart+0x4c>
        voltage->pid.setPoint += 0.01;
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	37 ed       	ldi	r19, 0xD7	; 215
      b6:	43 e2       	ldi	r20, 0x23	; 35
      b8:	5c e3       	ldi	r21, 0x3C	; 60
      ba:	c7 01       	movw	r24, r14
      bc:	b6 01       	movw	r22, r12
      be:	b4 d6       	rcall	.+3432   	; 0xe28 <__addsf3>
      c0:	6d ab       	std	Y+53, r22	; 0x35
      c2:	7e ab       	std	Y+54, r23	; 0x36
      c4:	8f ab       	std	Y+55, r24	; 0x37
      c6:	98 af       	std	Y+56, r25	; 0x38
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	ff 90       	pop	r15
      ce:	ef 90       	pop	r14
      d0:	df 90       	pop	r13
      d2:	cf 90       	pop	r12
      d4:	08 95       	ret

000000d6 <SoftTurnoff>:

void SoftTurnoff(struct Indication_s *indication, struct Voltage_s *voltage)
{
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
    if ((indication->isTurnedOff) && (voltage->pid.setPoint > 0.0))
      e2:	fc 01       	movw	r30, r24
      e4:	81 85       	ldd	r24, Z+9	; 0x09
      e6:	88 23       	and	r24, r24
      e8:	c1 f0       	breq	.+48     	; 0x11a <SoftTurnoff+0x44>
      ea:	eb 01       	movw	r28, r22
      ec:	cd a8       	ldd	r12, Y+53	; 0x35
      ee:	de a8       	ldd	r13, Y+54	; 0x36
      f0:	ef a8       	ldd	r14, Y+55	; 0x37
      f2:	f8 ac       	ldd	r15, Y+56	; 0x38
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	a9 01       	movw	r20, r18
      fa:	c7 01       	movw	r24, r14
      fc:	b6 01       	movw	r22, r12
      fe:	da d7       	rcall	.+4020   	; 0x10b4 <__gesf2>
     100:	18 16       	cp	r1, r24
     102:	5c f4       	brge	.+22     	; 0x11a <SoftTurnoff+0x44>
        voltage->pid.setPoint -= 0.005;
     104:	2a e0       	ldi	r18, 0x0A	; 10
     106:	37 ed       	ldi	r19, 0xD7	; 215
     108:	43 ea       	ldi	r20, 0xA3	; 163
     10a:	5b e3       	ldi	r21, 0x3B	; 59
     10c:	c7 01       	movw	r24, r14
     10e:	b6 01       	movw	r22, r12
     110:	8a d6       	rcall	.+3348   	; 0xe26 <__subsf3>
     112:	6d ab       	std	Y+53, r22	; 0x35
     114:	7e ab       	std	Y+54, r23	; 0x36
     116:	8f ab       	std	Y+55, r24	; 0x37
     118:	98 af       	std	Y+56, r25	; 0x38
     11a:	df 91       	pop	r29
     11c:	cf 91       	pop	r28
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret

00000128 <IO_Init>:
#include "init.h"

void IO_Init(void)
{
    /* PORTA */
    MODIFY_REG(DDRA, 0xFF, (1 << 2) | (1 << 3)); // LDP and RDP
     128:	8d b1       	in	r24, 0x0d	; 13
     12a:	8c e0       	ldi	r24, 0x0C	; 12
     12c:	8d b9       	out	0x0d, r24	; 13
    CLEAR_REG(PORTA);
     12e:	1e b8       	out	0x0e, r1	; 14
    CLEAR_BIT(DDRA, 1 << 0); // TimeRes
     130:	68 98       	cbi	0x0d, 0	; 13
    SET_BIT(PORTA, 1 << 0); // Pull up
     132:	70 9a       	sbi	0x0e, 0	; 14

    /* PORTB */
    SET_BIT(DDRB, 1 << 2); // Boost PWM
     134:	22 9a       	sbi	0x04, 2	; 4
    CLEAR_REG(PORTB);
     136:	15 b8       	out	0x05, r1	; 5

    /* PORTD */
    MODIFY_REG(DDRD, 0xFF, 0xFF);
     138:	8a b1       	in	r24, 0x0a	; 10
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	8a b9       	out	0x0a, r24	; 10
    CLEAR_REG(PORTD);
     13e:	1b b8       	out	0x0b, r1	; 11
}
     140:	08 95       	ret

00000142 <ADC_Init>:

void ADC_Init(void)
{
    MODIFY_REG(ADMUX, 0x0F, 0x00); // ADC0
     142:	ec e7       	ldi	r30, 0x7C	; 124
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	80 7f       	andi	r24, 0xF0	; 240
     14a:	80 83       	st	Z, r24
    CLEAR_BIT(ADMUX, 1 << ADLAR); // Right adjust
     14c:	80 81       	ld	r24, Z
     14e:	8f 7d       	andi	r24, 0xDF	; 223
     150:	80 83       	st	Z, r24
    CLEAR_BIT(ADMUX, 1 << REFS0); // Internal 1.1V voltage reference
     152:	80 81       	ld	r24, Z
     154:	8f 7b       	andi	r24, 0xBF	; 191
     156:	80 83       	st	Z, r24
    MODIFY_REG(ADCSRA, 0x07, (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); // 128x prescaler
     158:	ea e7       	ldi	r30, 0x7A	; 122
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	87 60       	ori	r24, 0x07	; 7
     160:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADIE); // ADC Interrupt Enable
     162:	80 81       	ld	r24, Z
     164:	88 60       	ori	r24, 0x08	; 8
     166:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADATE); // ADC Auto Trigger Enable
     168:	80 81       	ld	r24, Z
     16a:	80 62       	ori	r24, 0x20	; 32
     16c:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADEN); // ADC Enable
     16e:	80 81       	ld	r24, Z
     170:	80 68       	ori	r24, 0x80	; 128
     172:	80 83       	st	Z, r24
    SET_BIT(ADCSRA, 1 << ADSC); // ADC Start Conversion
     174:	80 81       	ld	r24, Z
     176:	80 64       	ori	r24, 0x40	; 64
     178:	80 83       	st	Z, r24
}
     17a:	08 95       	ret

0000017c <TIMx_Init>:

void TIMx_Init(uint8_t timx)
{
    switch (timx)
     17c:	88 23       	and	r24, r24
     17e:	c1 f0       	breq	.+48     	; 0x1b0 <TIMx_Init+0x34>
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	a9 f4       	brne	.+42     	; 0x1ae <TIMx_Init+0x32>
        SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
        OCR0A = 173 - 1;
        break;

    case 1: // F = 31.25kHz; T = 32us
        SET_BIT(TCCR1A, 1 << WGM11); // Fast PWM, 9-bit
     184:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     188:	82 60       	ori	r24, 0x02	; 2
     18a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
        SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     18e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     192:	80 62       	ori	r24, 0x20	; 32
     194:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
        SET_BIT(TCCR1B, 1 << CS10); // clk/1
     198:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     19c:	81 60       	ori	r24, 0x01	; 1
     19e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
        SET_BIT(TCCR1B, 1 << WGM12); // Fast PWM, 9-bit
     1a2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
        break;
    }
     1ac:	08 95       	ret
     1ae:	08 95       	ret
void TIMx_Init(uint8_t timx)
{
    switch (timx)
    {
    case 0: // F = 1445Hz; T = 692us
        SET_BIT(TCCR0A, (1 << CS00) | (1 << CS01)); // clk/64
     1b0:	85 b5       	in	r24, 0x25	; 37
     1b2:	83 60       	ori	r24, 0x03	; 3
     1b4:	85 bd       	out	0x25, r24	; 37
        SET_BIT(TCCR0A, 1 << CTC0); // CTC EN
     1b6:	85 b5       	in	r24, 0x25	; 37
     1b8:	88 60       	ori	r24, 0x08	; 8
     1ba:	85 bd       	out	0x25, r24	; 37
        SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
     1bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
     1c0:	82 60       	ori	r24, 0x02	; 2
     1c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
        OCR0A = 173 - 1;
     1c6:	8c ea       	ldi	r24, 0xAC	; 172
     1c8:	87 bd       	out	0x27, r24	; 39
        break;
     1ca:	08 95       	ret

000001cc <__vector_12>:
#include "main.h"

ISR(TIMER0_COMPA_vect)
{
     1cc:	1f 92       	push	r1
     1ce:	0f 92       	push	r0
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	2f 93       	push	r18
     1d8:	3f 93       	push	r19
     1da:	4f 93       	push	r20
     1dc:	5f 93       	push	r21
     1de:	6f 93       	push	r22
     1e0:	7f 93       	push	r23
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
     1e6:	af 93       	push	r26
     1e8:	bf 93       	push	r27
     1ea:	ef 93       	push	r30
     1ec:	ff 93       	push	r31
    if (indication.pause)
     1ee:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x8>
     1f2:	81 11       	cpse	r24, r1
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__DATA_REGION_LENGTH__+0x44>
     1f6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
        return;

    switch (indication.dispMode)
     1fa:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <indication+0x7>
     1fe:	91 30       	cpi	r25, 0x01	; 1
     200:	91 f1       	breq	.+100    	; 0x266 <__DATA_REGION_LENGTH__+0x66>
     202:	08 f4       	brcc	.+2      	; 0x206 <__DATA_REGION_LENGTH__+0x6>
     204:	44 c0       	rjmp	.+136    	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
     206:	92 30       	cpi	r25, 0x02	; 2
     208:	09 f4       	brne	.+2      	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     20a:	41 c0       	rjmp	.+130    	; 0x28e <__DATA_REGION_LENGTH__+0x8e>
            break;
        }
        break;
    }

    if (++indication.counter > 12)
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	8d 30       	cpi	r24, 0x0D	; 13
     210:	08 f0       	brcs	.+2      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
        indication.counter = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <indication+0x6>
    ++cad.counter;
     218:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cad>
     21c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <cad+0x1>
     220:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <cad+0x2>
     224:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <cad+0x3>
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	a1 1d       	adc	r26, r1
     22c:	b1 1d       	adc	r27, r1
     22e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cad>
     232:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <cad+0x1>
     236:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <cad+0x2>
     23a:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <cad+0x3>
    voltage.pid.run = true;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <voltage+0x3d>
}
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti
            break;
        }
        break;

    case DISPLAY_TEMPERATURE:
        switch (indication.counter)
     266:	ef ef       	ldi	r30, 0xFF	; 255
     268:	e8 0f       	add	r30, r24
     26a:	ec 30       	cpi	r30, 0x0C	; 12
     26c:	78 f6       	brcc	.-98     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	e5 5c       	subi	r30, 0xC5	; 197
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	09 94       	ijmp
     276:	24 c0       	rjmp	.+72     	; 0x2c0 <__DATA_REGION_LENGTH__+0xc0>
     278:	1f c0       	rjmp	.+62     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     27a:	1e c0       	rjmp	.+60     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     27c:	3a c0       	rjmp	.+116    	; 0x2f2 <__DATA_REGION_LENGTH__+0xf2>
     27e:	1c c0       	rjmp	.+56     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     280:	1b c0       	rjmp	.+54     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     282:	2e c0       	rjmp	.+92     	; 0x2e0 <__DATA_REGION_LENGTH__+0xe0>
     284:	19 c0       	rjmp	.+50     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     286:	18 c0       	rjmp	.+48     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     288:	23 c0       	rjmp	.+70     	; 0x2d0 <__DATA_REGION_LENGTH__+0xd0>
     28a:	16 c0       	rjmp	.+44     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     28c:	15 c0       	rjmp	.+42     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>

    switch (indication.dispMode)
    {
    case DISPLAY_TIME:
    case DISPLAY_CAD:
        switch (indication.counter)
     28e:	ef ef       	ldi	r30, 0xFF	; 255
     290:	e8 0f       	add	r30, r24
     292:	ec 30       	cpi	r30, 0x0C	; 12
     294:	08 f0       	brcs	.+2      	; 0x298 <__DATA_REGION_LENGTH__+0x98>
     296:	ba cf       	rjmp	.-140    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	e0 5b       	subi	r30, 0xB0	; 176
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	09 94       	ijmp
     2a0:	49 c0       	rjmp	.+146    	; 0x334 <__stack+0x35>
     2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2a4:	3f c0       	rjmp	.+126    	; 0x324 <__stack+0x25>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <__DATA_REGION_LENGTH__+0xc0>
     2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2ac:	33 c0       	rjmp	.+102    	; 0x314 <__stack+0x15>
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2b0:	29 c0       	rjmp	.+82     	; 0x304 <__stack+0x5>
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
     2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <__DATA_REGION_LENGTH__+0xd0>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
        case 4:
        case 6:
        case 8:
        case 10:
        case 12:
            Display_DeadTime();
     2b8:	dc de       	rcall	.-584    	; 0x72 <Display_DeadTime>
     2ba:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2be:	a6 cf       	rjmp	.-180    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit2);
            break;
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	c3 de       	rcall	.-634    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit3);
     2c4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <indication+0x2>
     2c8:	cc de       	rcall	.-616    	; 0x62 <CathodeSwitch>
     2ca:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2ce:	9e cf       	rjmp	.-196    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit5);
            break;
        case 11:
            AnodeSwitch((indication.counter + 1) / 2);
     2d0:	86 e0       	ldi	r24, 0x06	; 6
     2d2:	bb de       	rcall	.-650    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit6);
     2d4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication+0x5>
     2d8:	c4 de       	rcall	.-632    	; 0x62 <CathodeSwitch>
     2da:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2de:	96 cf       	rjmp	.-212    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
            AnodeSwitch(4u);
            CathodeSwitch(indication.digit4);
            SET_BIT(PORTA, 1 << 3); // RDP turn on
            break;
        case 7:
            AnodeSwitch(5u);
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	b3 de       	rcall	.-666    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit5);
     2e4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x4>
     2e8:	bc de       	rcall	.-648    	; 0x62 <CathodeSwitch>
            CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     2ea:	73 98       	cbi	0x0e, 3	; 14
     2ec:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     2f0:	8d cf       	rjmp	.-230    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 1:
            AnodeSwitch(3u);
            CathodeSwitch(indication.digit3);
            break;
        case 4:
            AnodeSwitch(4u);
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	aa de       	rcall	.-684    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit4);
     2f6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x3>
     2fa:	b3 de       	rcall	.-666    	; 0x62 <CathodeSwitch>
            SET_BIT(PORTA, 1 << 3); // RDP turn on
     2fc:	73 9a       	sbi	0x0e, 3	; 14
     2fe:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     302:	84 cf       	rjmp	.-248    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit4);
            break;
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
     304:	85 e0       	ldi	r24, 0x05	; 5
     306:	a1 de       	rcall	.-702    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit5);
     308:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <indication+0x4>
     30c:	aa de       	rcall	.-684    	; 0x62 <CathodeSwitch>
     30e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     312:	7c cf       	rjmp	.-264    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit3);
            break;
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
     314:	84 e0       	ldi	r24, 0x04	; 4
     316:	99 de       	rcall	.-718    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit4);
     318:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <indication+0x3>
     31c:	a2 de       	rcall	.-700    	; 0x62 <CathodeSwitch>
     31e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     322:	74 cf       	rjmp	.-280    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit1);
            break;
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	91 de       	rcall	.-734    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit2);
     328:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <indication+0x1>
     32c:	9a de       	rcall	.-716    	; 0x62 <CathodeSwitch>
     32e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     332:	6c cf       	rjmp	.-296    	; 0x20c <__DATA_REGION_LENGTH__+0xc>
    case DISPLAY_TIME:
    case DISPLAY_CAD:
        switch (indication.counter)
        {
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	89 de       	rcall	.-750    	; 0x4a <AnodeSwitch>
            CathodeSwitch(indication.digit1);
     338:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <indication>
     33c:	92 de       	rcall	.-732    	; 0x62 <CathodeSwitch>
     33e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x6>
            break;
     342:	64 cf       	rjmp	.-312    	; 0x20c <__DATA_REGION_LENGTH__+0xc>

00000344 <__vector_16>:
    ++cad.counter;
    voltage.pid.run = true;
}

ISR(ADC_vect)
{
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	2f 93       	push	r18
     350:	3f 93       	push	r19
     352:	4f 93       	push	r20
     354:	5f 93       	push	r21
     356:	6f 93       	push	r22
     358:	7f 93       	push	r23
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
    if (++voltage.adc.counter <= ADC_SAMPLES)
     366:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <voltage+0x10>
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	28 0f       	add	r18, r24
     36e:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <voltage+0x10>
     372:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <voltage+0xc>
     376:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <voltage+0xd>
     37a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <voltage+0xe>
     37e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <voltage+0xf>
     382:	25 36       	cpi	r18, 0x65	; 101
     384:	08 f4       	brcc	.+2      	; 0x388 <__vector_16+0x44>
     386:	4a c0       	rjmp	.+148    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
        voltage.adc.sum += ADC;
    else
    {
        voltage.adc.mean = voltage.adc.sum / ADC_SAMPLES;
     388:	24 e6       	ldi	r18, 0x64	; 100
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	28 d5       	rcall	.+2640   	; 0xde2 <__udivmodsi4>
     392:	ca 01       	movw	r24, r20
     394:	b9 01       	movw	r22, r18
     396:	dc d5       	rcall	.+3000   	; 0xf50 <__floatunsisf>
     398:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <voltage+0x8>
     39c:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <voltage+0x9>
     3a0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <voltage+0xa>
     3a4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <voltage+0xb>
        voltage.adc.value = voltage.adc.mean * VREF / 1024;
     3a8:	2d ec       	ldi	r18, 0xCD	; 205
     3aa:	3c ec       	ldi	r19, 0xCC	; 204
     3ac:	4c e8       	ldi	r20, 0x8C	; 140
     3ae:	5a e3       	ldi	r21, 0x3A	; 58
     3b0:	85 d6       	rcall	.+3338   	; 0x10bc <__mulsf3>
     3b2:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <voltage>
     3b6:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <voltage+0x1>
     3ba:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <voltage+0x2>
     3be:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <voltage+0x3>
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
        voltage.adc.valueScaled *= VOUT_REGL_SLOPE;
     3c2:	2a e7       	ldi	r18, 0x7A	; 122
     3c4:	32 e9       	ldi	r19, 0x92	; 146
     3c6:	48 e5       	ldi	r20, 0x58	; 88
     3c8:	53 e4       	ldi	r21, 0x43	; 67
     3ca:	78 d6       	rcall	.+3312   	; 0x10bc <__mulsf3>
        voltage.adc.valueScaled += VOUT_REGL_INTERCEPT;
     3cc:	2a e4       	ldi	r18, 0x4A	; 74
     3ce:	33 ed       	ldi	r19, 0xD3	; 211
     3d0:	49 e8       	ldi	r20, 0x89	; 137
     3d2:	5f e3       	ldi	r21, 0x3F	; 63
     3d4:	29 d5       	rcall	.+2642   	; 0xe28 <__addsf3>
     3d6:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <voltage+0x4>
     3da:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <voltage+0x5>
     3de:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <voltage+0x6>
     3e2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <voltage+0x7>
        voltage.adc.sum = 0;
     3e6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <voltage+0xc>
     3ea:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <voltage+0xd>
     3ee:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <voltage+0xe>
     3f2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <voltage+0xf>
        voltage.adc.counter = 0;
     3f6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <voltage+0x10>
    }
}
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti
}

ISR(ADC_vect)
{
    if (++voltage.adc.counter <= ADC_SAMPLES)
        voltage.adc.sum += ADC;
     41c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
     420:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
     424:	ab 01       	movw	r20, r22
     426:	bc 01       	movw	r22, r24
     428:	42 0f       	add	r20, r18
     42a:	53 1f       	adc	r21, r19
     42c:	61 1d       	adc	r22, r1
     42e:	71 1d       	adc	r23, r1
     430:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <voltage+0xc>
     434:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <voltage+0xd>
     438:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <voltage+0xe>
     43c:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <voltage+0xf>
     440:	dc cf       	rjmp	.-72     	; 0x3fa <__vector_16+0xb6>

00000442 <main>:
    }
}

int main(void)
{
    voltage.pid.pidData.Kp = K_P;
     442:	8a e0       	ldi	r24, 0x0A	; 10
     444:	97 ed       	ldi	r25, 0xD7	; 215
     446:	a3 e2       	ldi	r26, 0x23	; 35
     448:	bc e3       	ldi	r27, 0x3C	; 60
     44a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <voltage+0x29>
     44e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <voltage+0x2a>
     452:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <voltage+0x2b>
     456:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <voltage+0x2c>
    voltage.pid.pidData.Ki = K_I;
     45a:	87 e1       	ldi	r24, 0x17	; 23
     45c:	97 eb       	ldi	r25, 0xB7	; 183
     45e:	a1 e5       	ldi	r26, 0x51	; 81
     460:	b8 e3       	ldi	r27, 0x38	; 56
     462:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <voltage+0x2d>
     466:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <voltage+0x2e>
     46a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <voltage+0x2f>
     46e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <voltage+0x30>
    voltage.pid.pidData.Kd = K_D;
     472:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <voltage+0x31>
     476:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <voltage+0x32>
     47a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <voltage+0x33>
     47e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <voltage+0x34>
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	8e e1       	ldi	r24, 0x1E	; 30
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	f9 d3       	rcall	.+2034   	; 0xc82 <arm_pid_init_f32>
    IO_Init();
     490:	4b de       	rcall	.-874    	; 0x128 <IO_Init>
    TIMx_Init(0u);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	73 de       	rcall	.-794    	; 0x17c <TIMx_Init>
    TIMx_Init(1u);
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	71 de       	rcall	.-798    	; 0x17c <TIMx_Init>
    ADC_Init();
     49a:	53 de       	rcall	.-858    	; 0x142 <ADC_Init>
    TWI_Init();
     49c:	54 d4       	rcall	.+2216   	; 0xd46 <TWI_Init>
    USER_LED_ON;
     49e:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	37 ea       	ldi	r19, 0xA7	; 167
     4a4:	81 e6       	ldi	r24, 0x61	; 97
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	30 40       	sbci	r19, 0x00	; 0
     4aa:	80 40       	sbci	r24, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <main+0x64>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <main+0x6e>
     4b0:	00 00       	nop
    _delay_ms(2000);
    USER_LED_OFF;
     4b2:	58 98       	cbi	0x0b, 0	; 11
    sei();
     4b4:	78 94       	sei

    /* PCF8563 CLKOUT turnoff */
    TWI_Start();
     4b6:	4b d4       	rcall	.+2198   	; 0xd4e <TWI_Start>
    TWI_SendByte(0xA2); // Device address + write bit
     4b8:	82 ea       	ldi	r24, 0xA2	; 162
     4ba:	55 d4       	rcall	.+2218   	; 0xd66 <TWI_SendByte>
    TWI_SendByte(0x0D); // Pointer
     4bc:	8d e0       	ldi	r24, 0x0D	; 13
     4be:	53 d4       	rcall	.+2214   	; 0xd66 <TWI_SendByte>
    TWI_SendByte(0x00); // CLKOUT output is set high-impedance
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	51 d4       	rcall	.+2210   	; 0xd66 <TWI_SendByte>
    TWI_Stop();
     4c4:	4c d4       	rcall	.+2200   	; 0xd5e <TWI_Stop>

    /* Read reference temperature */
    TWI_Start();
     4c6:	43 d4       	rcall	.+2182   	; 0xd4e <TWI_Start>
    TWI_SendByte(0x90); // Device address + write bit
     4c8:	80 e9       	ldi	r24, 0x90	; 144
     4ca:	4d d4       	rcall	.+2202   	; 0xd66 <TWI_SendByte>
    TWI_SendByte(0x00); // Pointer
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	4b d4       	rcall	.+2198   	; 0xd66 <TWI_SendByte>
    TWI_Start(); // Restart
     4d0:	3e d4       	rcall	.+2172   	; 0xd4e <TWI_Start>
    TWI_SendByte(0x91); // Device address + read bit
     4d2:	81 e9       	ldi	r24, 0x91	; 145
     4d4:	48 d4       	rcall	.+2192   	; 0xd66 <TWI_SendByte>
    temperature.msb = TWI_ReadByte();
     4d6:	51 d4       	rcall	.+2210   	; 0xd7a <TWI_ReadByte>
     4d8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temperature+0x2>
    temperature.lsb = TWI_ReadLastByte();
     4dc:	58 d4       	rcall	.+2224   	; 0xd8e <TWI_ReadLastByte>
     4de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperature+0x3>
    TWI_Stop();
     4e2:	3d d4       	rcall	.+2170   	; 0xd5e <TWI_Stop>
    temperature.compensation.reference = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     4e4:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <temperature+0x2>
     4e8:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <temperature+0x3>
     4ec:	76 27       	eor	r23, r22
     4ee:	67 27       	eor	r22, r23
     4f0:	76 27       	eor	r23, r22
     4f2:	76 95       	lsr	r23
     4f4:	67 95       	ror	r22
     4f6:	72 95       	swap	r23
     4f8:	62 95       	swap	r22
     4fa:	6f 70       	andi	r22, 0x0F	; 15
     4fc:	67 27       	eor	r22, r23
     4fe:	7f 70       	andi	r23, 0x0F	; 15
     500:	67 27       	eor	r22, r23
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	24 d5       	rcall	.+2632   	; 0xf54 <__floatsisf>
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	4a ef       	ldi	r20, 0xFA	; 250
     512:	52 e4       	ldi	r21, 0x42	; 66
     514:	d3 d5       	rcall	.+2982   	; 0x10bc <__mulsf3>
     516:	f0 d4       	rcall	.+2528   	; 0xef8 <__fixunssfsi>
     518:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <temperature+0x7>
     51c:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <temperature+0x6>
    temperature.value = temperature.compensation.reference;
     520:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     524:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
            {
                OCR1B = 0;
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
                USER_LED_OFF;
                indication.pwmOutputStatus = CONNECTED;
     528:	c1 e0       	ldi	r28, 0x01	; 1
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
                {
                case 1:
                    indication.digit1 = (cad.counter / (1445 * 1 / 10)) % 10;
     52a:	3a e0       	ldi	r19, 0x0A	; 10
     52c:	83 2e       	mov	r8, r19
     52e:	91 2c       	mov	r9, r1
     530:	a1 2c       	mov	r10, r1
     532:	b1 2c       	mov	r11, r1
     534:	49 e6       	ldi	r20, 0x69	; 105
     536:	44 2e       	mov	r4, r20
     538:	55 24       	eor	r5, r5
     53a:	53 94       	inc	r5
     53c:	61 2c       	mov	r6, r1
     53e:	71 2c       	mov	r7, r1
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensation.factor;
                    }

                    indication.digit3 = temperature.value / 10000;
     540:	50 e1       	ldi	r21, 0x10	; 16
     542:	25 2e       	mov	r2, r21
     544:	57 e2       	ldi	r21, 0x27	; 39
     546:	35 2e       	mov	r3, r21
                    indication.digit4 = (temperature.value / 1000) % 10;
     548:	0a e0       	ldi	r16, 0x0A	; 10
     54a:	10 e0       	ldi	r17, 0x00	; 0
    // TWI_SendByte(RTC_DECtoBCD(15)); // Hour
    // TWI_Stop();

    while (1)
    {
        SoftStart(&indication, &voltage);
     54c:	6d e0       	ldi	r22, 0x0D	; 13
     54e:	71 e0       	ldi	r23, 0x01	; 1
     550:	85 e5       	ldi	r24, 0x55	; 85
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	93 dd       	rcall	.-1242   	; 0x7c <SoftStart>
        // voltage.pid.setPoint = VOUT_TASK; // Manual control

        /* Get time */
        TWI_Start();
     556:	fb d3       	rcall	.+2038   	; 0xd4e <TWI_Start>
        TWI_SendByte(0xA2); // Device address + write bit
     558:	82 ea       	ldi	r24, 0xA2	; 162
     55a:	05 d4       	rcall	.+2058   	; 0xd66 <TWI_SendByte>
        TWI_SendByte(0x02); // Pointer
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	03 d4       	rcall	.+2054   	; 0xd66 <TWI_SendByte>
        TWI_Start(); // Restart
     560:	f6 d3       	rcall	.+2028   	; 0xd4e <TWI_Start>
        TWI_SendByte(0xA3); // Device address + read bit
     562:	83 ea       	ldi	r24, 0xA3	; 163
     564:	00 d4       	rcall	.+2048   	; 0xd66 <TWI_SendByte>
        time.sec = RTC_BCDtoDEC((TWI_ReadByte()) & RTC_SEC_MASK);
     566:	09 d4       	rcall	.+2066   	; 0xd7a <TWI_ReadByte>
     568:	8f 77       	andi	r24, 0x7F	; 127
     56a:	dc d3       	rcall	.+1976   	; 0xd24 <RTC_BCDtoDEC>
     56c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <time>
        time.min = RTC_BCDtoDEC((TWI_ReadByte()) & RTC_MIN_MASK);
     570:	04 d4       	rcall	.+2056   	; 0xd7a <TWI_ReadByte>
     572:	8f 77       	andi	r24, 0x7F	; 127
     574:	d7 d3       	rcall	.+1966   	; 0xd24 <RTC_BCDtoDEC>
     576:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <time+0x1>
        time.hour = RTC_BCDtoDEC((TWI_ReadLastByte()) & RTC_HOUR_MASK);
     57a:	09 d4       	rcall	.+2066   	; 0xd8e <TWI_ReadLastByte>
     57c:	8f 73       	andi	r24, 0x3F	; 63
     57e:	d2 d3       	rcall	.+1956   	; 0xd24 <RTC_BCDtoDEC>
     580:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <time+0x2>
        TWI_Stop();
     584:	ec d3       	rcall	.+2008   	; 0xd5e <TWI_Stop>

        /* TimeRes */
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
     586:	60 99       	sbic	0x0c, 0	; 12
     588:	da c0       	rjmp	.+436    	; 0x73e <main+0x2fc>
        {
            if (++buttonCounter == UINT8_MAX)
     58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     58e:	8f 5f       	subi	r24, 0xFF	; 255
     590:	8f 3f       	cpi	r24, 0xFF	; 255
     592:	09 f4       	brne	.+2      	; 0x596 <main+0x154>
     594:	fb c0       	rjmp	.+502    	; 0x78c <main+0x34a>
     596:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        // }
        // if ((time.adjusted) && (time.hour == 12))
        //     time.adjusted = false;

        /* Daily turnoff */
        if (time.hour < 6)
     59a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     59e:	86 30       	cpi	r24, 0x06	; 6
     5a0:	08 f4       	brcc	.+2      	; 0x5a4 <main+0x162>
     5a2:	d4 c0       	rjmp	.+424    	; 0x74c <main+0x30a>
                (time.sec % 2) ? USER_LED_ON : USER_LED_OFF;
            }
        }
        else
        {
            indication.pause = false, indication.isTurnedOff = false;
     5a4:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <indication+0x8>
     5a8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <indication+0x9>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
     5ac:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0xa>
     5b0:	81 11       	cpse	r24, r1
     5b2:	10 c0       	rjmp	.+32     	; 0x5d4 <main+0x192>
            {
                OCR1B = 0;
     5b4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     5b8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     5bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     5c0:	80 62       	ori	r24, 0x20	; 32
     5c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                USER_LED_OFF;
     5c6:	58 98       	cbi	0x0b, 0	; 11
                indication.pwmOutputStatus = CONNECTED;
     5c8:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <indication+0xa>
            }
        }

        if (!indication.pause)
     5cc:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x8>
     5d0:	81 11       	cpse	r24, r1
     5d2:	bc cf       	rjmp	.-136    	; 0x54c <main+0x10a>
        {

            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
     5d4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <voltage+0x3d>
     5d8:	81 11       	cpse	r24, r1
     5da:	a5 c1       	rjmp	.+842    	; 0x926 <main+0x4e4>
                OCR1B = voltage.pid.processValue * 0x1FF;
                voltage.pid.run = false;
            }

            /* Prepare time */
            if (indication.dispMode == DISPLAY_TIME)
     5dc:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <indication+0x7>
     5e0:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     5e4:	21 11       	cpse	r18, r1
     5e6:	15 c0       	rjmp	.+42     	; 0x612 <main+0x1d0>
            {
                indication.digit1 = time.hour / 10;
     5e8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     5ec:	6a e0       	ldi	r22, 0x0A	; 10
     5ee:	d9 d3       	rcall	.+1970   	; 0xda2 <__udivmodqi4>
     5f0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <indication>
                indication.digit2 = time.hour % 10;
     5f4:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <indication+0x1>
                indication.digit3 = time.min / 10;
     5f8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     5fc:	d2 d3       	rcall	.+1956   	; 0xda2 <__udivmodqi4>
     5fe:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <indication+0x2>
                indication.digit4 = time.min % 10;
     602:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <indication+0x3>
                indication.digit5 = time.sec / 10;
     606:	8d 2f       	mov	r24, r29
     608:	cc d3       	rcall	.+1944   	; 0xda2 <__udivmodqi4>
     60a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <indication+0x4>
                indication.digit6 = time.sec % 10;
     60e:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <indication+0x5>
            }

            /* Temperature compensation */
            if (!temperature.compensation.ready)
     612:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
     616:	81 11       	cpse	r24, r1
     618:	2b c1       	rjmp	.+598    	; 0x870 <main+0x42e>
     61a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temperature+0xa>
     61e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <temperature+0x8>
     622:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <temperature+0x9>
            {
                if ((time.sec % 2) && (temperature.compensation.allowIncrement == true))
     626:	d0 ff       	sbrs	r29, 0
     628:	bd c1       	rjmp	.+890    	; 0x9a4 <main+0x562>
     62a:	33 23       	and	r19, r19
     62c:	39 f0       	breq	.+14     	; 0x63c <main+0x1fa>
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = false;
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temperature+0x9>
     634:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
     638:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temperature+0xa>
                if (!(time.sec % 2) && (temperature.compensation.allowIncrement == false))
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = true;
                if (temperature.compensation.counter == 3600)
     63c:	80 31       	cpi	r24, 0x10	; 16
     63e:	9e 40       	sbci	r25, 0x0E	; 14
     640:	09 f4       	brne	.+2      	; 0x644 <main+0x202>
     642:	b8 c0       	rjmp	.+368    	; 0x7b4 <main+0x372>
                    temperature.compensation.ready = true; // Temperature is compensated after 3600 sec (60 min)
                }
            }

            /* Prepare temperature */
            if ((time.sec > 4) && (time.sec < 10))
     644:	8b ef       	ldi	r24, 0xFB	; 251
     646:	8d 0f       	add	r24, r29
     648:	85 30       	cpi	r24, 0x05	; 5
     64a:	08 f0       	brcs	.+2      	; 0x64e <main+0x20c>
     64c:	f5 c0       	rjmp	.+490    	; 0x838 <main+0x3f6>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     64e:	21 30       	cpi	r18, 0x01	; 1
     650:	09 f4       	brne	.+2      	; 0x654 <main+0x212>
     652:	7c cf       	rjmp	.-264    	; 0x54c <main+0x10a>
     654:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <temperature>
     658:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <temperature+0x1>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensation.factor;
                    }

                    indication.digit3 = temperature.value / 10000;
     65c:	c9 01       	movw	r24, r18
     65e:	b1 01       	movw	r22, r2
     660:	ac d3       	rcall	.+1880   	; 0xdba <__udivmodhi4>
     662:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                    indication.digit4 = (temperature.value / 1000) % 10;
     666:	c9 01       	movw	r24, r18
     668:	68 ee       	ldi	r22, 0xE8	; 232
     66a:	73 e0       	ldi	r23, 0x03	; 3
     66c:	a6 d3       	rcall	.+1868   	; 0xdba <__udivmodhi4>
     66e:	cb 01       	movw	r24, r22
     670:	b8 01       	movw	r22, r16
     672:	a3 d3       	rcall	.+1862   	; 0xdba <__udivmodhi4>
     674:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <indication+0x3>
                    indication.digit5 = (temperature.value / 100) % 10;
     678:	c9 01       	movw	r24, r18
     67a:	64 e6       	ldi	r22, 0x64	; 100
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	9d d3       	rcall	.+1850   	; 0xdba <__udivmodhi4>
     680:	cb 01       	movw	r24, r22
     682:	b8 01       	movw	r22, r16
     684:	9a d3       	rcall	.+1844   	; 0xdba <__udivmodhi4>
     686:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <indication+0x4>
                    indication.digit6 = (temperature.value / 10) % 10;
     68a:	c9 01       	movw	r24, r18
     68c:	b8 01       	movw	r22, r16
     68e:	95 d3       	rcall	.+1834   	; 0xdba <__udivmodhi4>
     690:	cb 01       	movw	r24, r22
     692:	b8 01       	movw	r22, r16
     694:	92 d3       	rcall	.+1828   	; 0xdba <__udivmodhi4>
     696:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication+0x5>
                    indication.dispMode = DISPLAY_TEMPERATURE;
     69a:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <indication+0x7>
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                CLEAR_BIT(PORTA, 1 << 3), indication.dispMode = DISPLAY_CAD;

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     69e:	8d ed       	ldi	r24, 0xDD	; 221
     6a0:	8d 0f       	add	r24, r29
     6a2:	85 30       	cpi	r24, 0x05	; 5
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <main+0x266>
     6a6:	52 cf       	rjmp	.-348    	; 0x54c <main+0x10a>
            {
                if (indication.dispMode != DISPLAY_CAD)
                    indication.dispMode = DISPLAY_CAD, cad.counter = 0;
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <indication+0x7>
     6ae:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     6b2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     6b6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     6ba:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     6be:	60 e0       	ldi	r22, 0x00	; 0
                indication.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
     6c0:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <indication>
                indication.digit2 = indication.digit1;
     6c4:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication+0x1>
                indication.digit3 = indication.digit1;
     6c8:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                indication.digit4 = indication.digit1;
     6cc:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x3>
                indication.digit5 = indication.digit1;
     6d0:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x4>
                indication.digit6 = indication.digit1;
     6d4:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x5>
                indication.digit6 = 0;
                cad.counter = 0;
                cad.updateStage = 1;
                cad.update = true;
            }
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
     6d8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
     6dc:	88 23       	and	r24, r24
     6de:	09 f4       	brne	.+2      	; 0x6e2 <main+0x2a0>
     6e0:	35 cf       	rjmp	.-406    	; 0x54c <main+0x10a>
            {
                switch (cad.updateStage)
     6e2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cad+0x4>
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	09 f4       	brne	.+2      	; 0x6ec <main+0x2aa>
     6ea:	1d c2       	rjmp	.+1082   	; 0xb26 <main+0x6e4>
     6ec:	08 f4       	brcc	.+2      	; 0x6f0 <main+0x2ae>
     6ee:	42 c2       	rjmp	.+1156   	; 0xb74 <main+0x732>
     6f0:	85 30       	cpi	r24, 0x05	; 5
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <main+0x2b4>
     6f4:	f2 c1       	rjmp	.+996    	; 0xada <main+0x698>
     6f6:	08 f4       	brcc	.+2      	; 0x6fa <main+0x2b8>
     6f8:	c9 c1       	rjmp	.+914    	; 0xa8c <main+0x64a>
     6fa:	86 30       	cpi	r24, 0x06	; 6
     6fc:	09 f0       	breq	.+2      	; 0x700 <main+0x2be>
     6fe:	26 cf       	rjmp	.-436    	; 0x54c <main+0x10a>
                    if ((time.sec / 10) == indication.digit5)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 6:
                    indication.digit6 = (cad.counter / (1445 * 1 / 10)) % 10;
     700:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     704:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     708:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     70c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     710:	20 e9       	ldi	r18, 0x90	; 144
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	64 d3       	rcall	.+1736   	; 0xde2 <__udivmodsi4>
     71a:	ca 01       	movw	r24, r20
     71c:	b9 01       	movw	r22, r18
     71e:	a5 01       	movw	r20, r10
     720:	94 01       	movw	r18, r8
     722:	5f d3       	rcall	.+1726   	; 0xde2 <__udivmodsi4>
     724:	26 2f       	mov	r18, r22
     726:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication+0x5>
                    if ((time.sec % 10) == indication.digit6)
     72a:	8d 2f       	mov	r24, r29
     72c:	6a e0       	ldi	r22, 0x0A	; 10
     72e:	39 d3       	rcall	.+1650   	; 0xda2 <__udivmodqi4>
     730:	92 13       	cpse	r25, r18
     732:	0c cf       	rjmp	.-488    	; 0x54c <main+0x10a>
                        cad.update = false, indication.dispMode = DISPLAY_TIME;
     734:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cad+0x5>
     738:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <indication+0x7>
     73c:	07 cf       	rjmp	.-498    	; 0x54c <main+0x10a>
                TWI_SendByte(RTC_DECtoBCD(20)); // Hour
                TWI_Stop();
            }
        }
        else
            buttonCounter = 0;
     73e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        // }
        // if ((time.adjusted) && (time.hour == 12))
        //     time.adjusted = false;

        /* Daily turnoff */
        if (time.hour < 6)
     742:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	08 f0       	brcs	.+2      	; 0x74c <main+0x30a>
     74a:	2c cf       	rjmp	.-424    	; 0x5a4 <main+0x162>
        {
            indication.isTurnedOff = true;
     74c:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <indication+0x9>
            SoftTurnoff(&indication, &voltage);
     750:	6d e0       	ldi	r22, 0x0D	; 13
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	85 e5       	ldi	r24, 0x55	; 85
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	be dc       	rcall	.-1668   	; 0xd6 <SoftTurnoff>
            if (voltage.pid.setPoint < 100.0)
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	48 ec       	ldi	r20, 0xC8	; 200
     760:	52 e4       	ldi	r21, 0x42	; 66
     762:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     766:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     76a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     76e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     772:	be d3       	rcall	.+1916   	; 0xef0 <__cmpsf2>
     774:	87 ff       	sbrs	r24, 7
     776:	2a cf       	rjmp	.-428    	; 0x5cc <main+0x18a>
            {
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
     778:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0xa>
     77c:	81 11       	cpse	r24, r1
     77e:	c0 c0       	rjmp	.+384    	; 0x900 <main+0x4be>
                    indication.pwmOutputStatus = DISCONNECTED;
                    indication.pause = true;
                    temperature.compensation.counter = 0;
                    Display_DeadTime();
                }
                (time.sec % 2) ? USER_LED_ON : USER_LED_OFF;
     780:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <time>
     784:	80 ff       	sbrs	r24, 0
     786:	14 c0       	rjmp	.+40     	; 0x7b0 <main+0x36e>
     788:	58 9a       	sbi	0x0b, 0	; 11
     78a:	20 cf       	rjmp	.-448    	; 0x5cc <main+0x18a>
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
        {
            if (++buttonCounter == UINT8_MAX)
            {
                buttonCounter = 0;
     78c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                TWI_Start();
     790:	de d2       	rcall	.+1468   	; 0xd4e <TWI_Start>
                TWI_SendByte(0xA2); // Device address + write bit
     792:	82 ea       	ldi	r24, 0xA2	; 162
     794:	e8 d2       	rcall	.+1488   	; 0xd66 <TWI_SendByte>
                TWI_SendByte(0x02); // Pointer
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	e6 d2       	rcall	.+1484   	; 0xd66 <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(00)); // Sec
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	ce d2       	rcall	.+1436   	; 0xd3a <RTC_DECtoBCD>
     79e:	e3 d2       	rcall	.+1478   	; 0xd66 <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(00)); // Min
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	cb d2       	rcall	.+1430   	; 0xd3a <RTC_DECtoBCD>
     7a4:	e0 d2       	rcall	.+1472   	; 0xd66 <TWI_SendByte>
                TWI_SendByte(RTC_DECtoBCD(20)); // Hour
     7a6:	84 e1       	ldi	r24, 0x14	; 20
     7a8:	c8 d2       	rcall	.+1424   	; 0xd3a <RTC_DECtoBCD>
     7aa:	dd d2       	rcall	.+1466   	; 0xd66 <TWI_SendByte>
                TWI_Stop();
     7ac:	d8 d2       	rcall	.+1456   	; 0xd5e <TWI_Stop>
     7ae:	f5 ce       	rjmp	.-534    	; 0x59a <main+0x158>
                    indication.pwmOutputStatus = DISCONNECTED;
                    indication.pause = true;
                    temperature.compensation.counter = 0;
                    Display_DeadTime();
                }
                (time.sec % 2) ? USER_LED_ON : USER_LED_OFF;
     7b0:	58 98       	cbi	0x0b, 0	; 11
     7b2:	0c cf       	rjmp	.-488    	; 0x5cc <main+0x18a>
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = false;
                if (!(time.sec % 2) && (temperature.compensation.allowIncrement == false))
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = true;
                if (temperature.compensation.counter == 3600)
                {
                    TWI_Start();
     7b4:	cc d2       	rcall	.+1432   	; 0xd4e <TWI_Start>
                    TWI_SendByte(0x90); // Device address + write bit
     7b6:	80 e9       	ldi	r24, 0x90	; 144
     7b8:	d6 d2       	rcall	.+1452   	; 0xd66 <TWI_SendByte>
                    TWI_SendByte(0x00); // Pointer
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	d4 d2       	rcall	.+1448   	; 0xd66 <TWI_SendByte>
                    TWI_Start(); // Restart
     7be:	c7 d2       	rcall	.+1422   	; 0xd4e <TWI_Start>
                    TWI_SendByte(0x91); // Device address + read bit
     7c0:	81 e9       	ldi	r24, 0x91	; 145
     7c2:	d1 d2       	rcall	.+1442   	; 0xd66 <TWI_SendByte>
                    temperature.msb = TWI_ReadByte();
     7c4:	da d2       	rcall	.+1460   	; 0xd7a <TWI_ReadByte>
     7c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temperature+0x2>
                    temperature.lsb = TWI_ReadLastByte();
     7ca:	e1 d2       	rcall	.+1474   	; 0xd8e <TWI_ReadLastByte>
     7cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperature+0x3>
                    TWI_Stop();
     7d0:	c6 d2       	rcall	.+1420   	; 0xd5e <TWI_Stop>
                    temperature.value = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     7d2:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <temperature+0x2>
     7d6:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <temperature+0x3>
     7da:	76 27       	eor	r23, r22
     7dc:	67 27       	eor	r22, r23
     7de:	76 27       	eor	r23, r22
     7e0:	76 95       	lsr	r23
     7e2:	67 95       	ror	r22
     7e4:	72 95       	swap	r23
     7e6:	62 95       	swap	r22
     7e8:	6f 70       	andi	r22, 0x0F	; 15
     7ea:	67 27       	eor	r22, r23
     7ec:	7f 70       	andi	r23, 0x0F	; 15
     7ee:	67 27       	eor	r22, r23
     7f0:	07 2e       	mov	r0, r23
     7f2:	00 0c       	add	r0, r0
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	ad d3       	rcall	.+1882   	; 0xf54 <__floatsisf>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	4a ef       	ldi	r20, 0xFA	; 250
     800:	52 e4       	ldi	r21, 0x42	; 66
     802:	5c d4       	rcall	.+2232   	; 0x10bc <__mulsf3>
     804:	79 d3       	rcall	.+1778   	; 0xef8 <__fixunssfsi>
     806:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     80a:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
                    temperature.compensation.factor = temperature.compensation.reference - temperature.value;
     80e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <temperature+0x6>
     812:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <temperature+0x7>
     816:	c9 01       	movw	r24, r18
     818:	86 1b       	sub	r24, r22
     81a:	97 0b       	sbc	r25, r23
     81c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperature+0x5>
     820:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperature+0x4>
                    temperature.compensation.ready = true; // Temperature is compensated after 3600 sec (60 min)
     824:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <temperature+0xb>
     828:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     82c:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <indication+0x7>
                }
            }

            /* Prepare temperature */
            if ((time.sec > 4) && (time.sec < 10))
     830:	8b ef       	ldi	r24, 0xFB	; 251
     832:	8d 0f       	add	r24, r29
     834:	85 30       	cpi	r24, 0x05	; 5
     836:	00 f1       	brcs	.+64     	; 0x878 <main+0x436>
                    indication.digit5 = (temperature.value / 100) % 10;
                    indication.digit6 = (temperature.value / 10) % 10;
                    indication.dispMode = DISPLAY_TEMPERATURE;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
     838:	21 30       	cpi	r18, 0x01	; 1
     83a:	09 f4       	brne	.+2      	; 0x83e <main+0x3fc>
     83c:	bd c0       	rjmp	.+378    	; 0x9b8 <main+0x576>
                CLEAR_BIT(PORTA, 1 << 3), indication.dispMode = DISPLAY_CAD;

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     83e:	8d ed       	ldi	r24, 0xDD	; 221
     840:	8d 0f       	add	r24, r29
     842:	85 30       	cpi	r24, 0x05	; 5
     844:	08 f0       	brcs	.+2      	; 0x848 <main+0x406>
     846:	04 c1       	rjmp	.+520    	; 0xa50 <main+0x60e>
            {
                if (indication.dispMode != DISPLAY_CAD)
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	09 f0       	breq	.+2      	; 0x84e <main+0x40c>
     84c:	2d cf       	rjmp	.-422    	; 0x6a8 <main+0x266>
     84e:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     852:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     856:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     85a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     85e:	a3 01       	movw	r20, r6
     860:	92 01       	movw	r18, r4
     862:	bf d2       	rcall	.+1406   	; 0xde2 <__udivmodsi4>
     864:	ca 01       	movw	r24, r20
     866:	b9 01       	movw	r22, r18
     868:	a5 01       	movw	r20, r10
     86a:	94 01       	movw	r18, r8
     86c:	ba d2       	rcall	.+1396   	; 0xde2 <__udivmodsi4>
     86e:	28 cf       	rjmp	.-432    	; 0x6c0 <main+0x27e>
                    temperature.compensation.ready = true; // Temperature is compensated after 3600 sec (60 min)
                }
            }

            /* Prepare temperature */
            if ((time.sec > 4) && (time.sec < 10))
     870:	8b ef       	ldi	r24, 0xFB	; 251
     872:	8d 0f       	add	r24, r29
     874:	85 30       	cpi	r24, 0x05	; 5
     876:	00 f7       	brcc	.-64     	; 0x838 <main+0x3f6>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     878:	21 30       	cpi	r18, 0x01	; 1
     87a:	09 f4       	brne	.+2      	; 0x87e <main+0x43c>
     87c:	67 ce       	rjmp	.-818    	; 0x54c <main+0x10a>
                {
                    /* Read temperature */
                    if (temperature.compensation.ready)
                    {
                        TWI_Start();
     87e:	67 d2       	rcall	.+1230   	; 0xd4e <TWI_Start>
                        TWI_SendByte(0x90); // Device address + write bit
     880:	80 e9       	ldi	r24, 0x90	; 144
     882:	71 d2       	rcall	.+1250   	; 0xd66 <TWI_SendByte>
                        TWI_SendByte(0x00); // Pointer
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	6f d2       	rcall	.+1246   	; 0xd66 <TWI_SendByte>
                        TWI_Start(); // Restart
     888:	62 d2       	rcall	.+1220   	; 0xd4e <TWI_Start>
                        TWI_SendByte(0x91); // Device address + read bit
     88a:	81 e9       	ldi	r24, 0x91	; 145
     88c:	6c d2       	rcall	.+1240   	; 0xd66 <TWI_SendByte>
                        temperature.msb = TWI_ReadByte();
     88e:	75 d2       	rcall	.+1258   	; 0xd7a <TWI_ReadByte>
     890:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temperature+0x2>
                        temperature.lsb = TWI_ReadLastByte();
     894:	7c d2       	rcall	.+1272   	; 0xd8e <TWI_ReadLastByte>
     896:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperature+0x3>
                        TWI_Stop();
     89a:	61 d2       	rcall	.+1218   	; 0xd5e <TWI_Stop>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
     89c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <temperature+0x2>
     8a0:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <temperature+0x3>
     8a4:	76 27       	eor	r23, r22
     8a6:	67 27       	eor	r22, r23
     8a8:	76 27       	eor	r23, r22
     8aa:	76 95       	lsr	r23
     8ac:	67 95       	ror	r22
     8ae:	72 95       	swap	r23
     8b0:	62 95       	swap	r22
     8b2:	6f 70       	andi	r22, 0x0F	; 15
     8b4:	67 27       	eor	r22, r23
     8b6:	7f 70       	andi	r23, 0x0F	; 15
     8b8:	67 27       	eor	r22, r23
     8ba:	07 2e       	mov	r0, r23
     8bc:	00 0c       	add	r0, r0
     8be:	88 0b       	sbc	r24, r24
     8c0:	99 0b       	sbc	r25, r25
     8c2:	48 d3       	rcall	.+1680   	; 0xf54 <__floatsisf>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	4a ef       	ldi	r20, 0xFA	; 250
     8ca:	52 e4       	ldi	r21, 0x42	; 66
     8cc:	f7 d3       	rcall	.+2030   	; 0x10bc <__mulsf3>
     8ce:	6b 01       	movw	r12, r22
     8d0:	7c 01       	movw	r14, r24
     8d2:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <temperature+0x4>
     8d6:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <temperature+0x5>
     8da:	07 2e       	mov	r0, r23
     8dc:	00 0c       	add	r0, r0
     8de:	88 0b       	sbc	r24, r24
     8e0:	99 0b       	sbc	r25, r25
     8e2:	38 d3       	rcall	.+1648   	; 0xf54 <__floatsisf>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c7 01       	movw	r24, r14
     8ea:	b6 01       	movw	r22, r12
     8ec:	9d d2       	rcall	.+1338   	; 0xe28 <__addsf3>
                        TWI_Start(); // Restart
                        TWI_SendByte(0x91); // Device address + read bit
                        temperature.msb = TWI_ReadByte();
                        temperature.lsb = TWI_ReadLastByte();
                        TWI_Stop();
                        temperature.value =
     8ee:	04 d3       	rcall	.+1544   	; 0xef8 <__fixunssfsi>
     8f0:	9b 01       	movw	r18, r22
     8f2:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     8f6:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
     8fa:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     8fe:	ae ce       	rjmp	.-676    	; 0x65c <main+0x21a>
            SoftTurnoff(&indication, &voltage);
            if (voltage.pid.setPoint < 100.0)
            {
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
                {
                    OCR1B = 0;
     900:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     904:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                    CLEAR_BIT(TCCR1A, 1 << COM1B1); // OC1A/OC1B disconnected
     908:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     90c:	8f 7d       	andi	r24, 0xDF	; 223
     90e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                    indication.pwmOutputStatus = DISCONNECTED;
     912:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <indication+0xa>
                    indication.pause = true;
     916:	c0 93 5d 01 	sts	0x015D, r28	; 0x80015d <indication+0x8>
                    temperature.compensation.counter = 0;
     91a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <temperature+0x9>
     91e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <temperature+0x8>
                    Display_DeadTime();
     922:	a7 db       	rcall	.-2226   	; 0x72 <Display_DeadTime>
     924:	2d cf       	rjmp	.-422    	; 0x780 <main+0x33e>

            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);
     926:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <voltage+0x4>
     92a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <voltage+0x5>
     92e:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <voltage+0x6>
     932:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <voltage+0x7>
     936:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     93a:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     93e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     942:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     946:	6f d2       	rcall	.+1246   	; 0xe26 <__subsf3>
     948:	ab 01       	movw	r20, r22
     94a:	bc 01       	movw	r22, r24
     94c:	8e e1       	ldi	r24, 0x1E	; 30
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	3e d1       	rcall	.+636    	; 0xbce <arm_pid_f32>
     952:	6b 01       	movw	r12, r22
     954:	7c 01       	movw	r14, r24

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	a9 01       	movw	r20, r18
     95c:	c9 d2       	rcall	.+1426   	; 0xef0 <__cmpsf2>
     95e:	87 fd       	sbrc	r24, 7
     960:	7b c0       	rjmp	.+246    	; 0xa58 <main+0x616>
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
     962:	23 e3       	ldi	r18, 0x33	; 51
     964:	33 e3       	ldi	r19, 0x33	; 51
     966:	43 e3       	ldi	r20, 0x33	; 51
     968:	5f e3       	ldi	r21, 0x3F	; 63
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	a2 d3       	rcall	.+1860   	; 0x10b4 <__gesf2>
     970:	18 16       	cp	r1, r24
     972:	0c f4       	brge	.+2      	; 0x976 <main+0x534>
     974:	7c c0       	rjmp	.+248    	; 0xa6e <main+0x62c>
        {

            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
     976:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <voltage+0x39>
     97a:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <voltage+0x3a>
     97e:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <voltage+0x3b>
     982:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <voltage+0x3c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e8       	ldi	r19, 0x80	; 128
     98a:	4f ef       	ldi	r20, 0xFF	; 255
     98c:	53 e4       	ldi	r21, 0x43	; 67
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	94 d3       	rcall	.+1832   	; 0x10bc <__mulsf3>
     994:	b1 d2       	rcall	.+1378   	; 0xef8 <__fixunssfsi>
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;

                OCR1B = voltage.pid.processValue * 0x1FF;
     996:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     99a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                voltage.pid.run = false;
     99e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <voltage+0x3d>
     9a2:	1c ce       	rjmp	.-968    	; 0x5dc <main+0x19a>
            /* Temperature compensation */
            if (!temperature.compensation.ready)
            {
                if ((time.sec % 2) && (temperature.compensation.allowIncrement == true))
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = false;
                if (!(time.sec % 2) && (temperature.compensation.allowIncrement == false))
     9a4:	31 11       	cpse	r19, r1
     9a6:	4a ce       	rjmp	.-876    	; 0x63c <main+0x1fa>
                    ++temperature.compensation.counter, temperature.compensation.allowIncrement = true;
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temperature+0x9>
     9ae:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
     9b2:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <temperature+0xa>
     9b6:	42 ce       	rjmp	.-892    	; 0x63c <main+0x1fa>
                    indication.digit6 = (temperature.value / 10) % 10;
                    indication.dispMode = DISPLAY_TEMPERATURE;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                CLEAR_BIT(PORTA, 1 << 3), indication.dispMode = DISPLAY_CAD;
     9b8:	73 98       	cbi	0x0e, 3	; 14
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <indication+0x7>

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     9c0:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <time>
     9c4:	8d ed       	ldi	r24, 0xDD	; 221
     9c6:	8d 0f       	add	r24, r29
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <main+0x58c>
     9cc:	40 cf       	rjmp	.-384    	; 0x84e <main+0x40c>
                indication.digit3 = indication.digit1;
                indication.digit4 = indication.digit1;
                indication.digit5 = indication.digit1;
                indication.digit6 = indication.digit1;
            }
            else if ((indication.dispMode == DISPLAY_CAD) && (!cad.update))
     9ce:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
     9d2:	81 11       	cpse	r24, r1
     9d4:	86 ce       	rjmp	.-756    	; 0x6e2 <main+0x2a0>
            {
                indication.digit1 = 0;
                indication.digit2 = 0;
     9d6:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <indication+0x1>
                indication.digit3 = 0;
     9da:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <indication+0x2>
                indication.digit4 = 0;
     9de:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <indication+0x3>
                indication.digit5 = 0;
     9e2:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <indication+0x4>
                indication.digit6 = 0;
     9e6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <indication+0x5>
                cad.counter = 0;
     9ea:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     9ee:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     9f2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     9f6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
                cad.updateStage = 1;
     9fa:	c0 93 4f 01 	sts	0x014F, r28	; 0x80014f <cad+0x4>
                cad.update = true;
     9fe:	c0 93 50 01 	sts	0x0150, r28	; 0x800150 <cad+0x5>
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
                {
                case 1:
                    indication.digit1 = (cad.counter / (1445 * 1 / 10)) % 10;
     a02:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     a06:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     a0a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     a0e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     a12:	20 e9       	ldi	r18, 0x90	; 144
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	e3 d1       	rcall	.+966    	; 0xde2 <__udivmodsi4>
     a1c:	ca 01       	movw	r24, r20
     a1e:	b9 01       	movw	r22, r18
     a20:	a5 01       	movw	r20, r10
     a22:	94 01       	movw	r18, r8
     a24:	de d1       	rcall	.+956    	; 0xde2 <__udivmodsi4>
     a26:	26 2f       	mov	r18, r22
     a28:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <indication>
                    if ((time.hour / 10) == indication.digit1)
     a2c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     a30:	6a e0       	ldi	r22, 0x0A	; 10
     a32:	b7 d1       	rcall	.+878    	; 0xda2 <__udivmodqi4>
     a34:	82 13       	cpse	r24, r18
     a36:	8a cd       	rjmp	.-1260   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     a3e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     a42:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     a46:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     a4a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     a4e:	7e cd       	rjmp	.-1284   	; 0x54c <main+0x10a>
                indication.digit3 = indication.digit1;
                indication.digit4 = indication.digit1;
                indication.digit5 = indication.digit1;
                indication.digit6 = indication.digit1;
            }
            else if ((indication.dispMode == DISPLAY_CAD) && (!cad.update))
     a50:	22 30       	cpi	r18, 0x02	; 2
     a52:	09 f4       	brne	.+2      	; 0xa56 <main+0x614>
     a54:	bc cf       	rjmp	.-136    	; 0x9ce <main+0x58c>
     a56:	7a cd       	rjmp	.-1292   	; 0x54c <main+0x10a>
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
     a58:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage+0x39>
     a5c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <voltage+0x3a>
     a60:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <voltage+0x3b>
     a64:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <voltage+0x3c>
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	94 cf       	rjmp	.-216    	; 0x996 <main+0x554>
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;
     a6e:	83 e3       	ldi	r24, 0x33	; 51
     a70:	93 e3       	ldi	r25, 0x33	; 51
     a72:	a3 e3       	ldi	r26, 0x33	; 51
     a74:	bf e3       	ldi	r27, 0x3F	; 63
     a76:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <voltage+0x39>
     a7a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <voltage+0x3a>
     a7e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <voltage+0x3b>
     a82:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <voltage+0x3c>
     a86:	65 e6       	ldi	r22, 0x65	; 101
     a88:	71 e0       	ldi	r23, 0x01	; 1
     a8a:	85 cf       	rjmp	.-246    	; 0x996 <main+0x554>
                    if ((time.min / 10) == indication.digit3)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 4:
                    indication.digit4 = (cad.counter / (1445 * 1 / 10)) % 10;
     a8c:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     a90:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     a94:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     a98:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     a9c:	20 e9       	ldi	r18, 0x90	; 144
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	9e d1       	rcall	.+828    	; 0xde2 <__udivmodsi4>
     aa6:	ca 01       	movw	r24, r20
     aa8:	b9 01       	movw	r22, r18
     aaa:	a5 01       	movw	r20, r10
     aac:	94 01       	movw	r18, r8
     aae:	99 d1       	rcall	.+818    	; 0xde2 <__udivmodsi4>
     ab0:	26 2f       	mov	r18, r22
     ab2:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <indication+0x3>
                    if ((time.min % 10) == indication.digit4)
     ab6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     aba:	6a e0       	ldi	r22, 0x0A	; 10
     abc:	72 d1       	rcall	.+740    	; 0xda2 <__udivmodqi4>
     abe:	92 13       	cpse	r25, r18
     ac0:	45 cd       	rjmp	.-1398   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     ac8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     acc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     ad0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     ad4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     ad8:	39 cd       	rjmp	.-1422   	; 0x54c <main+0x10a>
                    break;

                case 5:
                    indication.digit5 = (cad.counter / (1445 * 1 / 10)) % 10;
     ada:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     ade:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     ae2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     ae6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     aea:	20 e9       	ldi	r18, 0x90	; 144
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	77 d1       	rcall	.+750    	; 0xde2 <__udivmodsi4>
     af4:	ca 01       	movw	r24, r20
     af6:	b9 01       	movw	r22, r18
     af8:	a5 01       	movw	r20, r10
     afa:	94 01       	movw	r18, r8
     afc:	72 d1       	rcall	.+740    	; 0xde2 <__udivmodsi4>
     afe:	26 2f       	mov	r18, r22
     b00:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <indication+0x4>
                    if ((time.sec / 10) == indication.digit5)
     b04:	8d 2f       	mov	r24, r29
     b06:	6a e0       	ldi	r22, 0x0A	; 10
     b08:	4c d1       	rcall	.+664    	; 0xda2 <__udivmodqi4>
     b0a:	82 13       	cpse	r24, r18
     b0c:	1f cd       	rjmp	.-1474   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     b0e:	96 e0       	ldi	r25, 0x06	; 6
     b10:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <cad+0x4>
     b14:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     b18:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     b1c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     b20:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     b24:	13 cd       	rjmp	.-1498   	; 0x54c <main+0x10a>
                    if ((time.hour % 10) == indication.digit2)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 3:
                    indication.digit3 = (cad.counter / (1445 * 1 / 10)) % 10;
     b26:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     b2a:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     b2e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     b32:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     b36:	20 e9       	ldi	r18, 0x90	; 144
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	51 d1       	rcall	.+674    	; 0xde2 <__udivmodsi4>
     b40:	ca 01       	movw	r24, r20
     b42:	b9 01       	movw	r22, r18
     b44:	a5 01       	movw	r20, r10
     b46:	94 01       	movw	r18, r8
     b48:	4c d1       	rcall	.+664    	; 0xde2 <__udivmodsi4>
     b4a:	26 2f       	mov	r18, r22
     b4c:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <indication+0x2>
                    if ((time.min / 10) == indication.digit3)
     b50:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <time+0x1>
     b54:	6a e0       	ldi	r22, 0x0A	; 10
     b56:	25 d1       	rcall	.+586    	; 0xda2 <__udivmodqi4>
     b58:	82 13       	cpse	r24, r18
     b5a:	f8 cc       	rjmp	.-1552   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     b62:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     b66:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     b6a:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     b6e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     b72:	ec cc       	rjmp	.-1576   	; 0x54c <main+0x10a>
                cad.updateStage = 1;
                cad.update = true;
            }
            if ((indication.dispMode == DISPLAY_CAD) && (cad.update))
            {
                switch (cad.updateStage)
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	09 f4       	brne	.+2      	; 0xb7a <main+0x738>
     b78:	44 cf       	rjmp	.-376    	; 0xa02 <main+0x5c0>
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	09 f0       	breq	.+2      	; 0xb80 <main+0x73e>
     b7e:	e6 cc       	rjmp	.-1588   	; 0x54c <main+0x10a>
                    if ((time.hour / 10) == indication.digit1)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 2:
                    indication.digit2 = (cad.counter / (1445 * 1 / 10)) % 10;
     b80:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <cad>
     b84:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <cad+0x1>
     b88:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
     b8c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cad+0x3>
     b90:	20 e9       	ldi	r18, 0x90	; 144
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	24 d1       	rcall	.+584    	; 0xde2 <__udivmodsi4>
     b9a:	ca 01       	movw	r24, r20
     b9c:	b9 01       	movw	r22, r18
     b9e:	a5 01       	movw	r20, r10
     ba0:	94 01       	movw	r18, r8
     ba2:	1f d1       	rcall	.+574    	; 0xde2 <__udivmodsi4>
     ba4:	26 2f       	mov	r18, r22
     ba6:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <indication+0x1>
                    if ((time.hour % 10) == indication.digit2)
     baa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <time+0x2>
     bae:	6a e0       	ldi	r22, 0x0A	; 10
     bb0:	f8 d0       	rcall	.+496    	; 0xda2 <__udivmodqi4>
     bb2:	92 13       	cpse	r25, r18
     bb4:	cb cc       	rjmp	.-1642   	; 0x54c <main+0x10a>
                        ++cad.updateStage, cad.counter = 0;
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cad+0x4>
     bbc:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cad>
     bc0:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
     bc4:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
     bc8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
     bcc:	bf cc       	rjmp	.-1666   	; 0x54c <main+0x10a>

00000bce <arm_pid_f32>:
#include "PID.h"

float32_t arm_pid_f32(arm_pid_instance_f32 *S, float32_t in)
{
     bce:	4f 92       	push	r4
     bd0:	5f 92       	push	r5
     bd2:	6f 92       	push	r6
     bd4:	7f 92       	push	r7
     bd6:	8f 92       	push	r8
     bd8:	9f 92       	push	r9
     bda:	af 92       	push	r10
     bdc:	bf 92       	push	r11
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
     bec:	6a 01       	movw	r12, r20
     bee:	7b 01       	movw	r14, r22
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */
    out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
     bf0:	8c 84       	ldd	r8, Y+12	; 0x0c
     bf2:	9d 84       	ldd	r9, Y+13	; 0x0d
     bf4:	ae 84       	ldd	r10, Y+14	; 0x0e
     bf6:	bf 84       	ldd	r11, Y+15	; 0x0f
     bf8:	28 81       	ld	r18, Y
     bfa:	39 81       	ldd	r19, Y+1	; 0x01
     bfc:	4a 81       	ldd	r20, Y+2	; 0x02
     bfe:	5b 81       	ldd	r21, Y+3	; 0x03
     c00:	cb 01       	movw	r24, r22
     c02:	b6 01       	movw	r22, r12
     c04:	5b d2       	rcall	.+1206   	; 0x10bc <__mulsf3>
     c06:	2b 01       	movw	r4, r22
     c08:	3c 01       	movw	r6, r24
     c0a:	2c 81       	ldd	r18, Y+4	; 0x04
     c0c:	3d 81       	ldd	r19, Y+5	; 0x05
     c0e:	4e 81       	ldd	r20, Y+6	; 0x06
     c10:	5f 81       	ldd	r21, Y+7	; 0x07
     c12:	c5 01       	movw	r24, r10
     c14:	b4 01       	movw	r22, r8
     c16:	52 d2       	rcall	.+1188   	; 0x10bc <__mulsf3>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	c3 01       	movw	r24, r6
     c1e:	b2 01       	movw	r22, r4
     c20:	03 d1       	rcall	.+518    	; 0xe28 <__addsf3>
     c22:	2c 89       	ldd	r18, Y+20	; 0x14
     c24:	3d 89       	ldd	r19, Y+21	; 0x15
     c26:	4e 89       	ldd	r20, Y+22	; 0x16
     c28:	5f 89       	ldd	r21, Y+23	; 0x17
     c2a:	fe d0       	rcall	.+508    	; 0xe28 <__addsf3>
     c2c:	2b 01       	movw	r4, r22
     c2e:	3c 01       	movw	r6, r24
     c30:	28 89       	ldd	r18, Y+16	; 0x10
     c32:	39 89       	ldd	r19, Y+17	; 0x11
     c34:	4a 89       	ldd	r20, Y+18	; 0x12
     c36:	5b 89       	ldd	r21, Y+19	; 0x13
     c38:	68 85       	ldd	r22, Y+8	; 0x08
     c3a:	79 85       	ldd	r23, Y+9	; 0x09
     c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c40:	3d d2       	rcall	.+1146   	; 0x10bc <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c3 01       	movw	r24, r6
     c48:	b2 01       	movw	r22, r4
     c4a:	ee d0       	rcall	.+476    	; 0xe28 <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
     c4c:	88 8a       	std	Y+16, r8	; 0x10
     c4e:	99 8a       	std	Y+17, r9	; 0x11
     c50:	aa 8a       	std	Y+18, r10	; 0x12
     c52:	bb 8a       	std	Y+19, r11	; 0x13
    S->state[0] = in;
     c54:	cc 86       	std	Y+12, r12	; 0x0c
     c56:	dd 86       	std	Y+13, r13	; 0x0d
     c58:	ee 86       	std	Y+14, r14	; 0x0e
     c5a:	ff 86       	std	Y+15, r15	; 0x0f
    S->state[2] = out;
     c5c:	6c 8b       	std	Y+20, r22	; 0x14
     c5e:	7d 8b       	std	Y+21, r23	; 0x15
     c60:	8e 8b       	std	Y+22, r24	; 0x16
     c62:	9f 8b       	std	Y+23, r25	; 0x17

    /* return to application */
    return (out);
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	7f 90       	pop	r7
     c7a:	6f 90       	pop	r6
     c7c:	5f 90       	pop	r5
     c7e:	4f 90       	pop	r4
     c80:	08 95       	ret

00000c82 <arm_pid_init_f32>:

void arm_pid_init_f32(arm_pid_instance_f32 *S, int32_t resetStateFlag)
{
     c82:	4f 92       	push	r4
     c84:	5f 92       	push	r5
     c86:	6f 92       	push	r6
     c88:	7f 92       	push	r7
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	ec 01       	movw	r28, r24
     ca0:	4a 01       	movw	r8, r20
     ca2:	5b 01       	movw	r10, r22
    /* Derived coefficient A0 */
    S->A0 = S->Kp + S->Ki + S->Kd;
     ca4:	48 8c       	ldd	r4, Y+24	; 0x18
     ca6:	59 8c       	ldd	r5, Y+25	; 0x19
     ca8:	6a 8c       	ldd	r6, Y+26	; 0x1a
     caa:	7b 8c       	ldd	r7, Y+27	; 0x1b
     cac:	c8 a0       	ldd	r12, Y+32	; 0x20
     cae:	d9 a0       	ldd	r13, Y+33	; 0x21
     cb0:	ea a0       	ldd	r14, Y+34	; 0x22
     cb2:	fb a0       	ldd	r15, Y+35	; 0x23
     cb4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cb6:	3d 8d       	ldd	r19, Y+29	; 0x1d
     cb8:	4e 8d       	ldd	r20, Y+30	; 0x1e
     cba:	5f 8d       	ldd	r21, Y+31	; 0x1f
     cbc:	c3 01       	movw	r24, r6
     cbe:	b2 01       	movw	r22, r4
     cc0:	b3 d0       	rcall	.+358    	; 0xe28 <__addsf3>
     cc2:	a7 01       	movw	r20, r14
     cc4:	96 01       	movw	r18, r12
     cc6:	b0 d0       	rcall	.+352    	; 0xe28 <__addsf3>
     cc8:	68 83       	st	Y, r22
     cca:	79 83       	std	Y+1, r23	; 0x01
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	9b 83       	std	Y+3, r25	; 0x03

    /* Derived coefficient A1 */
    S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
     cd0:	a7 01       	movw	r20, r14
     cd2:	96 01       	movw	r18, r12
     cd4:	c7 01       	movw	r24, r14
     cd6:	b6 01       	movw	r22, r12
     cd8:	a7 d0       	rcall	.+334    	; 0xe28 <__addsf3>
     cda:	a3 01       	movw	r20, r6
     cdc:	92 01       	movw	r18, r4
     cde:	a4 d0       	rcall	.+328    	; 0xe28 <__addsf3>
     ce0:	90 58       	subi	r25, 0x80	; 128
     ce2:	6c 83       	std	Y+4, r22	; 0x04
     ce4:	7d 83       	std	Y+5, r23	; 0x05
     ce6:	8e 83       	std	Y+6, r24	; 0x06
     ce8:	9f 83       	std	Y+7, r25	; 0x07

    /* Derived coefficient A2 */
    S->A2 = S->Kd;
     cea:	c8 86       	std	Y+8, r12	; 0x08
     cec:	d9 86       	std	Y+9, r13	; 0x09
     cee:	ea 86       	std	Y+10, r14	; 0x0a
     cf0:	fb 86       	std	Y+11, r15	; 0x0b

    /* Check whether state needs reset or not */
    if (resetStateFlag)
     cf2:	89 28       	or	r8, r9
     cf4:	8a 28       	or	r8, r10
     cf6:	8b 28       	or	r8, r11
     cf8:	31 f0       	breq	.+12     	; 0xd06 <arm_pid_init_f32+0x84>
}

void arm_pid_reset_f32(arm_pid_instance_f32 *S)
{
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
     cfa:	2c 96       	adiw	r28, 0x0c	; 12
     cfc:	8c e0       	ldi	r24, 0x0C	; 12
     cfe:	fe 01       	movw	r30, r28
     d00:	11 92       	st	Z+, r1
     d02:	8a 95       	dec	r24
     d04:	e9 f7       	brne	.-6      	; 0xd00 <arm_pid_init_f32+0x7e>
    S->A2 = S->Kd;

    /* Check whether state needs reset or not */
    if (resetStateFlag)
        arm_pid_reset_f32(S);
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	bf 90       	pop	r11
     d14:	af 90       	pop	r10
     d16:	9f 90       	pop	r9
     d18:	8f 90       	pop	r8
     d1a:	7f 90       	pop	r7
     d1c:	6f 90       	pop	r6
     d1e:	5f 90       	pop	r5
     d20:	4f 90       	pop	r4
     d22:	08 95       	ret

00000d24 <RTC_BCDtoDEC>:
#include "RTC.h"

uint8_t RTC_BCDtoDEC(uint8_t bcd)
{
    return ((bcd >> 4) * 10 + (0x0F & bcd));
     d24:	28 2f       	mov	r18, r24
     d26:	22 95       	swap	r18
     d28:	2f 70       	andi	r18, 0x0F	; 15
     d2a:	92 2f       	mov	r25, r18
     d2c:	99 0f       	add	r25, r25
     d2e:	99 0f       	add	r25, r25
     d30:	92 0f       	add	r25, r18
     d32:	99 0f       	add	r25, r25
     d34:	8f 70       	andi	r24, 0x0F	; 15
}
     d36:	89 0f       	add	r24, r25
     d38:	08 95       	ret

00000d3a <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t dec)
{
    return ((dec / 10) << 4) | (dec % 10);
     d3a:	6a e0       	ldi	r22, 0x0A	; 10
     d3c:	32 d0       	rcall	.+100    	; 0xda2 <__udivmodqi4>
     d3e:	82 95       	swap	r24
     d40:	80 7f       	andi	r24, 0xF0	; 240
     d42:	89 2b       	or	r24, r25
     d44:	08 95       	ret

00000d46 <TWI_Init>:
{
    TWI_Start();
    TWI_SendByte(addr);
    TWI_SendByte(byte);
    TWI_Stop();
}
     d46:	88 e4       	ldi	r24, 0x48	; 72
     d48:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     d4c:	08 95       	ret

00000d4e <TWI_Start>:
     d4e:	84 ea       	ldi	r24, 0xA4	; 164
     d50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d54:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d58:	87 ff       	sbrs	r24, 7
     d5a:	fc cf       	rjmp	.-8      	; 0xd54 <TWI_Start+0x6>
     d5c:	08 95       	ret

00000d5e <TWI_Stop>:
     d5e:	84 e9       	ldi	r24, 0x94	; 148
     d60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d64:	08 95       	ret

00000d66 <TWI_SendByte>:
     d66:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     d6a:	84 e8       	ldi	r24, 0x84	; 132
     d6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d70:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d74:	87 ff       	sbrs	r24, 7
     d76:	fc cf       	rjmp	.-8      	; 0xd70 <TWI_SendByte+0xa>
     d78:	08 95       	ret

00000d7a <TWI_ReadByte>:

uint8_t TWI_ReadByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d7a:	84 ec       	ldi	r24, 0xC4	; 196
     d7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     d80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d84:	87 ff       	sbrs	r24, 7
     d86:	fc cf       	rjmp	.-8      	; 0xd80 <TWI_ReadByte+0x6>

    return TWDR;
     d88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
     d8c:	08 95       	ret

00000d8e <TWI_ReadLastByte>:

uint8_t TWI_ReadLastByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
     d8e:	84 e8       	ldi	r24, 0x84	; 132
     d90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     d94:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     d98:	87 ff       	sbrs	r24, 7
     d9a:	fc cf       	rjmp	.-8      	; 0xd94 <TWI_ReadLastByte+0x6>

    return TWDR;
     d9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     da0:	08 95       	ret

00000da2 <__udivmodqi4>:
     da2:	99 1b       	sub	r25, r25
     da4:	79 e0       	ldi	r23, 0x09	; 9
     da6:	04 c0       	rjmp	.+8      	; 0xdb0 <__udivmodqi4_ep>

00000da8 <__udivmodqi4_loop>:
     da8:	99 1f       	adc	r25, r25
     daa:	96 17       	cp	r25, r22
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <__udivmodqi4_ep>
     dae:	96 1b       	sub	r25, r22

00000db0 <__udivmodqi4_ep>:
     db0:	88 1f       	adc	r24, r24
     db2:	7a 95       	dec	r23
     db4:	c9 f7       	brne	.-14     	; 0xda8 <__udivmodqi4_loop>
     db6:	80 95       	com	r24
     db8:	08 95       	ret

00000dba <__udivmodhi4>:
     dba:	aa 1b       	sub	r26, r26
     dbc:	bb 1b       	sub	r27, r27
     dbe:	51 e1       	ldi	r21, 0x11	; 17
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <__udivmodhi4_ep>

00000dc2 <__udivmodhi4_loop>:
     dc2:	aa 1f       	adc	r26, r26
     dc4:	bb 1f       	adc	r27, r27
     dc6:	a6 17       	cp	r26, r22
     dc8:	b7 07       	cpc	r27, r23
     dca:	10 f0       	brcs	.+4      	; 0xdd0 <__udivmodhi4_ep>
     dcc:	a6 1b       	sub	r26, r22
     dce:	b7 0b       	sbc	r27, r23

00000dd0 <__udivmodhi4_ep>:
     dd0:	88 1f       	adc	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	5a 95       	dec	r21
     dd6:	a9 f7       	brne	.-22     	; 0xdc2 <__udivmodhi4_loop>
     dd8:	80 95       	com	r24
     dda:	90 95       	com	r25
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	08 95       	ret

00000de2 <__udivmodsi4>:
     de2:	a1 e2       	ldi	r26, 0x21	; 33
     de4:	1a 2e       	mov	r1, r26
     de6:	aa 1b       	sub	r26, r26
     de8:	bb 1b       	sub	r27, r27
     dea:	fd 01       	movw	r30, r26
     dec:	0d c0       	rjmp	.+26     	; 0xe08 <__udivmodsi4_ep>

00000dee <__udivmodsi4_loop>:
     dee:	aa 1f       	adc	r26, r26
     df0:	bb 1f       	adc	r27, r27
     df2:	ee 1f       	adc	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	a2 17       	cp	r26, r18
     df8:	b3 07       	cpc	r27, r19
     dfa:	e4 07       	cpc	r30, r20
     dfc:	f5 07       	cpc	r31, r21
     dfe:	20 f0       	brcs	.+8      	; 0xe08 <__udivmodsi4_ep>
     e00:	a2 1b       	sub	r26, r18
     e02:	b3 0b       	sbc	r27, r19
     e04:	e4 0b       	sbc	r30, r20
     e06:	f5 0b       	sbc	r31, r21

00000e08 <__udivmodsi4_ep>:
     e08:	66 1f       	adc	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	1a 94       	dec	r1
     e12:	69 f7       	brne	.-38     	; 0xdee <__udivmodsi4_loop>
     e14:	60 95       	com	r22
     e16:	70 95       	com	r23
     e18:	80 95       	com	r24
     e1a:	90 95       	com	r25
     e1c:	9b 01       	movw	r18, r22
     e1e:	ac 01       	movw	r20, r24
     e20:	bd 01       	movw	r22, r26
     e22:	cf 01       	movw	r24, r30
     e24:	08 95       	ret

00000e26 <__subsf3>:
     e26:	50 58       	subi	r21, 0x80	; 128

00000e28 <__addsf3>:
     e28:	bb 27       	eor	r27, r27
     e2a:	aa 27       	eor	r26, r26
     e2c:	0e d0       	rcall	.+28     	; 0xe4a <__addsf3x>
     e2e:	08 c1       	rjmp	.+528    	; 0x1040 <__fp_round>
     e30:	f9 d0       	rcall	.+498    	; 0x1024 <__fp_pscA>
     e32:	30 f0       	brcs	.+12     	; 0xe40 <__addsf3+0x18>
     e34:	fe d0       	rcall	.+508    	; 0x1032 <__fp_pscB>
     e36:	20 f0       	brcs	.+8      	; 0xe40 <__addsf3+0x18>
     e38:	31 f4       	brne	.+12     	; 0xe46 <__addsf3+0x1e>
     e3a:	9f 3f       	cpi	r25, 0xFF	; 255
     e3c:	11 f4       	brne	.+4      	; 0xe42 <__addsf3+0x1a>
     e3e:	1e f4       	brtc	.+6      	; 0xe46 <__addsf3+0x1e>
     e40:	ee c0       	rjmp	.+476    	; 0x101e <__fp_nan>
     e42:	0e f4       	brtc	.+2      	; 0xe46 <__addsf3+0x1e>
     e44:	e0 95       	com	r30
     e46:	e7 fb       	bst	r30, 7
     e48:	e4 c0       	rjmp	.+456    	; 0x1012 <__fp_inf>

00000e4a <__addsf3x>:
     e4a:	e9 2f       	mov	r30, r25
     e4c:	0a d1       	rcall	.+532    	; 0x1062 <__fp_split3>
     e4e:	80 f3       	brcs	.-32     	; 0xe30 <__addsf3+0x8>
     e50:	ba 17       	cp	r27, r26
     e52:	62 07       	cpc	r22, r18
     e54:	73 07       	cpc	r23, r19
     e56:	84 07       	cpc	r24, r20
     e58:	95 07       	cpc	r25, r21
     e5a:	18 f0       	brcs	.+6      	; 0xe62 <__addsf3x+0x18>
     e5c:	71 f4       	brne	.+28     	; 0xe7a <__addsf3x+0x30>
     e5e:	9e f5       	brtc	.+102    	; 0xec6 <__addsf3x+0x7c>
     e60:	22 c1       	rjmp	.+580    	; 0x10a6 <__fp_zero>
     e62:	0e f4       	brtc	.+2      	; 0xe66 <__addsf3x+0x1c>
     e64:	e0 95       	com	r30
     e66:	0b 2e       	mov	r0, r27
     e68:	ba 2f       	mov	r27, r26
     e6a:	a0 2d       	mov	r26, r0
     e6c:	0b 01       	movw	r0, r22
     e6e:	b9 01       	movw	r22, r18
     e70:	90 01       	movw	r18, r0
     e72:	0c 01       	movw	r0, r24
     e74:	ca 01       	movw	r24, r20
     e76:	a0 01       	movw	r20, r0
     e78:	11 24       	eor	r1, r1
     e7a:	ff 27       	eor	r31, r31
     e7c:	59 1b       	sub	r21, r25
     e7e:	99 f0       	breq	.+38     	; 0xea6 <__addsf3x+0x5c>
     e80:	59 3f       	cpi	r21, 0xF9	; 249
     e82:	50 f4       	brcc	.+20     	; 0xe98 <__addsf3x+0x4e>
     e84:	50 3e       	cpi	r21, 0xE0	; 224
     e86:	68 f1       	brcs	.+90     	; 0xee2 <__addsf3x+0x98>
     e88:	1a 16       	cp	r1, r26
     e8a:	f0 40       	sbci	r31, 0x00	; 0
     e8c:	a2 2f       	mov	r26, r18
     e8e:	23 2f       	mov	r18, r19
     e90:	34 2f       	mov	r19, r20
     e92:	44 27       	eor	r20, r20
     e94:	58 5f       	subi	r21, 0xF8	; 248
     e96:	f3 cf       	rjmp	.-26     	; 0xe7e <__addsf3x+0x34>
     e98:	46 95       	lsr	r20
     e9a:	37 95       	ror	r19
     e9c:	27 95       	ror	r18
     e9e:	a7 95       	ror	r26
     ea0:	f0 40       	sbci	r31, 0x00	; 0
     ea2:	53 95       	inc	r21
     ea4:	c9 f7       	brne	.-14     	; 0xe98 <__addsf3x+0x4e>
     ea6:	7e f4       	brtc	.+30     	; 0xec6 <__addsf3x+0x7c>
     ea8:	1f 16       	cp	r1, r31
     eaa:	ba 0b       	sbc	r27, r26
     eac:	62 0b       	sbc	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	ba f0       	brmi	.+46     	; 0xee2 <__addsf3x+0x98>
     eb4:	91 50       	subi	r25, 0x01	; 1
     eb6:	a1 f0       	breq	.+40     	; 0xee0 <__addsf3x+0x96>
     eb8:	ff 0f       	add	r31, r31
     eba:	bb 1f       	adc	r27, r27
     ebc:	66 1f       	adc	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	88 1f       	adc	r24, r24
     ec2:	c2 f7       	brpl	.-16     	; 0xeb4 <__addsf3x+0x6a>
     ec4:	0e c0       	rjmp	.+28     	; 0xee2 <__addsf3x+0x98>
     ec6:	ba 0f       	add	r27, r26
     ec8:	62 1f       	adc	r22, r18
     eca:	73 1f       	adc	r23, r19
     ecc:	84 1f       	adc	r24, r20
     ece:	48 f4       	brcc	.+18     	; 0xee2 <__addsf3x+0x98>
     ed0:	87 95       	ror	r24
     ed2:	77 95       	ror	r23
     ed4:	67 95       	ror	r22
     ed6:	b7 95       	ror	r27
     ed8:	f7 95       	ror	r31
     eda:	9e 3f       	cpi	r25, 0xFE	; 254
     edc:	08 f0       	brcs	.+2      	; 0xee0 <__addsf3x+0x96>
     ede:	b3 cf       	rjmp	.-154    	; 0xe46 <__addsf3+0x1e>
     ee0:	93 95       	inc	r25
     ee2:	88 0f       	add	r24, r24
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <__addsf3x+0x9e>
     ee6:	99 27       	eor	r25, r25
     ee8:	ee 0f       	add	r30, r30
     eea:	97 95       	ror	r25
     eec:	87 95       	ror	r24
     eee:	08 95       	ret

00000ef0 <__cmpsf2>:
     ef0:	6c d0       	rcall	.+216    	; 0xfca <__fp_cmp>
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__cmpsf2+0x6>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	08 95       	ret

00000ef8 <__fixunssfsi>:
     ef8:	bc d0       	rcall	.+376    	; 0x1072 <__fp_splitA>
     efa:	88 f0       	brcs	.+34     	; 0xf1e <__fixunssfsi+0x26>
     efc:	9f 57       	subi	r25, 0x7F	; 127
     efe:	90 f0       	brcs	.+36     	; 0xf24 <__fixunssfsi+0x2c>
     f00:	b9 2f       	mov	r27, r25
     f02:	99 27       	eor	r25, r25
     f04:	b7 51       	subi	r27, 0x17	; 23
     f06:	a0 f0       	brcs	.+40     	; 0xf30 <__fixunssfsi+0x38>
     f08:	d1 f0       	breq	.+52     	; 0xf3e <__fixunssfsi+0x46>
     f0a:	66 0f       	add	r22, r22
     f0c:	77 1f       	adc	r23, r23
     f0e:	88 1f       	adc	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	1a f0       	brmi	.+6      	; 0xf1a <__fixunssfsi+0x22>
     f14:	ba 95       	dec	r27
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__fixunssfsi+0x12>
     f18:	12 c0       	rjmp	.+36     	; 0xf3e <__fixunssfsi+0x46>
     f1a:	b1 30       	cpi	r27, 0x01	; 1
     f1c:	81 f0       	breq	.+32     	; 0xf3e <__fixunssfsi+0x46>
     f1e:	c3 d0       	rcall	.+390    	; 0x10a6 <__fp_zero>
     f20:	b1 e0       	ldi	r27, 0x01	; 1
     f22:	08 95       	ret
     f24:	c0 c0       	rjmp	.+384    	; 0x10a6 <__fp_zero>
     f26:	67 2f       	mov	r22, r23
     f28:	78 2f       	mov	r23, r24
     f2a:	88 27       	eor	r24, r24
     f2c:	b8 5f       	subi	r27, 0xF8	; 248
     f2e:	39 f0       	breq	.+14     	; 0xf3e <__fixunssfsi+0x46>
     f30:	b9 3f       	cpi	r27, 0xF9	; 249
     f32:	cc f3       	brlt	.-14     	; 0xf26 <__fixunssfsi+0x2e>
     f34:	86 95       	lsr	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b3 95       	inc	r27
     f3c:	d9 f7       	brne	.-10     	; 0xf34 <__fixunssfsi+0x3c>
     f3e:	3e f4       	brtc	.+14     	; 0xf4e <__fixunssfsi+0x56>
     f40:	90 95       	com	r25
     f42:	80 95       	com	r24
     f44:	70 95       	com	r23
     f46:	61 95       	neg	r22
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__floatunsisf>:
     f50:	e8 94       	clt
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <__floatsisf+0x12>

00000f54 <__floatsisf>:
     f54:	97 fb       	bst	r25, 7
     f56:	3e f4       	brtc	.+14     	; 0xf66 <__floatsisf+0x12>
     f58:	90 95       	com	r25
     f5a:	80 95       	com	r24
     f5c:	70 95       	com	r23
     f5e:	61 95       	neg	r22
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	99 23       	and	r25, r25
     f68:	a9 f0       	breq	.+42     	; 0xf94 <__floatsisf+0x40>
     f6a:	f9 2f       	mov	r31, r25
     f6c:	96 e9       	ldi	r25, 0x96	; 150
     f6e:	bb 27       	eor	r27, r27
     f70:	93 95       	inc	r25
     f72:	f6 95       	lsr	r31
     f74:	87 95       	ror	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	f1 11       	cpse	r31, r1
     f7e:	f8 cf       	rjmp	.-16     	; 0xf70 <__floatsisf+0x1c>
     f80:	fa f4       	brpl	.+62     	; 0xfc0 <__floatsisf+0x6c>
     f82:	bb 0f       	add	r27, r27
     f84:	11 f4       	brne	.+4      	; 0xf8a <__floatsisf+0x36>
     f86:	60 ff       	sbrs	r22, 0
     f88:	1b c0       	rjmp	.+54     	; 0xfc0 <__floatsisf+0x6c>
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	16 c0       	rjmp	.+44     	; 0xfc0 <__floatsisf+0x6c>
     f94:	88 23       	and	r24, r24
     f96:	11 f0       	breq	.+4      	; 0xf9c <__floatsisf+0x48>
     f98:	96 e9       	ldi	r25, 0x96	; 150
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <__floatsisf+0x6a>
     f9c:	77 23       	and	r23, r23
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <__floatsisf+0x54>
     fa0:	9e e8       	ldi	r25, 0x8E	; 142
     fa2:	87 2f       	mov	r24, r23
     fa4:	76 2f       	mov	r23, r22
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <__floatsisf+0x5e>
     fa8:	66 23       	and	r22, r22
     faa:	71 f0       	breq	.+28     	; 0xfc8 <__floatsisf+0x74>
     fac:	96 e8       	ldi	r25, 0x86	; 134
     fae:	86 2f       	mov	r24, r22
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	2a f0       	brmi	.+10     	; 0xfc0 <__floatsisf+0x6c>
     fb6:	9a 95       	dec	r25
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	da f7       	brpl	.-10     	; 0xfb6 <__floatsisf+0x62>
     fc0:	88 0f       	add	r24, r24
     fc2:	96 95       	lsr	r25
     fc4:	87 95       	ror	r24
     fc6:	97 f9       	bld	r25, 7
     fc8:	08 95       	ret

00000fca <__fp_cmp>:
     fca:	99 0f       	add	r25, r25
     fcc:	00 08       	sbc	r0, r0
     fce:	55 0f       	add	r21, r21
     fd0:	aa 0b       	sbc	r26, r26
     fd2:	e0 e8       	ldi	r30, 0x80	; 128
     fd4:	fe ef       	ldi	r31, 0xFE	; 254
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	e8 07       	cpc	r30, r24
     fdc:	f9 07       	cpc	r31, r25
     fde:	c0 f0       	brcs	.+48     	; 0x1010 <__fp_cmp+0x46>
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	e4 07       	cpc	r30, r20
     fe6:	f5 07       	cpc	r31, r21
     fe8:	98 f0       	brcs	.+38     	; 0x1010 <__fp_cmp+0x46>
     fea:	62 1b       	sub	r22, r18
     fec:	73 0b       	sbc	r23, r19
     fee:	84 0b       	sbc	r24, r20
     ff0:	95 0b       	sbc	r25, r21
     ff2:	39 f4       	brne	.+14     	; 0x1002 <__fp_cmp+0x38>
     ff4:	0a 26       	eor	r0, r26
     ff6:	61 f0       	breq	.+24     	; 0x1010 <__fp_cmp+0x46>
     ff8:	23 2b       	or	r18, r19
     ffa:	24 2b       	or	r18, r20
     ffc:	25 2b       	or	r18, r21
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__fp_cmp+0x3e>
    1000:	08 95       	ret
    1002:	0a 26       	eor	r0, r26
    1004:	09 f4       	brne	.+2      	; 0x1008 <__fp_cmp+0x3e>
    1006:	a1 40       	sbci	r26, 0x01	; 1
    1008:	a6 95       	lsr	r26
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	81 1d       	adc	r24, r1
    100e:	81 1d       	adc	r24, r1
    1010:	08 95       	ret

00001012 <__fp_inf>:
    1012:	97 f9       	bld	r25, 7
    1014:	9f 67       	ori	r25, 0x7F	; 127
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	08 95       	ret

0000101e <__fp_nan>:
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	80 ec       	ldi	r24, 0xC0	; 192
    1022:	08 95       	ret

00001024 <__fp_pscA>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	18 06       	cpc	r1, r24
    102e:	09 06       	cpc	r0, r25
    1030:	08 95       	ret

00001032 <__fp_pscB>:
    1032:	00 24       	eor	r0, r0
    1034:	0a 94       	dec	r0
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	14 06       	cpc	r1, r20
    103c:	05 06       	cpc	r0, r21
    103e:	08 95       	ret

00001040 <__fp_round>:
    1040:	09 2e       	mov	r0, r25
    1042:	03 94       	inc	r0
    1044:	00 0c       	add	r0, r0
    1046:	11 f4       	brne	.+4      	; 0x104c <__fp_round+0xc>
    1048:	88 23       	and	r24, r24
    104a:	52 f0       	brmi	.+20     	; 0x1060 <__fp_round+0x20>
    104c:	bb 0f       	add	r27, r27
    104e:	40 f4       	brcc	.+16     	; 0x1060 <__fp_round+0x20>
    1050:	bf 2b       	or	r27, r31
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0x18>
    1054:	60 ff       	sbrs	r22, 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__fp_round+0x20>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__fp_split3>:
    1062:	57 fd       	sbrc	r21, 7
    1064:	90 58       	subi	r25, 0x80	; 128
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	59 f0       	breq	.+22     	; 0x1082 <__fp_splitA+0x10>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	71 f0       	breq	.+28     	; 0x108c <__fp_splitA+0x1a>
    1070:	47 95       	ror	r20

00001072 <__fp_splitA>:
    1072:	88 0f       	add	r24, r24
    1074:	97 fb       	bst	r25, 7
    1076:	99 1f       	adc	r25, r25
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_splitA+0x20>
    107a:	9f 3f       	cpi	r25, 0xFF	; 255
    107c:	79 f0       	breq	.+30     	; 0x109c <__fp_splitA+0x2a>
    107e:	87 95       	ror	r24
    1080:	08 95       	ret
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	55 1f       	adc	r21, r21
    108a:	f2 cf       	rjmp	.-28     	; 0x1070 <__fp_split3+0xe>
    108c:	46 95       	lsr	r20
    108e:	f1 df       	rcall	.-30     	; 0x1072 <__fp_splitA>
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <__fp_splitA+0x30>
    1092:	16 16       	cp	r1, r22
    1094:	17 06       	cpc	r1, r23
    1096:	18 06       	cpc	r1, r24
    1098:	99 1f       	adc	r25, r25
    109a:	f1 cf       	rjmp	.-30     	; 0x107e <__fp_splitA+0xc>
    109c:	86 95       	lsr	r24
    109e:	71 05       	cpc	r23, r1
    10a0:	61 05       	cpc	r22, r1
    10a2:	08 94       	sec
    10a4:	08 95       	ret

000010a6 <__fp_zero>:
    10a6:	e8 94       	clt

000010a8 <__fp_szero>:
    10a8:	bb 27       	eor	r27, r27
    10aa:	66 27       	eor	r22, r22
    10ac:	77 27       	eor	r23, r23
    10ae:	cb 01       	movw	r24, r22
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <__gesf2>:
    10b4:	8a df       	rcall	.-236    	; 0xfca <__fp_cmp>
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <__gesf2+0x6>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	08 95       	ret

000010bc <__mulsf3>:
    10bc:	0a d0       	rcall	.+20     	; 0x10d2 <__mulsf3x>
    10be:	c0 cf       	rjmp	.-128    	; 0x1040 <__fp_round>
    10c0:	b1 df       	rcall	.-158    	; 0x1024 <__fp_pscA>
    10c2:	28 f0       	brcs	.+10     	; 0x10ce <__mulsf3+0x12>
    10c4:	b6 df       	rcall	.-148    	; 0x1032 <__fp_pscB>
    10c6:	18 f0       	brcs	.+6      	; 0x10ce <__mulsf3+0x12>
    10c8:	95 23       	and	r25, r21
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__mulsf3+0x12>
    10cc:	a2 cf       	rjmp	.-188    	; 0x1012 <__fp_inf>
    10ce:	a7 cf       	rjmp	.-178    	; 0x101e <__fp_nan>
    10d0:	eb cf       	rjmp	.-42     	; 0x10a8 <__fp_szero>

000010d2 <__mulsf3x>:
    10d2:	c7 df       	rcall	.-114    	; 0x1062 <__fp_split3>
    10d4:	a8 f3       	brcs	.-22     	; 0x10c0 <__mulsf3+0x4>

000010d6 <__mulsf3_pse>:
    10d6:	99 23       	and	r25, r25
    10d8:	d9 f3       	breq	.-10     	; 0x10d0 <__mulsf3+0x14>
    10da:	55 23       	and	r21, r21
    10dc:	c9 f3       	breq	.-14     	; 0x10d0 <__mulsf3+0x14>
    10de:	95 0f       	add	r25, r21
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	55 1f       	adc	r21, r21
    10e4:	aa 27       	eor	r26, r26
    10e6:	ee 27       	eor	r30, r30
    10e8:	ff 27       	eor	r31, r31
    10ea:	bb 27       	eor	r27, r27
    10ec:	00 24       	eor	r0, r0
    10ee:	08 94       	sec
    10f0:	67 95       	ror	r22
    10f2:	20 f4       	brcc	.+8      	; 0x10fc <__mulsf3_pse+0x26>
    10f4:	e2 0f       	add	r30, r18
    10f6:	f3 1f       	adc	r31, r19
    10f8:	b4 1f       	adc	r27, r20
    10fa:	0a 1e       	adc	r0, r26
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	44 1f       	adc	r20, r20
    1102:	aa 1f       	adc	r26, r26
    1104:	66 95       	lsr	r22
    1106:	a9 f7       	brne	.-22     	; 0x10f2 <__mulsf3_pse+0x1c>
    1108:	77 95       	ror	r23
    110a:	30 f4       	brcc	.+12     	; 0x1118 <__mulsf3_pse+0x42>
    110c:	f3 0f       	add	r31, r19
    110e:	b4 1f       	adc	r27, r20
    1110:	0a 1e       	adc	r0, r26
    1112:	12 1e       	adc	r1, r18
    1114:	08 f4       	brcc	.+2      	; 0x1118 <__mulsf3_pse+0x42>
    1116:	63 95       	inc	r22
    1118:	33 0f       	add	r19, r19
    111a:	44 1f       	adc	r20, r20
    111c:	aa 1f       	adc	r26, r26
    111e:	22 1f       	adc	r18, r18
    1120:	76 95       	lsr	r23
    1122:	99 f7       	brne	.-26     	; 0x110a <__mulsf3_pse+0x34>
    1124:	87 95       	ror	r24
    1126:	20 f4       	brcc	.+8      	; 0x1130 <__mulsf3_pse+0x5a>
    1128:	b4 0f       	add	r27, r20
    112a:	0a 1e       	adc	r0, r26
    112c:	12 1e       	adc	r1, r18
    112e:	63 1f       	adc	r22, r19
    1130:	44 0f       	add	r20, r20
    1132:	aa 1f       	adc	r26, r26
    1134:	22 1f       	adc	r18, r18
    1136:	33 1f       	adc	r19, r19
    1138:	86 95       	lsr	r24
    113a:	a9 f7       	brne	.-22     	; 0x1126 <__mulsf3_pse+0x50>
    113c:	86 2f       	mov	r24, r22
    113e:	71 2d       	mov	r23, r1
    1140:	60 2d       	mov	r22, r0
    1142:	11 24       	eor	r1, r1
    1144:	9f 57       	subi	r25, 0x7F	; 127
    1146:	50 40       	sbci	r21, 0x00	; 0
    1148:	8a f0       	brmi	.+34     	; 0x116c <__mulsf3_pse+0x96>
    114a:	e1 f0       	breq	.+56     	; 0x1184 <__mulsf3_pse+0xae>
    114c:	88 23       	and	r24, r24
    114e:	4a f0       	brmi	.+18     	; 0x1162 <__mulsf3_pse+0x8c>
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	bb 1f       	adc	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	50 40       	sbci	r21, 0x00	; 0
    1160:	a9 f7       	brne	.-22     	; 0x114c <__mulsf3_pse+0x76>
    1162:	9e 3f       	cpi	r25, 0xFE	; 254
    1164:	51 05       	cpc	r21, r1
    1166:	70 f0       	brcs	.+28     	; 0x1184 <__mulsf3_pse+0xae>
    1168:	54 cf       	rjmp	.-344    	; 0x1012 <__fp_inf>
    116a:	9e cf       	rjmp	.-196    	; 0x10a8 <__fp_szero>
    116c:	5f 3f       	cpi	r21, 0xFF	; 255
    116e:	ec f3       	brlt	.-6      	; 0x116a <__mulsf3_pse+0x94>
    1170:	98 3e       	cpi	r25, 0xE8	; 232
    1172:	dc f3       	brlt	.-10     	; 0x116a <__mulsf3_pse+0x94>
    1174:	86 95       	lsr	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	b7 95       	ror	r27
    117c:	f7 95       	ror	r31
    117e:	e7 95       	ror	r30
    1180:	9f 5f       	subi	r25, 0xFF	; 255
    1182:	c1 f7       	brne	.-16     	; 0x1174 <__mulsf3_pse+0x9e>
    1184:	fe 2b       	or	r31, r30
    1186:	88 0f       	add	r24, r24
    1188:	91 1d       	adc	r25, r1
    118a:	96 95       	lsr	r25
    118c:	87 95       	ror	r24
    118e:	97 f9       	bld	r25, 7
    1190:	08 95       	ret

00001192 <_exit>:
    1192:	f8 94       	cli

00001194 <__stop_program>:
    1194:	ff cf       	rjmp	.-2      	; 0x1194 <__stop_program>
