
NixieClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000012ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000125a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800100  00800100  000012ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf1  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b36  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4e  00000000  00000000  00003bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000049fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000763  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c2d  00000000  00000000  000054b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000060e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
       4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
       6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
       8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
       a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
       c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
       e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
      10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
      12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
      14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
      16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
      18:	25 c0       	rjmp	.+74     	; 0x64 <__vector_12>
      1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
      1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
      1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
      20:	96 c1       	rjmp	.+812    	; 0x34e <__vector_16>
      22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
      24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
      26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf ef       	ldi	r28, 0xFF	; 255
      2e:	d2 e0       	ldi	r29, 0x02	; 2
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
      34:	21 e0       	ldi	r18, 0x01	; 1
      36:	a0 e0       	ldi	r26, 0x00	; 0
      38:	b1 e0       	ldi	r27, 0x01	; 1
      3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
      3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
      3e:	a3 36       	cpi	r26, 0x63	; 99
      40:	b2 07       	cpc	r27, r18
      42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
      44:	10 d2       	rcall	.+1056   	; 0x466 <main>
      46:	07 c9       	rjmp	.-3570   	; 0xfffff256 <__eeprom_end+0xff7ef256>

00000048 <__bad_interrupt>:
      48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <IO_Init>:

void SoftTurnoff(void)
{
    if ((indication.isTurnedOff) && (voltage.pid.setPoint > 0.0))
        voltage.pid.setPoint -= 0.005;
}
      4a:	8d b1       	in	r24, 0x0d	; 13
      4c:	8c e0       	ldi	r24, 0x0C	; 12
      4e:	8d b9       	out	0x0d, r24	; 13
      50:	1e b8       	out	0x0e, r1	; 14
      52:	68 98       	cbi	0x0d, 0	; 13
      54:	70 9a       	sbi	0x0e, 0	; 14
      56:	22 9a       	sbi	0x04, 2	; 4
      58:	15 b8       	out	0x05, r1	; 5
      5a:	8a b1       	in	r24, 0x0a	; 10
      5c:	8f ef       	ldi	r24, 0xFF	; 255
      5e:	8a b9       	out	0x0a, r24	; 10
      60:	1b b8       	out	0x0b, r1	; 11
      62:	08 95       	ret

00000064 <__vector_12>:

ISR(TIMER0_COMPA_vect)
{
      64:	1f 92       	push	r1
      66:	0f 92       	push	r0
      68:	0f b6       	in	r0, 0x3f	; 63
      6a:	0f 92       	push	r0
      6c:	11 24       	eor	r1, r1
      6e:	2f 93       	push	r18
      70:	5f 93       	push	r21
      72:	6f 93       	push	r22
      74:	7f 93       	push	r23
      76:	8f 93       	push	r24
      78:	9f 93       	push	r25
      7a:	af 93       	push	r26
      7c:	bf 93       	push	r27
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	ef 93       	push	r30
      84:	ff 93       	push	r31
    if (indication.pause)
      86:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <indication+0x6>
      8a:	81 11       	cpse	r24, r1
      8c:	3a c0       	rjmp	.+116    	; 0x102 <__vector_12+0x9e>
        return;

    if (indication.dispMode == DISPLAY_TIME)
      8e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0x5>
      92:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <indication+0x4>
      96:	81 11       	cpse	r24, r1
      98:	14 c0       	rjmp	.+40     	; 0xc2 <__vector_12+0x5e>
    {
        switch (indication.counter)
      9a:	ef ef       	ldi	r30, 0xFF	; 255
      9c:	e2 0f       	add	r30, r18
      9e:	ec 30       	cpi	r30, 0x0C	; 12
      a0:	a8 f4       	brcc	.+42     	; 0xcc <__vector_12+0x68>
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	eb 5a       	subi	r30, 0xAB	; 171
      a6:	ff 4f       	sbci	r31, 0xFF	; 255
      a8:	09 94       	ijmp
      aa:	b9 c0       	rjmp	.+370    	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
      ac:	52 c0       	rjmp	.+164    	; 0x152 <__vector_12+0xee>
      ae:	a3 c0       	rjmp	.+326    	; 0x1f6 <__vector_12+0x192>
      b0:	50 c0       	rjmp	.+160    	; 0x152 <__vector_12+0xee>
      b2:	7d c0       	rjmp	.+250    	; 0x1ae <__vector_12+0x14a>
      b4:	4e c0       	rjmp	.+156    	; 0x152 <__vector_12+0xee>
      b6:	6c c0       	rjmp	.+216    	; 0x190 <__vector_12+0x12c>
      b8:	4c c0       	rjmp	.+152    	; 0x152 <__vector_12+0xee>
      ba:	8b c0       	rjmp	.+278    	; 0x1d2 <__vector_12+0x16e>
      bc:	4a c0       	rjmp	.+148    	; 0x152 <__vector_12+0xee>
      be:	a5 c0       	rjmp	.+330    	; 0x20a <__DATA_REGION_LENGTH__+0xa>
      c0:	48 c0       	rjmp	.+144    	; 0x152 <__vector_12+0xee>
            Display_DeadTime();
            break;
        }
    }

    if (indication.dispMode == DISPLAY_TEMPERATURE)
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	99 f1       	breq	.+102    	; 0x12c <__vector_12+0xc8>
        case 12:
            break;
        }
    }

    if (indication.dispMode == DISPLAY_CAD)
      c6:	82 30       	cpi	r24, 0x02	; 2
      c8:	09 f4       	brne	.+2      	; 0xcc <__vector_12+0x68>
      ca:	48 c0       	rjmp	.+144    	; 0x15c <__vector_12+0xf8>
        case 12:
            Display_DeadTime();
            break;
        }
    }
    if (++indication.counter > 12)
      cc:	2f 5f       	subi	r18, 0xFF	; 255
      ce:	2d 30       	cpi	r18, 0x0D	; 13
      d0:	48 f5       	brcc	.+82     	; 0x124 <__vector_12+0xc0>
      d2:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <indication+0x4>
        indication.counter = 1;
    ++cad.counter;
      d6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <cad+0x6>
      da:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <cad+0x7>
      de:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <cad+0x8>
      e2:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <cad+0x9>
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	a1 1d       	adc	r26, r1
      ea:	b1 1d       	adc	r27, r1
      ec:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <cad+0x6>
      f0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <cad+0x7>
      f4:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <cad+0x8>
      f8:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <cad+0x9>
    voltage.pid.run = true;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <voltage+0x3d>
}
     102:	ff 91       	pop	r31
     104:	ef 91       	pop	r30
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	bf 91       	pop	r27
     10c:	af 91       	pop	r26
     10e:	9f 91       	pop	r25
     110:	8f 91       	pop	r24
     112:	7f 91       	pop	r23
     114:	6f 91       	pop	r22
     116:	5f 91       	pop	r21
     118:	2f 91       	pop	r18
     11a:	0f 90       	pop	r0
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	0f 90       	pop	r0
     120:	1f 90       	pop	r1
     122:	18 95       	reti
            Display_DeadTime();
            break;
        }
    }
    if (++indication.counter > 12)
        indication.counter = 1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <indication+0x4>
     12a:	d5 cf       	rjmp	.-86     	; 0xd6 <__vector_12+0x72>
        }
    }

    if (indication.dispMode == DISPLAY_TEMPERATURE)
    {
        switch (indication.counter)
     12c:	ef ef       	ldi	r30, 0xFF	; 255
     12e:	e2 0f       	add	r30, r18
     130:	eb 30       	cpi	r30, 0x0B	; 11
     132:	60 f6       	brcc	.-104    	; 0xcc <__vector_12+0x68>
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	e2 56       	subi	r30, 0x62	; 98
     138:	ff 4f       	sbci	r31, 0xFF	; 255
     13a:	09 94       	ijmp
     13c:	a2 c0       	rjmp	.+324    	; 0x282 <__DATA_REGION_LENGTH__+0x82>
     13e:	09 c0       	rjmp	.+18     	; 0x152 <__vector_12+0xee>
     140:	c5 cf       	rjmp	.-118    	; 0xcc <__vector_12+0x68>
     142:	7f c0       	rjmp	.+254    	; 0x242 <__DATA_REGION_LENGTH__+0x42>
     144:	06 c0       	rjmp	.+12     	; 0x152 <__vector_12+0xee>
     146:	c2 cf       	rjmp	.-124    	; 0xcc <__vector_12+0x68>
     148:	91 c0       	rjmp	.+290    	; 0x26c <__DATA_REGION_LENGTH__+0x6c>
     14a:	03 c0       	rjmp	.+6      	; 0x152 <__vector_12+0xee>
     14c:	bf cf       	rjmp	.-130    	; 0xcc <__vector_12+0x68>
     14e:	84 c0       	rjmp	.+264    	; 0x258 <__DATA_REGION_LENGTH__+0x58>
     150:	00 c0       	rjmp	.+0      	; 0x152 <__vector_12+0xee>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     152:	8b b1       	in	r24, 0x0b	; 11
     154:	81 70       	andi	r24, 0x01	; 1
     156:	88 61       	ori	r24, 0x18	; 24
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	b8 cf       	rjmp	.-144    	; 0xcc <__vector_12+0x68>
        }
    }

    if (indication.dispMode == DISPLAY_CAD)
    {
        switch (indication.counter)
     15c:	ef ef       	ldi	r30, 0xFF	; 255
     15e:	e2 0f       	add	r30, r18
     160:	ec 30       	cpi	r30, 0x0C	; 12
     162:	08 f0       	brcs	.+2      	; 0x166 <__vector_12+0x102>
     164:	b3 cf       	rjmp	.-154    	; 0xcc <__vector_12+0x68>
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	e8 54       	subi	r30, 0x48	; 72
     16a:	ff 4f       	sbci	r31, 0xFF	; 255
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     16c:	8b b1       	in	r24, 0x0b	; 11
        }
    }

    if (indication.dispMode == DISPLAY_CAD)
    {
        switch (indication.counter)
     16e:	09 94       	ijmp
     170:	d7 c0       	rjmp	.+430    	; 0x320 <__stack+0x21>
     172:	0a c0       	rjmp	.+20     	; 0x188 <__vector_12+0x124>
     174:	c3 c0       	rjmp	.+390    	; 0x2fc <__DATA_REGION_LENGTH__+0xfc>
     176:	08 c0       	rjmp	.+16     	; 0x188 <__vector_12+0x124>
     178:	af c0       	rjmp	.+350    	; 0x2d8 <__DATA_REGION_LENGTH__+0xd8>
     17a:	06 c0       	rjmp	.+12     	; 0x188 <__vector_12+0x124>
     17c:	a4 c0       	rjmp	.+328    	; 0x2c6 <__DATA_REGION_LENGTH__+0xc6>
     17e:	04 c0       	rjmp	.+8      	; 0x188 <__vector_12+0x124>
     180:	b4 c0       	rjmp	.+360    	; 0x2ea <__DATA_REGION_LENGTH__+0xea>
     182:	02 c0       	rjmp	.+4      	; 0x188 <__vector_12+0x124>
     184:	c4 c0       	rjmp	.+392    	; 0x30e <__stack+0xf>
     186:	00 c0       	rjmp	.+0      	; 0x188 <__vector_12+0x124>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     188:	81 70       	andi	r24, 0x01	; 1
     18a:	88 61       	ori	r24, 0x18	; 24
     18c:	8b b9       	out	0x0b, r24	; 11
     18e:	9e cf       	rjmp	.-196    	; 0xcc <__vector_12+0x68>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     190:	8b b1       	in	r24, 0x0b	; 11
     192:	8f 71       	andi	r24, 0x1F	; 31
     194:	80 68       	ori	r24, 0x80	; 128
     196:	8b b9       	out	0x0b, r24	; 11
        case 6:
            Display_DeadTime();
            break;
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit2);
     198:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     19c:	8a 30       	cpi	r24, 0x0A	; 10
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__vector_12+0x13e>
     1a0:	95 cf       	rjmp	.-214    	; 0xcc <__vector_12+0x68>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
     1a2:	9b b1       	in	r25, 0x0b	; 11
     1a4:	91 7e       	andi	r25, 0xE1	; 225
     1a6:	88 0f       	add	r24, r24
     1a8:	89 2b       	or	r24, r25
     1aa:	8b b9       	out	0x0b, r24	; 11
     1ac:	8f cf       	rjmp	.-226    	; 0xcc <__vector_12+0x68>
            break;
        case 4:
            Display_DeadTime();
            break;
        case 5:
            TimeToDigit(time.min);
     1ae:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <time+0x1>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
     1b2:	6a e0       	ldi	r22, 0x0A	; 10
     1b4:	58 d6       	rcall	.+3248   	; 0xe66 <__udivmodqi4>
     1b6:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication>
    indication.digit2 = number % 10;
     1ba:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	8f 71       	andi	r24, 0x1F	; 31
     1c2:	80 66       	ori	r24, 0x60	; 96
     1c4:	8b b9       	out	0x0b, r24	; 11
        switch (indication.counter)
        {
        case 1:
            TemperatureToDigit(temperature.value);
            AnodeSwitch(3u);
            CathodeSwitch(indication.digit1);
     1c6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     1ca:	8a 30       	cpi	r24, 0x0A	; 10
     1cc:	08 f0       	brcs	.+2      	; 0x1d0 <__vector_12+0x16c>
     1ce:	7e cf       	rjmp	.-260    	; 0xcc <__vector_12+0x68>
     1d0:	e8 cf       	rjmp	.-48     	; 0x1a2 <__vector_12+0x13e>
            break;
        case 8:
            Display_DeadTime();
            break;
        case 9:
            TimeToDigit(time.sec);
     1d2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
     1d6:	6a e0       	ldi	r22, 0x0A	; 10
     1d8:	46 d6       	rcall	.+3212   	; 0xe66 <__udivmodqi4>
     1da:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication>
    indication.digit2 = number % 10;
     1de:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1e2:	8b b1       	in	r24, 0x0b	; 11
     1e4:	8f 71       	andi	r24, 0x1F	; 31
     1e6:	80 6a       	ori	r24, 0xA0	; 160
     1e8:	8b b9       	out	0x0b, r24	; 11
            Display_DeadTime();
            break;
        case 9:
            TimeToDigit(time.sec);
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit1);
     1ea:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     1ee:	8a 30       	cpi	r24, 0x0A	; 10
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <__vector_12+0x190>
     1f2:	6c cf       	rjmp	.-296    	; 0xcc <__vector_12+0x68>
     1f4:	d6 cf       	rjmp	.-84     	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     1f6:	8b b1       	in	r24, 0x0b	; 11
     1f8:	8f 71       	andi	r24, 0x1F	; 31
     1fa:	80 64       	ori	r24, 0x40	; 64
     1fc:	8b b9       	out	0x0b, r24	; 11
        case 2:
            Display_DeadTime();
            break;
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit2);
     1fe:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     202:	8a 30       	cpi	r24, 0x0A	; 10
     204:	08 f0       	brcs	.+2      	; 0x208 <__DATA_REGION_LENGTH__+0x8>
     206:	62 cf       	rjmp	.-316    	; 0xcc <__vector_12+0x68>
     208:	cc cf       	rjmp	.-104    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     20a:	8b b1       	in	r24, 0x0b	; 11
     20c:	8f 71       	andi	r24, 0x1F	; 31
     20e:	80 6c       	ori	r24, 0xC0	; 192
     210:	8b b9       	out	0x0b, r24	; 11
        case 10:
            Display_DeadTime();
            break;
        case 11:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit2);
     212:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     216:	8a 30       	cpi	r24, 0x0A	; 10
     218:	08 f0       	brcs	.+2      	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
     21a:	58 cf       	rjmp	.-336    	; 0xcc <__vector_12+0x68>
     21c:	c2 cf       	rjmp	.-124    	; 0x1a2 <__vector_12+0x13e>
    if (indication.dispMode == DISPLAY_TIME)
    {
        switch (indication.counter)
        {
        case 1:
            TimeToDigit(time.hour);
     21e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <time+0x2>
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
}

void TimeToDigit(uint8_t number)
{
    indication.digit1 = number / 10;
     222:	6a e0       	ldi	r22, 0x0A	; 10
     224:	20 d6       	rcall	.+3136   	; 0xe66 <__udivmodqi4>
     226:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <indication>
    indication.digit2 = number % 10;
     22a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <indication+0x1>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     22e:	8b b1       	in	r24, 0x0b	; 11
     230:	8f 71       	andi	r24, 0x1F	; 31
     232:	80 62       	ori	r24, 0x20	; 32
     234:	8b b9       	out	0x0b, r24	; 11
        switch (indication.counter)
        {
        case 1:
            TimeToDigit(time.hour);
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(indication.digit1);
     236:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <indication>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     23a:	8a 30       	cpi	r24, 0x0A	; 10
     23c:	08 f0       	brcs	.+2      	; 0x240 <__DATA_REGION_LENGTH__+0x40>
     23e:	46 cf       	rjmp	.-372    	; 0xcc <__vector_12+0x68>
     240:	b0 cf       	rjmp	.-160    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     242:	8b b1       	in	r24, 0x0b	; 11
     244:	8f 71       	andi	r24, 0x1F	; 31
     246:	80 68       	ori	r24, 0x80	; 128
     248:	8b b9       	out	0x0b, r24	; 11
            break;
        case 3:
            break;
        case 4:
            AnodeSwitch(4u);
            CathodeSwitch(indication.digit2);
     24a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <indication+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     24e:	8a 30       	cpi	r24, 0x0A	; 10
     250:	08 f4       	brcc	.+2      	; 0x254 <__DATA_REGION_LENGTH__+0x54>
     252:	76 c0       	rjmp	.+236    	; 0x340 <__stack+0x41>
        case 3:
            break;
        case 4:
            AnodeSwitch(4u);
            CathodeSwitch(indication.digit2);
            SET_BIT(PORTA, 1 << 3); // RDP turn on
     254:	73 9a       	sbi	0x0e, 3	; 14
            break;
     256:	3a cf       	rjmp	.-396    	; 0xcc <__vector_12+0x68>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     258:	8b b1       	in	r24, 0x0b	; 11
     25a:	8f 71       	andi	r24, 0x1F	; 31
     25c:	80 6c       	ori	r24, 0xC0	; 192
     25e:	8b b9       	out	0x0b, r24	; 11
            break;
        case 9:
            break;
        case 10:
            AnodeSwitch(6u);
            CathodeSwitch(indication.digit4);
     260:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <indication+0x3>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     264:	8a 30       	cpi	r24, 0x0A	; 10
     266:	08 f0       	brcs	.+2      	; 0x26a <__DATA_REGION_LENGTH__+0x6a>
     268:	31 cf       	rjmp	.-414    	; 0xcc <__vector_12+0x68>
     26a:	9b cf       	rjmp	.-202    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     26c:	8b b1       	in	r24, 0x0b	; 11
     26e:	8f 71       	andi	r24, 0x1F	; 31
     270:	80 6a       	ori	r24, 0xA0	; 160
     272:	8b b9       	out	0x0b, r24	; 11
            break;
        case 6:
            break;
        case 7:
            AnodeSwitch(5u);
            CathodeSwitch(indication.digit3);
     274:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <indication+0x2>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     278:	8a 30       	cpi	r24, 0x0A	; 10
     27a:	08 f4       	brcc	.+2      	; 0x27e <__DATA_REGION_LENGTH__+0x7e>
     27c:	5a c0       	rjmp	.+180    	; 0x332 <__stack+0x33>
        case 6:
            break;
        case 7:
            AnodeSwitch(5u);
            CathodeSwitch(indication.digit3);
            CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     27e:	73 98       	cbi	0x0e, 3	; 14
            break;
     280:	25 cf       	rjmp	.-438    	; 0xcc <__vector_12+0x68>
    if (indication.dispMode == DISPLAY_TEMPERATURE)
    {
        switch (indication.counter)
        {
        case 1:
            TemperatureToDigit(temperature.value);
     282:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <temperature>
     286:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <temperature+0x1>
    indication.digit2 = number % 10;
}

void TemperatureToDigit(uint16_t temperature)
{
    indication.digit1 = temperature / 10000;
     28a:	cf 01       	movw	r24, r30
     28c:	60 e1       	ldi	r22, 0x10	; 16
     28e:	77 e2       	ldi	r23, 0x27	; 39
     290:	f6 d5       	rcall	.+3052   	; 0xe7e <__udivmodhi4>
     292:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <indication>
    indication.digit2 = (temperature % 10000) / 1000;
     296:	c8 ee       	ldi	r28, 0xE8	; 232
     298:	d3 e0       	ldi	r29, 0x03	; 3
     29a:	be 01       	movw	r22, r28
     29c:	f0 d5       	rcall	.+3040   	; 0xe7e <__udivmodhi4>
     29e:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <indication+0x1>
    indication.digit3 = (temperature % 1000) / 100;
     2a2:	cf 01       	movw	r24, r30
     2a4:	be 01       	movw	r22, r28
     2a6:	eb d5       	rcall	.+3030   	; 0xe7e <__udivmodhi4>
     2a8:	c4 e6       	ldi	r28, 0x64	; 100
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
     2ac:	be 01       	movw	r22, r28
     2ae:	e7 d5       	rcall	.+3022   	; 0xe7e <__udivmodhi4>
     2b0:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <indication+0x2>
    indication.digit4 = (temperature % 100) / 10;
     2b4:	cf 01       	movw	r24, r30
     2b6:	be 01       	movw	r22, r28
     2b8:	e2 d5       	rcall	.+3012   	; 0xe7e <__udivmodhi4>
     2ba:	6a e0       	ldi	r22, 0x0A	; 10
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	df d5       	rcall	.+3006   	; 0xe7e <__udivmodhi4>
     2c0:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <indication+0x3>
     2c4:	7c cf       	rjmp	.-264    	; 0x1be <__vector_12+0x15a>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2c6:	8f 71       	andi	r24, 0x1F	; 31
     2c8:	80 68       	ori	r24, 0x80	; 128
     2ca:	8b b9       	out	0x0b, r24	; 11
        case 6:
            Display_DeadTime();
            break;
        case 7:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(cad.digit4);
     2cc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cad+0x3>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2d0:	8a 30       	cpi	r24, 0x0A	; 10
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <__DATA_REGION_LENGTH__+0xd6>
     2d4:	fb ce       	rjmp	.-522    	; 0xcc <__vector_12+0x68>
     2d6:	65 cf       	rjmp	.-310    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2d8:	8f 71       	andi	r24, 0x1F	; 31
     2da:	80 66       	ori	r24, 0x60	; 96
     2dc:	8b b9       	out	0x0b, r24	; 11
        case 4:
            Display_DeadTime();
            break;
        case 5:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(cad.digit3);
     2de:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cad+0x2>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2e2:	8a 30       	cpi	r24, 0x0A	; 10
     2e4:	08 f0       	brcs	.+2      	; 0x2e8 <__DATA_REGION_LENGTH__+0xe8>
     2e6:	f2 ce       	rjmp	.-540    	; 0xcc <__vector_12+0x68>
     2e8:	5c cf       	rjmp	.-328    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2ea:	8f 71       	andi	r24, 0x1F	; 31
     2ec:	80 6a       	ori	r24, 0xA0	; 160
     2ee:	8b b9       	out	0x0b, r24	; 11
        case 8:
            Display_DeadTime();
            break;
        case 9:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(cad.digit5);
     2f0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <cad+0x4>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     2f4:	8a 30       	cpi	r24, 0x0A	; 10
     2f6:	08 f0       	brcs	.+2      	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
     2f8:	e9 ce       	rjmp	.-558    	; 0xcc <__vector_12+0x68>
     2fa:	53 cf       	rjmp	.-346    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     2fc:	8f 71       	andi	r24, 0x1F	; 31
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	8b b9       	out	0x0b, r24	; 11
        case 2:
            Display_DeadTime();
            break;
        case 3:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(cad.digit2);
     302:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cad+0x1>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     306:	8a 30       	cpi	r24, 0x0A	; 10
     308:	08 f0       	brcs	.+2      	; 0x30c <__stack+0xd>
     30a:	e0 ce       	rjmp	.-576    	; 0xcc <__vector_12+0x68>
     30c:	4a cf       	rjmp	.-364    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     30e:	8f 71       	andi	r24, 0x1F	; 31
     310:	80 6c       	ori	r24, 0xC0	; 192
     312:	8b b9       	out	0x0b, r24	; 11
        case 10:
            Display_DeadTime();
            break;
        case 11:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(cad.digit6);
     314:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cad+0x5>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     318:	8a 30       	cpi	r24, 0x0A	; 10
     31a:	08 f0       	brcs	.+2      	; 0x31e <__stack+0x1f>
     31c:	d7 ce       	rjmp	.-594    	; 0xcc <__vector_12+0x68>
     31e:	41 cf       	rjmp	.-382    	; 0x1a2 <__vector_12+0x13e>
}

void AnodeSwitch(uint8_t anode)
{
    if ((anode >= 1) && (anode <= 6))
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
     320:	8f 71       	andi	r24, 0x1F	; 31
     322:	80 62       	ori	r24, 0x20	; 32
     324:	8b b9       	out	0x0b, r24	; 11
    {
        switch (indication.counter)
        {
        case 1:
            AnodeSwitch((indication.counter + 1) / 2);
            CathodeSwitch(cad.digit1);
     326:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cad>
    CLEAR_REG(PORTD);
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
     32a:	8a 30       	cpi	r24, 0x0A	; 10
     32c:	08 f0       	brcs	.+2      	; 0x330 <__stack+0x31>
     32e:	ce ce       	rjmp	.-612    	; 0xcc <__vector_12+0x68>
     330:	38 cf       	rjmp	.-400    	; 0x1a2 <__vector_12+0x13e>
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
     332:	9b b1       	in	r25, 0x0b	; 11
     334:	91 7e       	andi	r25, 0xE1	; 225
     336:	88 0f       	add	r24, r24
     338:	89 2b       	or	r24, r25
     33a:	8b b9       	out	0x0b, r24	; 11
        case 6:
            break;
        case 7:
            AnodeSwitch(5u);
            CathodeSwitch(indication.digit3);
            CLEAR_BIT(PORTA, 1 << 3); // RDP turn off
     33c:	73 98       	cbi	0x0e, 3	; 14
     33e:	c6 ce       	rjmp	.-628    	; 0xcc <__vector_12+0x68>
}

void CathodeSwitch(unsigned char cathode)
{
    if ((cathode >= 0) && (cathode <= 9))
        MODIFY_REG(PORTD, CATHODE_MASK, cathode << CATHODE_OFFSET);
     340:	9b b1       	in	r25, 0x0b	; 11
     342:	91 7e       	andi	r25, 0xE1	; 225
     344:	88 0f       	add	r24, r24
     346:	89 2b       	or	r24, r25
     348:	8b b9       	out	0x0b, r24	; 11
        case 3:
            break;
        case 4:
            AnodeSwitch(4u);
            CathodeSwitch(indication.digit2);
            SET_BIT(PORTA, 1 << 3); // RDP turn on
     34a:	73 9a       	sbi	0x0e, 3	; 14
     34c:	bf ce       	rjmp	.-642    	; 0xcc <__vector_12+0x68>

0000034e <__vector_16>:
    ++cad.counter;
    voltage.pid.run = true;
}

ISR(ADC_vect)
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	2f 93       	push	r18
     35a:	3f 93       	push	r19
     35c:	4f 93       	push	r20
     35e:	5f 93       	push	r21
     360:	6f 93       	push	r22
     362:	7f 93       	push	r23
     364:	8f 93       	push	r24
     366:	9f 93       	push	r25
     368:	af 93       	push	r26
     36a:	bf 93       	push	r27
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
    if (voltage.adc.counter < ADC_SAMPLES) // Get ADC_sum by x samples
     370:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <voltage+0x10>
     374:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <voltage+0xc>
     378:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <voltage+0xd>
     37c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <voltage+0xe>
     380:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <voltage+0xf>
     384:	e4 31       	cpi	r30, 0x14	; 20
     386:	d0 f5       	brcc	.+116    	; 0x3fc <__vector_16+0xae>
    {
        voltage.adc.sum += ADC;
     388:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
     38c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
     390:	ab 01       	movw	r20, r22
     392:	bc 01       	movw	r22, r24
     394:	42 0f       	add	r20, r18
     396:	53 1f       	adc	r21, r19
     398:	61 1d       	adc	r22, r1
     39a:	71 1d       	adc	r23, r1
     39c:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <voltage+0xc>
     3a0:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <voltage+0xd>
     3a4:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <voltage+0xe>
     3a8:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <voltage+0xf>
        ++voltage.adc.counter;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	8e 0f       	add	r24, r30
     3b0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <voltage+0x10>
     3b4:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <voltage+0x4>
     3b8:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <voltage+0x5>
     3bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <voltage+0x6>
     3c0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <voltage+0x7>
        voltage.adc.value = (voltage.adc.mean * VREF) / 0x3FF;
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
        voltage.adc.sum = 0;
        voltage.adc.counter = 0;
    }
    if (voltage.adc.valueScaled > 200.0)
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	48 e4       	ldi	r20, 0x48	; 72
     3ca:	53 e4       	ldi	r21, 0x43	; 67
     3cc:	d5 d6       	rcall	.+3498   	; 0x1178 <__gesf2>
     3ce:	18 16       	cp	r1, r24
     3d0:	24 f4       	brge	.+8      	; 0x3da <__vector_16+0x8c>
        OCR1B = 0; // Output voltage limitation
     3d2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     3d6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
}
     3da:	ff 91       	pop	r31
     3dc:	ef 91       	pop	r30
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti
        voltage.adc.sum += ADC;
        ++voltage.adc.counter;
    }
    else
    {
        voltage.adc.mean = voltage.adc.sum / ADC_SAMPLES;
     3fc:	24 e1       	ldi	r18, 0x14	; 20
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	50 d5       	rcall	.+2720   	; 0xea6 <__udivmodsi4>
     406:	ca 01       	movw	r24, r20
     408:	b9 01       	movw	r22, r18
     40a:	04 d6       	rcall	.+3080   	; 0x1014 <__floatunsisf>
     40c:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <voltage+0x8>
     410:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <voltage+0x9>
     414:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <voltage+0xa>
     418:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <voltage+0xb>
        voltage.adc.value = (voltage.adc.mean * VREF) / 0x3FF;
     41c:	29 e0       	ldi	r18, 0x09	; 9
     41e:	30 ef       	ldi	r19, 0xF0	; 240
     420:	4c e8       	ldi	r20, 0x8C	; 140
     422:	5a e3       	ldi	r21, 0x3A	; 58
     424:	ad d6       	rcall	.+3418   	; 0x1180 <__mulsf3>
     426:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <voltage>
     42a:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <voltage+0x1>
     42e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <voltage+0x2>
     432:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <voltage+0x3>
        voltage.adc.valueScaled = voltage.adc.value * ((R1_VAL + R2_VAL) / R2_VAL);
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	43 e5       	ldi	r20, 0x53	; 83
     43c:	53 e4       	ldi	r21, 0x43	; 67
     43e:	a0 d6       	rcall	.+3392   	; 0x1180 <__mulsf3>
     440:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <voltage+0x4>
     444:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <voltage+0x5>
     448:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <voltage+0x6>
     44c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <voltage+0x7>
        voltage.adc.sum = 0;
     450:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <voltage+0xc>
     454:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <voltage+0xd>
     458:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <voltage+0xe>
     45c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <voltage+0xf>
        voltage.adc.counter = 0;
     460:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <voltage+0x10>
     464:	af cf       	rjmp	.-162    	; 0x3c4 <__vector_16+0x76>

00000466 <main>:
        OCR1B = 0; // Output voltage limitation
}

int main(void)
{
    voltage.pid.pidData.Kp = K_P;
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	97 ed       	ldi	r25, 0xD7	; 215
     46a:	a3 e2       	ldi	r26, 0x23	; 35
     46c:	bc e3       	ldi	r27, 0x3C	; 60
     46e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <voltage+0x29>
     472:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <voltage+0x2a>
     476:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <voltage+0x2b>
     47a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <voltage+0x2c>
    voltage.pid.pidData.Ki = K_I;
     47e:	87 e1       	ldi	r24, 0x17	; 23
     480:	97 eb       	ldi	r25, 0xB7	; 183
     482:	a1 e5       	ldi	r26, 0x51	; 81
     484:	b8 e3       	ldi	r27, 0x38	; 56
     486:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <voltage+0x2d>
     48a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <voltage+0x2e>
     48e:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <voltage+0x2f>
     492:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <voltage+0x30>
    voltage.pid.pidData.Kd = K_D;
     496:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <voltage+0x31>
     49a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <voltage+0x32>
     49e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <voltage+0x33>
     4a2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <voltage+0x34>
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	8e e1       	ldi	r24, 0x1E	; 30
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	49 d4       	rcall	.+2194   	; 0xd46 <arm_pid_init_f32>
    IO_Init();
     4b4:	ca dd       	rcall	.-1132   	; 0x4a <IO_Init>
#include "main.h"

void TIM0_Init(void) // F = 1445Hz; T = 692us
{
    SET_BIT(TCCR0A, (1 << CS00) | (1 << CS01)); // clk/64
     4b6:	85 b5       	in	r24, 0x25	; 37
     4b8:	83 60       	ori	r24, 0x03	; 3
     4ba:	85 bd       	out	0x25, r24	; 37
    SET_BIT(TCCR0A, 1 << CTC0); // CTC EN
     4bc:	85 b5       	in	r24, 0x25	; 37
     4be:	88 60       	ori	r24, 0x08	; 8
     4c0:	85 bd       	out	0x25, r24	; 37
    SET_BIT(TIMSK0, 1 << OCIE0A); // Output Compare Match A Interrupt Enable
     4c2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
     4c6:	82 60       	ori	r24, 0x02	; 2
     4c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fe06e>
    OCR0A = 173 - 1;
     4cc:	8c ea       	ldi	r24, 0xAC	; 172
     4ce:	87 bd       	out	0x27, r24	; 39
}

void TIM1_Init(void) // F = 31.25kHz; T = 32us
{
    SET_BIT(TCCR1A, 1 << WGM11); // Fast PWM, 9-bit
     4d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
    SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     4da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     4de:	80 62       	ori	r24, 0x20	; 32
     4e0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
    SET_BIT(TCCR1B, 1 << CS10); // clk/1
     4e4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     4e8:	81 60       	ori	r24, 0x01	; 1
     4ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
    SET_BIT(TCCR1B, 1 << WGM12); // Fast PWM, 9-bit
     4ee:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
     4f2:	88 60       	ori	r24, 0x08	; 8
     4f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
    voltage.pid.pidData.Kd = K_D;
    arm_pid_init_f32(&voltage.pid.pidData, 1u);
    IO_Init();
    TIM0_Init();
    TIM1_Init();
    ADC_Init();
     4f8:	bb d3       	rcall	.+1910   	; 0xc70 <ADC_Init>
    I2C_Init();
     4fa:	87 d4       	rcall	.+2318   	; 0xe0a <I2C_Init>
    sei();
     4fc:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	83 ed       	ldi	r24, 0xD3	; 211
     502:	90 e3       	ldi	r25, 0x30	; 48
     504:	21 50       	subi	r18, 0x01	; 1
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	90 40       	sbci	r25, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x9e>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0xa8>
     50e:	00 00       	nop
    _delay_ms(1000);

    /* Read reference temperature */
    I2C_StartCondition();
     510:	80 d4       	rcall	.+2304   	; 0xe12 <I2C_StartCondition>
    I2C_SendByte(0b10010000); // Device address + write bit
     512:	80 e9       	ldi	r24, 0x90	; 144
     514:	8a d4       	rcall	.+2324   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(0x00); // Pointer
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	88 d4       	rcall	.+2320   	; 0xe2a <I2C_SendByte>
    I2C_StartCondition(); // Restart
     51a:	7b d4       	rcall	.+2294   	; 0xe12 <I2C_StartCondition>
    I2C_SendByte(0b10010001); // Device address + read bit
     51c:	81 e9       	ldi	r24, 0x91	; 145
     51e:	85 d4       	rcall	.+2314   	; 0xe2a <I2C_SendByte>
    temperature.msb = I2C_ReadByte();
     520:	8e d4       	rcall	.+2332   	; 0xe3e <I2C_ReadByte>
     522:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
    temperature.lsb = I2C_ReadLastByte();
     526:	95 d4       	rcall	.+2346   	; 0xe52 <I2C_ReadLastByte>
     528:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
    I2C_StopCondition();
     52c:	7a d4       	rcall	.+2292   	; 0xe22 <I2C_StopCondition>
    temperature.valueRef = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     52e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     532:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     536:	76 27       	eor	r23, r22
     538:	67 27       	eor	r22, r23
     53a:	76 27       	eor	r23, r22
     53c:	76 95       	lsr	r23
     53e:	67 95       	ror	r22
     540:	72 95       	swap	r23
     542:	62 95       	swap	r22
     544:	6f 70       	andi	r22, 0x0F	; 15
     546:	67 27       	eor	r22, r23
     548:	7f 70       	andi	r23, 0x0F	; 15
     54a:	67 27       	eor	r22, r23
     54c:	07 2e       	mov	r0, r23
     54e:	00 0c       	add	r0, r0
     550:	88 0b       	sbc	r24, r24
     552:	99 0b       	sbc	r25, r25
     554:	61 d5       	rcall	.+2754   	; 0x1018 <__floatsisf>
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	4a ef       	ldi	r20, 0xFA	; 250
     55c:	52 e4       	ldi	r21, 0x42	; 66
     55e:	10 d6       	rcall	.+3104   	; 0x1180 <__mulsf3>
     560:	2d d5       	rcall	.+2650   	; 0xfbc <__fixunssfsi>
     562:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <temperature+0x3>
     566:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <temperature+0x2>

#ifdef FIRST_START
    /* CLKOUT turnoff */
    I2C_StartCondition();
     56a:	53 d4       	rcall	.+2214   	; 0xe12 <I2C_StartCondition>
    I2C_SendByte(0xA2); // Device address + write bit
     56c:	82 ea       	ldi	r24, 0xA2	; 162
     56e:	5d d4       	rcall	.+2234   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(0x0D); // Pointer
     570:	8d e0       	ldi	r24, 0x0D	; 13
     572:	5b d4       	rcall	.+2230   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(0b00000011); // CLKOUT output is set high-impedance
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	59 d4       	rcall	.+2226   	; 0xe2a <I2C_SendByte>
    I2C_StopCondition();
     578:	54 d4       	rcall	.+2216   	; 0xe22 <I2C_StopCondition>

    /* Write time */
    I2C_StartCondition();
     57a:	4b d4       	rcall	.+2198   	; 0xe12 <I2C_StartCondition>
    I2C_SendByte(0xA2); // Device address + write bit
     57c:	82 ea       	ldi	r24, 0xA2	; 162
     57e:	55 d4       	rcall	.+2218   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(0x02); // Pointer
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	53 d4       	rcall	.+2214   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(RTC_DECtoBCD(00)); // Sec
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	3b d4       	rcall	.+2166   	; 0xdfe <RTC_DECtoBCD>
     588:	50 d4       	rcall	.+2208   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(RTC_DECtoBCD(53)); // Min
     58a:	85 e3       	ldi	r24, 0x35	; 53
     58c:	38 d4       	rcall	.+2160   	; 0xdfe <RTC_DECtoBCD>
     58e:	4d d4       	rcall	.+2202   	; 0xe2a <I2C_SendByte>
    I2C_SendByte(RTC_DECtoBCD(11)); // Hour
     590:	8b e0       	ldi	r24, 0x0B	; 11
     592:	35 d4       	rcall	.+2154   	; 0xdfe <RTC_DECtoBCD>
     594:	4a d4       	rcall	.+2196   	; 0xe2a <I2C_SendByte>
    I2C_StopCondition();
     596:	45 d4       	rcall	.+2186   	; 0xe22 <I2C_StopCondition>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
            {
                OCR1B = 0;
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
                CLEAR_BIT(PORTD, 1 << 0);
                indication.pwmOutputStatus = CONNECTED;
     598:	d1 e0       	ldi	r29, 0x01	; 1
     59a:	39 e6       	ldi	r19, 0x69	; 105
     59c:	43 2e       	mov	r4, r19
     59e:	55 24       	eor	r5, r5
     5a0:	53 94       	inc	r5
     5a2:	61 2c       	mov	r6, r1
     5a4:	71 2c       	mov	r7, r1
     5a6:	4a e0       	ldi	r20, 0x0A	; 10
     5a8:	84 2e       	mov	r8, r20
     5aa:	91 2c       	mov	r9, r1
     5ac:	a1 2c       	mov	r10, r1
     5ae:	b1 2c       	mov	r11, r1
     5b0:	c1 e0       	ldi	r28, 0x01	; 1
            {
                switch (cad.updateStage)
                {
                case 1:
                    cad.digit1 = (cad.counter / (1445 * 2 / 10)) % 10;
                    if ((time.hour / 10) == cad.digit1)
     5b2:	1a e0       	ldi	r17, 0x0A	; 10
                    break;

                case 5:
                    cad.digit5 = (cad.counter / (1445 * 2 / 10)) % 10;
                    if ((time.sec / 10) == cad.digit5)
                        ++cad.updateStage, cad.counter = 0;
     5b4:	56 e0       	ldi	r21, 0x06	; 6
     5b6:	35 2e       	mov	r3, r21
    indication.digit4 = (temperature % 100) / 10;
}

void SoftStart(void)
{
    if ((!indication.pause) && (!indication.isTurnedOff) && (voltage.pid.setPoint <= VOUT_TASK))
     5b8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <indication+0x6>
     5bc:	81 11       	cpse	r24, r1
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <main+0x164>
     5c0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <indication+0x7>
     5c4:	88 23       	and	r24, r24
     5c6:	09 f4       	brne	.+2      	; 0x5ca <main+0x164>
     5c8:	29 c1       	rjmp	.+594    	; 0x81c <main+0x3b6>
    {
        SoftStart();
        // voltage.pid.setPoint = VOUT_TASK; // Manual control

        /* Get time */
        I2C_StartCondition();
     5ca:	23 d4       	rcall	.+2118   	; 0xe12 <I2C_StartCondition>
        I2C_SendByte(0xA2); // Device address + write bit
     5cc:	82 ea       	ldi	r24, 0xA2	; 162
     5ce:	2d d4       	rcall	.+2138   	; 0xe2a <I2C_SendByte>
        I2C_SendByte(0x02); // Pointer
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	2b d4       	rcall	.+2134   	; 0xe2a <I2C_SendByte>
        I2C_StartCondition(); // Restart
     5d4:	1e d4       	rcall	.+2108   	; 0xe12 <I2C_StartCondition>
        I2C_SendByte(0xA3); // Device address + read bit
     5d6:	83 ea       	ldi	r24, 0xA3	; 163
     5d8:	28 d4       	rcall	.+2128   	; 0xe2a <I2C_SendByte>
        time.sec = RTC_BCDtoDEC((I2C_ReadByte()) & 0b01111111);
     5da:	31 d4       	rcall	.+2146   	; 0xe3e <I2C_ReadByte>
     5dc:	8f 77       	andi	r24, 0x7F	; 127
     5de:	04 d4       	rcall	.+2056   	; 0xde8 <RTC_BCDtoDEC>
     5e0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <time>
        time.min = RTC_BCDtoDEC((I2C_ReadByte()) & 0b01111111);
     5e4:	2c d4       	rcall	.+2136   	; 0xe3e <I2C_ReadByte>
     5e6:	8f 77       	andi	r24, 0x7F	; 127
     5e8:	ff d3       	rcall	.+2046   	; 0xde8 <RTC_BCDtoDEC>
     5ea:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <time+0x1>
        time.hour = RTC_BCDtoDEC((I2C_ReadLastByte()) & 0b00111111);
     5ee:	31 d4       	rcall	.+2146   	; 0xe52 <I2C_ReadLastByte>
     5f0:	8f 73       	andi	r24, 0x3F	; 63
     5f2:	fa d3       	rcall	.+2036   	; 0xde8 <RTC_BCDtoDEC>
     5f4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <time+0x2>
        I2C_StopCondition();
     5f8:	14 d4       	rcall	.+2088   	; 0xe22 <I2C_StopCondition>
        //     I2C_StopCondition();
        // }

        /* TimeRes */
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
     5fa:	60 99       	sbic	0x0c, 0	; 12
     5fc:	b4 c0       	rjmp	.+360    	; 0x766 <main+0x300>
        {
            if (++buttonCounter == 0xFF)
     5fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	09 f4       	brne	.+2      	; 0x60a <main+0x1a4>
     608:	82 c1       	rjmp	.+772    	; 0x90e <main+0x4a8>
     60a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        }
        else
            buttonCounter = 0;

        /* Daily turnoff */
        if (time.hour < 6)
     60e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <time+0x2>
     612:	86 30       	cpi	r24, 0x06	; 6
     614:	08 f4       	brcc	.+2      	; 0x618 <main+0x1b2>
     616:	ae c0       	rjmp	.+348    	; 0x774 <main+0x30e>
                }
            }
        }
        else
        {
            indication.pause = false, indication.isTurnedOff = false;
     618:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <indication+0x6>
     61c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <indication+0x7>
            if (indication.pwmOutputStatus == DISCONNECTED) // PWM turn on
     620:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <indication+0x8>
     624:	81 11       	cpse	r24, r1
     626:	10 c0       	rjmp	.+32     	; 0x648 <main+0x1e2>
            {
                OCR1B = 0;
     628:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     62c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                SET_BIT(TCCR1A, 1 << COM1B1); // Clear OC1A/OC1B on compare match
     630:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     634:	80 62       	ori	r24, 0x20	; 32
     636:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                CLEAR_BIT(PORTD, 1 << 0);
     63a:	58 98       	cbi	0x0b, 0	; 11
                indication.pwmOutputStatus = CONNECTED;
     63c:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <indication+0x8>
            }
        }

        if (!indication.pause)
     640:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <indication+0x6>
     644:	81 11       	cpse	r24, r1
     646:	c1 cf       	rjmp	.-126    	; 0x5ca <main+0x164>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
     648:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <voltage+0x3d>
     64c:	81 11       	cpse	r24, r1
     64e:	71 c1       	rjmp	.+738    	; 0x932 <main+0x4cc>
                OCR1B = voltage.pid.processValue * 0x1FF;
                voltage.pid.run = false;
            }

            /* Display temperature */
            if ((time.sec > 9) && (time.sec < 15))
     650:	00 91 57 01 	lds	r16, 0x0157	; 0x800157 <time>
     654:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <indication+0x5>
     658:	86 ef       	ldi	r24, 0xF6	; 246
     65a:	80 0f       	add	r24, r16
     65c:	85 30       	cpi	r24, 0x05	; 5
     65e:	08 f0       	brcs	.+2      	; 0x662 <main+0x1fc>
     660:	ff c0       	rjmp	.+510    	; 0x860 <main+0x3fa>
     662:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
            {
                if (indication.dispMode != DISPLAY_TEMPERATURE)
     666:	91 30       	cpi	r25, 0x01	; 1
     668:	09 f4       	brne	.+2      	; 0x66c <main+0x206>
     66a:	03 c1       	rjmp	.+518    	; 0x872 <main+0x40c>
                {
                    /* Read temperature */
                    if (temperature.isCompensated)
     66c:	81 11       	cpse	r24, r1
     66e:	06 c2       	rjmp	.+1036   	; 0xa7c <main+0x616>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensationFactor;
                    }
                    else
                        temperature.value = temperature.valueRef;
     670:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temperature+0x2>
     674:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temperature+0x3>
     678:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <temperature+0x1>
     67c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temperature>
                    indication.dispMode = DISPLAY_TEMPERATURE;
     680:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <indication+0x5>
     684:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <temperature+0xa>
     688:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <temperature+0x6>
     68c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <temperature+0x7>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
            {
                if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
     690:	00 ff       	sbrs	r16, 0
     692:	8e c1       	rjmp	.+796    	; 0x9b0 <main+0x54a>
     694:	22 23       	and	r18, r18
     696:	39 f0       	breq	.+14     	; 0x6a6 <main+0x240>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperature+0x7>
     69e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperature+0x6>
     6a2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <temperature+0xa>
                if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
                if (temperature.compensationCounter == 3600)
     6a6:	80 31       	cpi	r24, 0x10	; 16
     6a8:	9e 40       	sbci	r25, 0x0E	; 14
     6aa:	09 f4       	brne	.+2      	; 0x6ae <main+0x248>
     6ac:	8e c1       	rjmp	.+796    	; 0x9ca <main+0x564>
     6ae:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0x5>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
                }
            }

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     6b2:	9d ed       	ldi	r25, 0xDD	; 221
     6b4:	90 0f       	add	r25, r16
     6b6:	95 30       	cpi	r25, 0x05	; 5
     6b8:	08 f0       	brcs	.+2      	; 0x6bc <main+0x256>
     6ba:	e5 c0       	rjmp	.+458    	; 0x886 <main+0x420>
            {
                if (indication.dispMode != DISPLAY_CAD)
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	09 f4       	brne	.+2      	; 0x6c2 <main+0x25c>
     6c0:	c1 c1       	rjmp	.+898    	; 0xa44 <main+0x5de>
                    indication.dispMode = DISPLAY_CAD, cad.counter = 0;
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <indication+0x5>
     6c8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     6cc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     6d0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     6d4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     6d8:	60 e0       	ldi	r22, 0x00	; 0
                cad.digit1 = (cad.counter / (1445 * 5 / 20)) % 10;
     6da:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <cad>
                cad.digit2 = cad.digit1;
     6de:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <cad+0x1>
                cad.digit3 = cad.digit1;
     6e2:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <cad+0x2>
                cad.digit4 = cad.digit1;
     6e6:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <cad+0x3>
                cad.digit5 = cad.digit1;
     6ea:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <cad+0x4>
                cad.digit6 = cad.digit1;
     6ee:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <cad+0x5>
                cad.digit6 = 0;
                cad.counter = 0;
                cad.updateStage = 1;
                cad.update = true;
            }
            if (cad.update)
     6f2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cad+0xb>
     6f6:	88 23       	and	r24, r24
     6f8:	09 f4       	brne	.+2      	; 0x6fc <main+0x296>
     6fa:	5e cf       	rjmp	.-324    	; 0x5b8 <main+0x152>
     6fc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <cad+0xa>
            {
                switch (cad.updateStage)
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	09 f4       	brne	.+2      	; 0x706 <main+0x2a0>
     704:	61 c2       	rjmp	.+1218   	; 0xbc8 <main+0x762>
     706:	08 f4       	brcc	.+2      	; 0x70a <main+0x2a4>
     708:	86 c2       	rjmp	.+1292   	; 0xc16 <main+0x7b0>
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	09 f4       	brne	.+2      	; 0x710 <main+0x2aa>
     70e:	37 c2       	rjmp	.+1134   	; 0xb7e <main+0x718>
     710:	08 f4       	brcc	.+2      	; 0x714 <main+0x2ae>
     712:	0e c2       	rjmp	.+1052   	; 0xb30 <main+0x6ca>
     714:	86 30       	cpi	r24, 0x06	; 6
     716:	09 f0       	breq	.+2      	; 0x71a <main+0x2b4>
     718:	06 c2       	rjmp	.+1036   	; 0xb26 <main+0x6c0>
                    if ((time.sec / 10) == cad.digit5)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 6:
                    cad.digit6 = (cad.counter / (1445 * 2 / 10)) % 10;
     71a:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     71e:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     722:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     726:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     72a:	21 e2       	ldi	r18, 0x21	; 33
     72c:	31 e0       	ldi	r19, 0x01	; 1
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	b9 d3       	rcall	.+1906   	; 0xea6 <__udivmodsi4>
     734:	ca 01       	movw	r24, r20
     736:	b9 01       	movw	r22, r18
     738:	a5 01       	movw	r20, r10
     73a:	94 01       	movw	r18, r8
     73c:	b4 d3       	rcall	.+1896   	; 0xea6 <__udivmodsi4>
     73e:	26 2f       	mov	r18, r22
     740:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <cad+0x5>
                    if ((time.sec % 10) == cad.digit6)
     744:	80 2f       	mov	r24, r16
     746:	61 2f       	mov	r22, r17
     748:	8e d3       	rcall	.+1820   	; 0xe66 <__udivmodqi4>
     74a:	92 13       	cpse	r25, r18
     74c:	35 cf       	rjmp	.-406    	; 0x5b8 <main+0x152>
                        ++cad.updateStage, cad.counter = 0;
     74e:	87 e0       	ldi	r24, 0x07	; 7
     750:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <cad+0xa>
     754:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     758:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     75c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     760:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     764:	29 cf       	rjmp	.-430    	; 0x5b8 <main+0x152>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
                I2C_StopCondition();
            }
        }
        else
            buttonCounter = 0;
     766:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

        /* Daily turnoff */
        if (time.hour < 6)
     76a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <time+0x2>
     76e:	86 30       	cpi	r24, 0x06	; 6
     770:	08 f0       	brcs	.+2      	; 0x774 <main+0x30e>
     772:	52 cf       	rjmp	.-348    	; 0x618 <main+0x1b2>
        {
            indication.isTurnedOff = true;
     774:	c0 93 61 01 	sts	0x0161, r28	; 0x800161 <indication+0x7>
        voltage.pid.setPoint += 0.01;
}

void SoftTurnoff(void)
{
    if ((indication.isTurnedOff) && (voltage.pid.setPoint > 0.0))
     778:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage+0x35>
     77c:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x36>
     780:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x37>
     784:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x38>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	a9 01       	movw	r20, r18
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	f2 d4       	rcall	.+2532   	; 0x1178 <__gesf2>
     794:	18 16       	cp	r1, r24
     796:	8c f4       	brge	.+34     	; 0x7ba <main+0x354>
        voltage.pid.setPoint -= 0.005;
     798:	2a e0       	ldi	r18, 0x0A	; 10
     79a:	37 ed       	ldi	r19, 0xD7	; 215
     79c:	43 ea       	ldi	r20, 0xA3	; 163
     79e:	5b e3       	ldi	r21, 0x3B	; 59
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	a2 d3       	rcall	.+1860   	; 0xeea <__subsf3>
     7a6:	6b 01       	movw	r12, r22
     7a8:	7c 01       	movw	r14, r24
     7aa:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <voltage+0x35>
     7ae:	d0 92 43 01 	sts	0x0143, r13	; 0x800143 <voltage+0x36>
     7b2:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <voltage+0x37>
     7b6:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <voltage+0x38>
        /* Daily turnoff */
        if (time.hour < 6)
        {
            indication.isTurnedOff = true;
            SoftTurnoff();
            if (voltage.pid.setPoint < 100.0)
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	48 ec       	ldi	r20, 0xC8	; 200
     7c0:	52 e4       	ldi	r21, 0x42	; 66
     7c2:	c7 01       	movw	r24, r14
     7c4:	b6 01       	movw	r22, r12
     7c6:	f6 d3       	rcall	.+2028   	; 0xfb4 <__cmpsf2>
     7c8:	87 ff       	sbrs	r24, 7
     7ca:	3a cf       	rjmp	.-396    	; 0x640 <main+0x1da>
            {
                indication.pause = true, Display_DeadTime();
     7cc:	c0 93 60 01 	sts	0x0160, r28	; 0x800160 <indication+0x6>
        MODIFY_REG(PORTD, ANODE_MASK, anode << ANODE_OFFSET);
}

void Display_DeadTime(void)
{
    MODIFY_REG(PORTD, CATHODE_MASK | ANODE_MASK, 12u << CATHODE_OFFSET);
     7d0:	8b b1       	in	r24, 0x0b	; 11
     7d2:	81 70       	andi	r24, 0x01	; 1
     7d4:	88 61       	ori	r24, 0x18	; 24
     7d6:	8b b9       	out	0x0b, r24	; 11
            indication.isTurnedOff = true;
            SoftTurnoff();
            if (voltage.pid.setPoint < 100.0)
            {
                indication.pause = true, Display_DeadTime();
                if (indication.pwmOutputStatus == CONNECTED) // PWM turnoff
     7d8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <indication+0x8>
     7dc:	88 23       	and	r24, r24
     7de:	59 f0       	breq	.+22     	; 0x7f6 <main+0x390>
                {
                    OCR1B = 0;
     7e0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     7e4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                    CLEAR_BIT(TCCR1A, 1 << COM1B1); // OC1A/OC1B disconnected
     7e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
     7ec:	8f 7d       	andi	r24, 0xDF	; 223
     7ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fe080>
                    indication.pwmOutputStatus = DISCONNECTED;
     7f2:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <indication+0x8>
                }
                if (time.sec % 2) // Turnoff status LED blink
     7f6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <time>
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	21 cf       	rjmp	.-446    	; 0x640 <main+0x1da>
                {
                    SET_BIT(PORTD, 1 << 0);
     7fe:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     800:	8f e8       	ldi	r24, 0x8F	; 143
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <main+0x39e>
     808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x3a4>
     80a:	00 00       	nop
                    _delay_us(100);
                    CLEAR_BIT(PORTD, 1 << 0);
     80c:	58 98       	cbi	0x0b, 0	; 11
     80e:	8f e1       	ldi	r24, 0x1F	; 31
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <main+0x3ac>
     816:	00 c0       	rjmp	.+0      	; 0x818 <main+0x3b2>
     818:	00 00       	nop
     81a:	12 cf       	rjmp	.-476    	; 0x640 <main+0x1da>
    indication.digit4 = (temperature % 100) / 10;
}

void SoftStart(void)
{
    if ((!indication.pause) && (!indication.isTurnedOff) && (voltage.pid.setPoint <= VOUT_TASK))
     81c:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <voltage+0x35>
     820:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <voltage+0x36>
     824:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <voltage+0x37>
     828:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <voltage+0x38>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	44 e3       	ldi	r20, 0x34	; 52
     832:	53 e4       	ldi	r21, 0x43	; 67
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	bd d3       	rcall	.+1914   	; 0xfb4 <__cmpsf2>
     83a:	18 16       	cp	r1, r24
     83c:	0c f4       	brge	.+2      	; 0x840 <main+0x3da>
     83e:	c5 ce       	rjmp	.-630    	; 0x5ca <main+0x164>
        voltage.pid.setPoint += 0.01;
     840:	2a e0       	ldi	r18, 0x0A	; 10
     842:	37 ed       	ldi	r19, 0xD7	; 215
     844:	43 e2       	ldi	r20, 0x23	; 35
     846:	5c e3       	ldi	r21, 0x3C	; 60
     848:	c7 01       	movw	r24, r14
     84a:	b6 01       	movw	r22, r12
     84c:	4f d3       	rcall	.+1694   	; 0xeec <__addsf3>
     84e:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <voltage+0x35>
     852:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <voltage+0x36>
     856:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <voltage+0x37>
     85a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <voltage+0x38>
     85e:	b5 ce       	rjmp	.-662    	; 0x5ca <main+0x164>
                    else
                        temperature.value = temperature.valueRef;
                    indication.dispMode = DISPLAY_TEMPERATURE;
                }
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
     860:	91 30       	cpi	r25, 0x01	; 1
     862:	29 f4       	brne	.+10     	; 0x86e <main+0x408>
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);
     864:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <indication+0x5>
     868:	73 98       	cbi	0x0e, 3	; 14
     86a:	00 91 57 01 	lds	r16, 0x0157	; 0x800157 <time>
     86e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>

            /* Temperature compensation */
            if (!temperature.isCompensated)
     872:	88 23       	and	r24, r24
     874:	09 f4       	brne	.+2      	; 0x878 <main+0x412>
     876:	06 cf       	rjmp	.-500    	; 0x684 <main+0x21e>
     878:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <indication+0x5>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
                }
            }

            /* Cathodes anti-degradation (CAD) */
            if ((time.sec > 34) && (time.sec < 40))
     87c:	9d ed       	ldi	r25, 0xDD	; 221
     87e:	90 0f       	add	r25, r16
     880:	95 30       	cpi	r25, 0x05	; 5
     882:	08 f4       	brcc	.+2      	; 0x886 <main+0x420>
     884:	1b cf       	rjmp	.-458    	; 0x6bc <main+0x256>
                cad.digit3 = cad.digit1;
                cad.digit4 = cad.digit1;
                cad.digit5 = cad.digit1;
                cad.digit6 = cad.digit1;
            }
            else if ((indication.dispMode == DISPLAY_CAD) && (!cad.update))
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	09 f0       	breq	.+2      	; 0x88c <main+0x426>
     88a:	33 cf       	rjmp	.-410    	; 0x6f2 <main+0x28c>
     88c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <cad+0xb>
     890:	81 11       	cpse	r24, r1
     892:	34 cf       	rjmp	.-408    	; 0x6fc <main+0x296>
            {
                cad.digit1 = 0;
                cad.digit2 = 0;
     894:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <cad+0x1>
                cad.digit3 = 0;
     898:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <cad+0x2>
                cad.digit4 = 0;
     89c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <cad+0x3>
                cad.digit5 = 0;
     8a0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <cad+0x4>
                cad.digit6 = 0;
     8a4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <cad+0x5>
                cad.counter = 0;
     8a8:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     8ac:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     8b0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     8b4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
                cad.updateStage = 1;
     8b8:	d0 93 55 01 	sts	0x0155, r29	; 0x800155 <cad+0xa>
                cad.update = true;
     8bc:	d0 93 56 01 	sts	0x0156, r29	; 0x800156 <cad+0xb>
            if (cad.update)
            {
                switch (cad.updateStage)
                {
                case 1:
                    cad.digit1 = (cad.counter / (1445 * 2 / 10)) % 10;
     8c0:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     8c4:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     8c8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     8cc:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     8d0:	21 e2       	ldi	r18, 0x21	; 33
     8d2:	31 e0       	ldi	r19, 0x01	; 1
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	e6 d2       	rcall	.+1484   	; 0xea6 <__udivmodsi4>
     8da:	ca 01       	movw	r24, r20
     8dc:	b9 01       	movw	r22, r18
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	e1 d2       	rcall	.+1474   	; 0xea6 <__udivmodsi4>
     8e4:	26 2f       	mov	r18, r22
     8e6:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <cad>
                    if ((time.hour / 10) == cad.digit1)
     8ea:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <time+0x2>
     8ee:	61 2f       	mov	r22, r17
     8f0:	ba d2       	rcall	.+1396   	; 0xe66 <__udivmodqi4>
     8f2:	82 13       	cpse	r24, r18
     8f4:	61 ce       	rjmp	.-830    	; 0x5b8 <main+0x152>
                        ++cad.updateStage, cad.counter = 0;
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <cad+0xa>
     8fc:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     900:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     904:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     908:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     90c:	55 ce       	rjmp	.-854    	; 0x5b8 <main+0x152>
        static uint8_t buttonCounter;
        if (!READ_BIT(PINA, 1 << PINA0))
        {
            if (++buttonCounter == 0xFF)
            {
                buttonCounter = 0;
     90e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
                I2C_StartCondition();
     912:	7f d2       	rcall	.+1278   	; 0xe12 <I2C_StartCondition>
                I2C_SendByte(0xA2); // Device address + write bit
     914:	82 ea       	ldi	r24, 0xA2	; 162
     916:	89 d2       	rcall	.+1298   	; 0xe2a <I2C_SendByte>
                I2C_SendByte(0x02); // Pointer
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	87 d2       	rcall	.+1294   	; 0xe2a <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Sec
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	6f d2       	rcall	.+1246   	; 0xdfe <RTC_DECtoBCD>
     920:	84 d2       	rcall	.+1288   	; 0xe2a <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(00)); // Min
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	6c d2       	rcall	.+1240   	; 0xdfe <RTC_DECtoBCD>
     926:	81 d2       	rcall	.+1282   	; 0xe2a <I2C_SendByte>
                I2C_SendByte(RTC_DECtoBCD(20)); // Hour
     928:	84 e1       	ldi	r24, 0x14	; 20
     92a:	69 d2       	rcall	.+1234   	; 0xdfe <RTC_DECtoBCD>
     92c:	7e d2       	rcall	.+1276   	; 0xe2a <I2C_SendByte>
                I2C_StopCondition();
     92e:	79 d2       	rcall	.+1266   	; 0xe22 <I2C_StopCondition>
     930:	6e ce       	rjmp	.-804    	; 0x60e <main+0x1a8>
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);
     932:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <voltage+0x4>
     936:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <voltage+0x5>
     93a:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <voltage+0x6>
     93e:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <voltage+0x7>
     942:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <voltage+0x35>
     946:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <voltage+0x36>
     94a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <voltage+0x37>
     94e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <voltage+0x38>
     952:	cb d2       	rcall	.+1430   	; 0xeea <__subsf3>
     954:	ab 01       	movw	r20, r22
     956:	bc 01       	movw	r22, r24
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	9a d1       	rcall	.+820    	; 0xc92 <arm_pid_f32>
     95e:	6b 01       	movw	r12, r22
     960:	7c 01       	movw	r14, r24

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	a9 01       	movw	r20, r18
     968:	25 d3       	rcall	.+1610   	; 0xfb4 <__cmpsf2>
     96a:	87 fd       	sbrc	r24, 7
     96c:	7c c0       	rjmp	.+248    	; 0xa66 <main+0x600>
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
     96e:	23 e3       	ldi	r18, 0x33	; 51
     970:	33 e3       	ldi	r19, 0x33	; 51
     972:	43 e3       	ldi	r20, 0x33	; 51
     974:	5f e3       	ldi	r21, 0x3F	; 63
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	fe d3       	rcall	.+2044   	; 0x1178 <__gesf2>
     97c:	18 16       	cp	r1, r24
     97e:	0c f4       	brge	.+2      	; 0x982 <main+0x51c>
     980:	c3 c0       	rjmp	.+390    	; 0xb08 <main+0x6a2>
        if (!indication.pause)
        {
            /* Run PID calculations once every PID timer timeout */
            if (voltage.pid.run)
            {
                voltage.pid.processValue =
     982:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <voltage+0x39>
     986:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <voltage+0x3a>
     98a:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <voltage+0x3b>
     98e:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <voltage+0x3c>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e8       	ldi	r19, 0x80	; 128
     996:	4f ef       	ldi	r20, 0xFF	; 255
     998:	53 e4       	ldi	r21, 0x43	; 67
     99a:	c7 01       	movw	r24, r14
     99c:	b6 01       	movw	r22, r12
     99e:	f0 d3       	rcall	.+2016   	; 0x1180 <__mulsf3>
     9a0:	0d d3       	rcall	.+1562   	; 0xfbc <__fixunssfsi>
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;

                OCR1B = voltage.pid.processValue * 0x1FF;
     9a2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     9a6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
                voltage.pid.run = false;
     9aa:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <voltage+0x3d>
     9ae:	50 ce       	rjmp	.-864    	; 0x650 <main+0x1ea>
            /* Temperature compensation */
            if (!temperature.isCompensated)
            {
                if ((time.sec % 2) && (temperature.isCompensationAllowed == true))
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = false;
                if (!(time.sec % 2) && (temperature.isCompensationAllowed == false))
     9b0:	21 11       	cpse	r18, r1
     9b2:	79 ce       	rjmp	.-782    	; 0x6a6 <main+0x240>
                    ++temperature.compensationCounter, temperature.isCompensationAllowed = true;
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperature+0x7>
     9ba:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperature+0x6>
     9be:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <temperature+0xa>
                if (temperature.compensationCounter == 3600)
     9c2:	80 31       	cpi	r24, 0x10	; 16
     9c4:	9e 40       	sbci	r25, 0x0E	; 14
     9c6:	09 f0       	breq	.+2      	; 0x9ca <main+0x564>
     9c8:	72 ce       	rjmp	.-796    	; 0x6ae <main+0x248>
                {
                    I2C_StartCondition();
     9ca:	23 d2       	rcall	.+1094   	; 0xe12 <I2C_StartCondition>
                    I2C_SendByte(0b10010000); // Device address + write bit
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	2d d2       	rcall	.+1114   	; 0xe2a <I2C_SendByte>
                    I2C_SendByte(0x00); // Pointer
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	2b d2       	rcall	.+1110   	; 0xe2a <I2C_SendByte>
                    I2C_StartCondition(); // Restart
     9d4:	1e d2       	rcall	.+1084   	; 0xe12 <I2C_StartCondition>
                    I2C_SendByte(0b10010001); // Device address + read bit
     9d6:	81 e9       	ldi	r24, 0x91	; 145
     9d8:	28 d2       	rcall	.+1104   	; 0xe2a <I2C_SendByte>
                    temperature.msb = I2C_ReadByte();
     9da:	31 d2       	rcall	.+1122   	; 0xe3e <I2C_ReadByte>
     9dc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                    temperature.lsb = I2C_ReadLastByte();
     9e0:	38 d2       	rcall	.+1136   	; 0xe52 <I2C_ReadLastByte>
     9e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                    I2C_StopCondition();
     9e6:	1d d2       	rcall	.+1082   	; 0xe22 <I2C_StopCondition>
                    temperature.value = 1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125);
     9e8:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     9ec:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     9f0:	76 27       	eor	r23, r22
     9f2:	67 27       	eor	r22, r23
     9f4:	76 27       	eor	r23, r22
     9f6:	76 95       	lsr	r23
     9f8:	67 95       	ror	r22
     9fa:	72 95       	swap	r23
     9fc:	62 95       	swap	r22
     9fe:	6f 70       	andi	r22, 0x0F	; 15
     a00:	67 27       	eor	r22, r23
     a02:	7f 70       	andi	r23, 0x0F	; 15
     a04:	67 27       	eor	r22, r23
     a06:	07 2e       	mov	r0, r23
     a08:	00 0c       	add	r0, r0
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	04 d3       	rcall	.+1544   	; 0x1018 <__floatsisf>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	4a ef       	ldi	r20, 0xFA	; 250
     a16:	52 e4       	ldi	r21, 0x42	; 66
     a18:	b3 d3       	rcall	.+1894   	; 0x1180 <__mulsf3>
     a1a:	d0 d2       	rcall	.+1440   	; 0xfbc <__fixunssfsi>
     a1c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     a20:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
                    temperature.compensationFactor = temperature.valueRef - temperature.value;
     a24:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temperature+0x2>
     a28:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temperature+0x3>
     a2c:	c9 01       	movw	r24, r18
     a2e:	86 1b       	sub	r24, r22
     a30:	97 0b       	sbc	r25, r23
     a32:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperature+0x5>
     a36:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperature+0x4>
                    temperature.isCompensated = true; // Temperature value ready after 3600 sec (60 min)
     a3a:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <temperature+0xb>
     a3e:	00 91 57 01 	lds	r16, 0x0157	; 0x800157 <time>
     a42:	35 ce       	rjmp	.-918    	; 0x6ae <main+0x248>
     a44:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     a48:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     a4c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     a50:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     a54:	a3 01       	movw	r20, r6
     a56:	92 01       	movw	r18, r4
     a58:	26 d2       	rcall	.+1100   	; 0xea6 <__udivmodsi4>
     a5a:	ca 01       	movw	r24, r20
     a5c:	b9 01       	movw	r22, r18
     a5e:	a5 01       	movw	r20, r10
     a60:	94 01       	movw	r18, r8
     a62:	21 d2       	rcall	.+1090   	; 0xea6 <__udivmodsi4>
     a64:	3a ce       	rjmp	.-908    	; 0x6da <main+0x274>
                voltage.pid.processValue =
                    arm_pid_f32(&voltage.pid.pidData, voltage.pid.setPoint - voltage.adc.valueScaled);

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
     a66:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <voltage+0x39>
     a6a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <voltage+0x3a>
     a6e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <voltage+0x3b>
     a72:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <voltage+0x3c>
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	93 cf       	rjmp	.-218    	; 0x9a2 <main+0x53c>
                if (indication.dispMode != DISPLAY_TEMPERATURE)
                {
                    /* Read temperature */
                    if (temperature.isCompensated)
                    {
                        I2C_StartCondition();
     a7c:	ca d1       	rcall	.+916    	; 0xe12 <I2C_StartCondition>
                        I2C_SendByte(0b10010000); // Device address + write bit
     a7e:	80 e9       	ldi	r24, 0x90	; 144
     a80:	d4 d1       	rcall	.+936    	; 0xe2a <I2C_SendByte>
                        I2C_SendByte(0x00); // Pointer
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	d2 d1       	rcall	.+932    	; 0xe2a <I2C_SendByte>
                        I2C_StartCondition(); // Restart
     a86:	c5 d1       	rcall	.+906    	; 0xe12 <I2C_StartCondition>
                        I2C_SendByte(0b10010001); // Device address + read bit
     a88:	81 e9       	ldi	r24, 0x91	; 145
     a8a:	cf d1       	rcall	.+926    	; 0xe2a <I2C_SendByte>
                        temperature.msb = I2C_ReadByte();
     a8c:	d8 d1       	rcall	.+944    	; 0xe3e <I2C_ReadByte>
     a8e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temperature+0x8>
                        temperature.lsb = I2C_ReadLastByte();
     a92:	df d1       	rcall	.+958    	; 0xe52 <I2C_ReadLastByte>
     a94:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x9>
                        I2C_StopCondition();
     a98:	c4 d1       	rcall	.+904    	; 0xe22 <I2C_StopCondition>
                        temperature.value =
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
     a9a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <temperature+0x8>
     a9e:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <temperature+0x9>
     aa2:	76 27       	eor	r23, r22
     aa4:	67 27       	eor	r22, r23
     aa6:	76 27       	eor	r23, r22
     aa8:	76 95       	lsr	r23
     aaa:	67 95       	ror	r22
     aac:	72 95       	swap	r23
     aae:	62 95       	swap	r22
     ab0:	6f 70       	andi	r22, 0x0F	; 15
     ab2:	67 27       	eor	r22, r23
     ab4:	7f 70       	andi	r23, 0x0F	; 15
     ab6:	67 27       	eor	r22, r23
     ab8:	07 2e       	mov	r0, r23
     aba:	00 0c       	add	r0, r0
     abc:	88 0b       	sbc	r24, r24
     abe:	99 0b       	sbc	r25, r25
     ac0:	ab d2       	rcall	.+1366   	; 0x1018 <__floatsisf>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	4a ef       	ldi	r20, 0xFA	; 250
     ac8:	52 e4       	ldi	r21, 0x42	; 66
     aca:	5a d3       	rcall	.+1716   	; 0x1180 <__mulsf3>
     acc:	6b 01       	movw	r12, r22
     ace:	7c 01       	movw	r14, r24
     ad0:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <temperature+0x4>
     ad4:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <temperature+0x5>
     ad8:	07 2e       	mov	r0, r23
     ada:	00 0c       	add	r0, r0
     adc:	88 0b       	sbc	r24, r24
     ade:	99 0b       	sbc	r25, r25
     ae0:	9b d2       	rcall	.+1334   	; 0x1018 <__floatsisf>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	c7 01       	movw	r24, r14
     ae8:	b6 01       	movw	r22, r12
     aea:	00 d2       	rcall	.+1024   	; 0xeec <__addsf3>
                        I2C_StartCondition(); // Restart
                        I2C_SendByte(0b10010001); // Device address + read bit
                        temperature.msb = I2C_ReadByte();
                        temperature.lsb = I2C_ReadLastByte();
                        I2C_StopCondition();
                        temperature.value =
     aec:	67 d2       	rcall	.+1230   	; 0xfbc <__fixunssfsi>
     aee:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <temperature+0x1>
     af2:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <temperature>
     af6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <temperature+0xb>
     afa:	00 91 57 01 	lds	r16, 0x0157	; 0x800157 <time>
                            (1000 * (((((temperature.msb << 8) | temperature.lsb) >> 5) & 0x7FF) * 0.125)) +
                            temperature.compensationFactor;
                    }
                    else
                        temperature.value = temperature.valueRef;
                    indication.dispMode = DISPLAY_TEMPERATURE;
     afe:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <indication+0x5>
            }
            else if (indication.dispMode == DISPLAY_TEMPERATURE)
                indication.dispMode = DISPLAY_TIME, CLEAR_BIT(PORTA, 1 << 3);

            /* Temperature compensation */
            if (!temperature.isCompensated)
     b02:	81 11       	cpse	r24, r1
     b04:	b9 ce       	rjmp	.-654    	; 0x878 <main+0x412>
     b06:	be cd       	rjmp	.-1156   	; 0x684 <main+0x21e>

                /* PID output limiter */
                if (voltage.pid.processValue < BOOST_DUTY_MIN)
                    voltage.pid.processValue = BOOST_DUTY_MIN;
                else if (voltage.pid.processValue > BOOST_DUTY_MAX)
                    voltage.pid.processValue = BOOST_DUTY_MAX;
     b08:	83 e3       	ldi	r24, 0x33	; 51
     b0a:	93 e3       	ldi	r25, 0x33	; 51
     b0c:	a3 e3       	ldi	r26, 0x33	; 51
     b0e:	bf e3       	ldi	r27, 0x3F	; 63
     b10:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <voltage+0x39>
     b14:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <voltage+0x3a>
     b18:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <voltage+0x3b>
     b1c:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <voltage+0x3c>
     b20:	65 e6       	ldi	r22, 0x65	; 101
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	3e cf       	rjmp	.-388    	; 0x9a2 <main+0x53c>
                    if ((time.sec % 10) == cad.digit6)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                default:
                    cad.update = false, indication.dispMode = DISPLAY_TIME;
     b26:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <cad+0xb>
     b2a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <indication+0x5>
                    break;
     b2e:	44 cd       	rjmp	.-1400   	; 0x5b8 <main+0x152>
                    if ((time.min / 10) == cad.digit3)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 4:
                    cad.digit4 = (cad.counter / (1445 * 2 / 10)) % 10;
     b30:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     b34:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     b38:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     b3c:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     b40:	21 e2       	ldi	r18, 0x21	; 33
     b42:	31 e0       	ldi	r19, 0x01	; 1
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	ae d1       	rcall	.+860    	; 0xea6 <__udivmodsi4>
     b4a:	ca 01       	movw	r24, r20
     b4c:	b9 01       	movw	r22, r18
     b4e:	a5 01       	movw	r20, r10
     b50:	94 01       	movw	r18, r8
     b52:	a9 d1       	rcall	.+850    	; 0xea6 <__udivmodsi4>
     b54:	26 2f       	mov	r18, r22
     b56:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <cad+0x3>
                    if ((time.min % 10) == cad.digit4)
     b5a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <time+0x1>
     b5e:	61 2f       	mov	r22, r17
     b60:	82 d1       	rcall	.+772    	; 0xe66 <__udivmodqi4>
     b62:	92 13       	cpse	r25, r18
     b64:	29 cd       	rjmp	.-1454   	; 0x5b8 <main+0x152>
                        ++cad.updateStage, cad.counter = 0;
     b66:	85 e0       	ldi	r24, 0x05	; 5
     b68:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <cad+0xa>
     b6c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     b70:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     b74:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     b78:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     b7c:	1d cd       	rjmp	.-1478   	; 0x5b8 <main+0x152>
                    break;

                case 5:
                    cad.digit5 = (cad.counter / (1445 * 2 / 10)) % 10;
     b7e:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     b82:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     b86:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     b8a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     b8e:	21 e2       	ldi	r18, 0x21	; 33
     b90:	31 e0       	ldi	r19, 0x01	; 1
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	87 d1       	rcall	.+782    	; 0xea6 <__udivmodsi4>
     b98:	ca 01       	movw	r24, r20
     b9a:	b9 01       	movw	r22, r18
     b9c:	a5 01       	movw	r20, r10
     b9e:	94 01       	movw	r18, r8
     ba0:	82 d1       	rcall	.+772    	; 0xea6 <__udivmodsi4>
     ba2:	26 2f       	mov	r18, r22
     ba4:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <cad+0x4>
                    if ((time.sec / 10) == cad.digit5)
     ba8:	80 2f       	mov	r24, r16
     baa:	61 2f       	mov	r22, r17
     bac:	5c d1       	rcall	.+696    	; 0xe66 <__udivmodqi4>
     bae:	82 13       	cpse	r24, r18
     bb0:	03 cd       	rjmp	.-1530   	; 0x5b8 <main+0x152>
                        ++cad.updateStage, cad.counter = 0;
     bb2:	30 92 55 01 	sts	0x0155, r3	; 0x800155 <cad+0xa>
     bb6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     bba:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     bbe:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     bc2:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     bc6:	f8 cc       	rjmp	.-1552   	; 0x5b8 <main+0x152>
                    if ((time.hour % 10) == cad.digit2)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 3:
                    cad.digit3 = (cad.counter / (1445 * 2 / 10)) % 10;
     bc8:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     bcc:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     bd0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     bd4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     bd8:	21 e2       	ldi	r18, 0x21	; 33
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	62 d1       	rcall	.+708    	; 0xea6 <__udivmodsi4>
     be2:	ca 01       	movw	r24, r20
     be4:	b9 01       	movw	r22, r18
     be6:	a5 01       	movw	r20, r10
     be8:	94 01       	movw	r18, r8
     bea:	5d d1       	rcall	.+698    	; 0xea6 <__udivmodsi4>
     bec:	26 2f       	mov	r18, r22
     bee:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <cad+0x2>
                    if ((time.min / 10) == cad.digit3)
     bf2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <time+0x1>
     bf6:	61 2f       	mov	r22, r17
     bf8:	36 d1       	rcall	.+620    	; 0xe66 <__udivmodqi4>
     bfa:	82 13       	cpse	r24, r18
     bfc:	dd cc       	rjmp	.-1606   	; 0x5b8 <main+0x152>
                        ++cad.updateStage, cad.counter = 0;
     bfe:	84 e0       	ldi	r24, 0x04	; 4
     c00:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <cad+0xa>
     c04:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     c08:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     c0c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     c10:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     c14:	d1 cc       	rjmp	.-1630   	; 0x5b8 <main+0x152>
                cad.updateStage = 1;
                cad.update = true;
            }
            if (cad.update)
            {
                switch (cad.updateStage)
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	09 f4       	brne	.+2      	; 0xc1c <main+0x7b6>
     c1a:	52 ce       	rjmp	.-860    	; 0x8c0 <main+0x45a>
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	09 f0       	breq	.+2      	; 0xc22 <main+0x7bc>
     c20:	82 cf       	rjmp	.-252    	; 0xb26 <main+0x6c0>
                    if ((time.hour / 10) == cad.digit1)
                        ++cad.updateStage, cad.counter = 0;
                    break;

                case 2:
                    cad.digit2 = (cad.counter / (1445 * 2 / 10)) % 10;
     c22:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <cad+0x6>
     c26:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <cad+0x7>
     c2a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <cad+0x8>
     c2e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <cad+0x9>
     c32:	21 e2       	ldi	r18, 0x21	; 33
     c34:	31 e0       	ldi	r19, 0x01	; 1
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	35 d1       	rcall	.+618    	; 0xea6 <__udivmodsi4>
     c3c:	ca 01       	movw	r24, r20
     c3e:	b9 01       	movw	r22, r18
     c40:	a5 01       	movw	r20, r10
     c42:	94 01       	movw	r18, r8
     c44:	30 d1       	rcall	.+608    	; 0xea6 <__udivmodsi4>
     c46:	26 2f       	mov	r18, r22
     c48:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <cad+0x1>
                    if ((time.hour % 10) == cad.digit2)
     c4c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <time+0x2>
     c50:	61 2f       	mov	r22, r17
     c52:	09 d1       	rcall	.+530    	; 0xe66 <__udivmodqi4>
     c54:	92 13       	cpse	r25, r18
     c56:	b0 cc       	rjmp	.-1696   	; 0x5b8 <main+0x152>
                        ++cad.updateStage, cad.counter = 0;
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <cad+0xa>
     c5e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <cad+0x6>
     c62:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <cad+0x7>
     c66:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <cad+0x8>
     c6a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cad+0x9>
     c6e:	a4 cc       	rjmp	.-1720   	; 0x5b8 <main+0x152>

00000c70 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
    ADCSRA |= ((1 << ADEN) // ADC EN
     c70:	ea e7       	ldi	r30, 0x7A	; 122
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	8f 6a       	ori	r24, 0xAF	; 175
     c78:	80 83       	st	Z, r24
               | (1 << ADATE) // AUTO TRIG EN
               | (1 << ADIE) // ADC CONVERSION INTERRUPT EN
               | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2)); // 128 PRESCALE

    ADMUX &= ~((1 << MUX0) | (1 << MUX1) | (1 << MUX2) | (1 << MUX3)); // ADC0 INPUT
     c7a:	ac e7       	ldi	r26, 0x7C	; 124
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	8c 91       	ld	r24, X
     c80:	80 7f       	andi	r24, 0xF0	; 240
     c82:	8c 93       	st	X, r24
    ADMUX &= ~(1 << REFS0); // 1.1V REFs
     c84:	8c 91       	ld	r24, X
     c86:	8f 7b       	andi	r24, 0xBF	; 191
     c88:	8c 93       	st	X, r24

    ADCSRA |= (1 << ADSC); // ADC START
     c8a:	80 81       	ld	r24, Z
     c8c:	80 64       	ori	r24, 0x40	; 64
     c8e:	80 83       	st	Z, r24
     c90:	08 95       	ret

00000c92 <arm_pid_f32>:
#include "PID.h"

float32_t arm_pid_f32(arm_pid_instance_f32 *S, float32_t in)
{
     c92:	4f 92       	push	r4
     c94:	5f 92       	push	r5
     c96:	6f 92       	push	r6
     c98:	7f 92       	push	r7
     c9a:	8f 92       	push	r8
     c9c:	9f 92       	push	r9
     c9e:	af 92       	push	r10
     ca0:	bf 92       	push	r11
     ca2:	cf 92       	push	r12
     ca4:	df 92       	push	r13
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
     cb0:	6a 01       	movw	r12, r20
     cb2:	7b 01       	movw	r14, r22
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2] */
    out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
     cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
     cb6:	9d 84       	ldd	r9, Y+13	; 0x0d
     cb8:	ae 84       	ldd	r10, Y+14	; 0x0e
     cba:	bf 84       	ldd	r11, Y+15	; 0x0f
     cbc:	28 81       	ld	r18, Y
     cbe:	39 81       	ldd	r19, Y+1	; 0x01
     cc0:	4a 81       	ldd	r20, Y+2	; 0x02
     cc2:	5b 81       	ldd	r21, Y+3	; 0x03
     cc4:	cb 01       	movw	r24, r22
     cc6:	b6 01       	movw	r22, r12
     cc8:	5b d2       	rcall	.+1206   	; 0x1180 <__mulsf3>
     cca:	2b 01       	movw	r4, r22
     ccc:	3c 01       	movw	r6, r24
     cce:	2c 81       	ldd	r18, Y+4	; 0x04
     cd0:	3d 81       	ldd	r19, Y+5	; 0x05
     cd2:	4e 81       	ldd	r20, Y+6	; 0x06
     cd4:	5f 81       	ldd	r21, Y+7	; 0x07
     cd6:	c5 01       	movw	r24, r10
     cd8:	b4 01       	movw	r22, r8
     cda:	52 d2       	rcall	.+1188   	; 0x1180 <__mulsf3>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	c3 01       	movw	r24, r6
     ce2:	b2 01       	movw	r22, r4
     ce4:	03 d1       	rcall	.+518    	; 0xeec <__addsf3>
     ce6:	2c 89       	ldd	r18, Y+20	; 0x14
     ce8:	3d 89       	ldd	r19, Y+21	; 0x15
     cea:	4e 89       	ldd	r20, Y+22	; 0x16
     cec:	5f 89       	ldd	r21, Y+23	; 0x17
     cee:	fe d0       	rcall	.+508    	; 0xeec <__addsf3>
     cf0:	2b 01       	movw	r4, r22
     cf2:	3c 01       	movw	r6, r24
     cf4:	28 89       	ldd	r18, Y+16	; 0x10
     cf6:	39 89       	ldd	r19, Y+17	; 0x11
     cf8:	4a 89       	ldd	r20, Y+18	; 0x12
     cfa:	5b 89       	ldd	r21, Y+19	; 0x13
     cfc:	68 85       	ldd	r22, Y+8	; 0x08
     cfe:	79 85       	ldd	r23, Y+9	; 0x09
     d00:	8a 85       	ldd	r24, Y+10	; 0x0a
     d02:	9b 85       	ldd	r25, Y+11	; 0x0b
     d04:	3d d2       	rcall	.+1146   	; 0x1180 <__mulsf3>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	c3 01       	movw	r24, r6
     d0c:	b2 01       	movw	r22, r4
     d0e:	ee d0       	rcall	.+476    	; 0xeec <__addsf3>

    /* Update state */
    S->state[1] = S->state[0];
     d10:	88 8a       	std	Y+16, r8	; 0x10
     d12:	99 8a       	std	Y+17, r9	; 0x11
     d14:	aa 8a       	std	Y+18, r10	; 0x12
     d16:	bb 8a       	std	Y+19, r11	; 0x13
    S->state[0] = in;
     d18:	cc 86       	std	Y+12, r12	; 0x0c
     d1a:	dd 86       	std	Y+13, r13	; 0x0d
     d1c:	ee 86       	std	Y+14, r14	; 0x0e
     d1e:	ff 86       	std	Y+15, r15	; 0x0f
    S->state[2] = out;
     d20:	6c 8b       	std	Y+20, r22	; 0x14
     d22:	7d 8b       	std	Y+21, r23	; 0x15
     d24:	8e 8b       	std	Y+22, r24	; 0x16
     d26:	9f 8b       	std	Y+23, r25	; 0x17

    /* return to application */
    return (out);
}
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	bf 90       	pop	r11
     d36:	af 90       	pop	r10
     d38:	9f 90       	pop	r9
     d3a:	8f 90       	pop	r8
     d3c:	7f 90       	pop	r7
     d3e:	6f 90       	pop	r6
     d40:	5f 90       	pop	r5
     d42:	4f 90       	pop	r4
     d44:	08 95       	ret

00000d46 <arm_pid_init_f32>:

void arm_pid_init_f32(arm_pid_instance_f32 *S, int32_t resetStateFlag)
{
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
     d64:	4a 01       	movw	r8, r20
     d66:	5b 01       	movw	r10, r22
    /* Derived coefficient A0 */
    S->A0 = S->Kp + S->Ki + S->Kd;
     d68:	48 8c       	ldd	r4, Y+24	; 0x18
     d6a:	59 8c       	ldd	r5, Y+25	; 0x19
     d6c:	6a 8c       	ldd	r6, Y+26	; 0x1a
     d6e:	7b 8c       	ldd	r7, Y+27	; 0x1b
     d70:	c8 a0       	ldd	r12, Y+32	; 0x20
     d72:	d9 a0       	ldd	r13, Y+33	; 0x21
     d74:	ea a0       	ldd	r14, Y+34	; 0x22
     d76:	fb a0       	ldd	r15, Y+35	; 0x23
     d78:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d7a:	3d 8d       	ldd	r19, Y+29	; 0x1d
     d7c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     d7e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     d80:	c3 01       	movw	r24, r6
     d82:	b2 01       	movw	r22, r4
     d84:	b3 d0       	rcall	.+358    	; 0xeec <__addsf3>
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	b0 d0       	rcall	.+352    	; 0xeec <__addsf3>
     d8c:	68 83       	st	Y, r22
     d8e:	79 83       	std	Y+1, r23	; 0x01
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	9b 83       	std	Y+3, r25	; 0x03

    /* Derived coefficient A1 */
    S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
     d94:	a7 01       	movw	r20, r14
     d96:	96 01       	movw	r18, r12
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 01       	movw	r22, r12
     d9c:	a7 d0       	rcall	.+334    	; 0xeec <__addsf3>
     d9e:	a3 01       	movw	r20, r6
     da0:	92 01       	movw	r18, r4
     da2:	a4 d0       	rcall	.+328    	; 0xeec <__addsf3>
     da4:	90 58       	subi	r25, 0x80	; 128
     da6:	6c 83       	std	Y+4, r22	; 0x04
     da8:	7d 83       	std	Y+5, r23	; 0x05
     daa:	8e 83       	std	Y+6, r24	; 0x06
     dac:	9f 83       	std	Y+7, r25	; 0x07

    /* Derived coefficient A2 */
    S->A2 = S->Kd;
     dae:	c8 86       	std	Y+8, r12	; 0x08
     db0:	d9 86       	std	Y+9, r13	; 0x09
     db2:	ea 86       	std	Y+10, r14	; 0x0a
     db4:	fb 86       	std	Y+11, r15	; 0x0b

    /* Check whether state needs reset or not */
    if (resetStateFlag)
     db6:	89 28       	or	r8, r9
     db8:	8a 28       	or	r8, r10
     dba:	8b 28       	or	r8, r11
     dbc:	31 f0       	breq	.+12     	; 0xdca <arm_pid_init_f32+0x84>
}

void arm_pid_reset_f32(arm_pid_instance_f32 *S)
{
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
     dbe:	2c 96       	adiw	r28, 0x0c	; 12
     dc0:	8c e0       	ldi	r24, 0x0C	; 12
     dc2:	fe 01       	movw	r30, r28
     dc4:	11 92       	st	Z+, r1
     dc6:	8a 95       	dec	r24
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <arm_pid_init_f32+0x7e>
    S->A2 = S->Kd;

    /* Check whether state needs reset or not */
    if (resetStateFlag)
        arm_pid_reset_f32(S);
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	7f 90       	pop	r7
     de0:	6f 90       	pop	r6
     de2:	5f 90       	pop	r5
     de4:	4f 90       	pop	r4
     de6:	08 95       	ret

00000de8 <RTC_BCDtoDEC>:
#include "RTC.h"

uint8_t RTC_BCDtoDEC(uint8_t c)
{
    uint8_t ch = ((c >> 4) * 10 + (0b00001111 & c));
     de8:	28 2f       	mov	r18, r24
     dea:	22 95       	swap	r18
     dec:	2f 70       	andi	r18, 0x0F	; 15
     dee:	92 2f       	mov	r25, r18
     df0:	99 0f       	add	r25, r25
     df2:	99 0f       	add	r25, r25
     df4:	92 0f       	add	r25, r18
     df6:	99 0f       	add	r25, r25
     df8:	8f 70       	andi	r24, 0x0F	; 15

    return ch;
}
     dfa:	89 0f       	add	r24, r25
     dfc:	08 95       	ret

00000dfe <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t c)
{
    uint8_t ch = ((c / 10) << 4) | (c % 10);
     dfe:	6a e0       	ldi	r22, 0x0A	; 10
     e00:	32 d0       	rcall	.+100    	; 0xe66 <__udivmodqi4>
     e02:	82 95       	swap	r24
     e04:	80 7f       	andi	r24, 0xF0	; 240

    return ch;
     e06:	89 2b       	or	r24, r25
     e08:	08 95       	ret

00000e0a <I2C_Init>:
{
    I2C_StartCondition();
    I2C_SendByte(addr);
    I2C_SendByte(c);
    I2C_StopCondition();
}
     e0a:	88 e4       	ldi	r24, 0x48	; 72
     e0c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     e10:	08 95       	ret

00000e12 <I2C_StartCondition>:
     e12:	84 ea       	ldi	r24, 0xA4	; 164
     e14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e1c:	87 ff       	sbrs	r24, 7
     e1e:	fc cf       	rjmp	.-8      	; 0xe18 <I2C_StartCondition+0x6>
     e20:	08 95       	ret

00000e22 <I2C_StopCondition>:
     e22:	84 e9       	ldi	r24, 0x94	; 148
     e24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e28:	08 95       	ret

00000e2a <I2C_SendByte>:
     e2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     e2e:	84 e8       	ldi	r24, 0x84	; 132
     e30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e38:	87 ff       	sbrs	r24, 7
     e3a:	fc cf       	rjmp	.-8      	; 0xe34 <I2C_SendByte+0xa>
     e3c:	08 95       	ret

00000e3e <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e3e:	84 ec       	ldi	r24, 0xC4	; 196
     e40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     e44:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e48:	87 ff       	sbrs	r24, 7
     e4a:	fc cf       	rjmp	.-8      	; 0xe44 <I2C_ReadByte+0x6>

    return TWDR;
     e4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
     e50:	08 95       	ret

00000e52 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
     e52:	84 e8       	ldi	r24, 0x84	; 132
     e54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
    while (!(TWCR & (1 << TWINT))) {}
     e58:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e5c:	87 ff       	sbrs	r24, 7
     e5e:	fc cf       	rjmp	.-8      	; 0xe58 <I2C_ReadLastByte+0x6>

    return TWDR;
     e60:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     e64:	08 95       	ret

00000e66 <__udivmodqi4>:
     e66:	99 1b       	sub	r25, r25
     e68:	79 e0       	ldi	r23, 0x09	; 9
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <__udivmodqi4_ep>

00000e6c <__udivmodqi4_loop>:
     e6c:	99 1f       	adc	r25, r25
     e6e:	96 17       	cp	r25, r22
     e70:	08 f0       	brcs	.+2      	; 0xe74 <__udivmodqi4_ep>
     e72:	96 1b       	sub	r25, r22

00000e74 <__udivmodqi4_ep>:
     e74:	88 1f       	adc	r24, r24
     e76:	7a 95       	dec	r23
     e78:	c9 f7       	brne	.-14     	; 0xe6c <__udivmodqi4_loop>
     e7a:	80 95       	com	r24
     e7c:	08 95       	ret

00000e7e <__udivmodhi4>:
     e7e:	aa 1b       	sub	r26, r26
     e80:	bb 1b       	sub	r27, r27
     e82:	51 e1       	ldi	r21, 0x11	; 17
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <__udivmodhi4_ep>

00000e86 <__udivmodhi4_loop>:
     e86:	aa 1f       	adc	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	a6 17       	cp	r26, r22
     e8c:	b7 07       	cpc	r27, r23
     e8e:	10 f0       	brcs	.+4      	; 0xe94 <__udivmodhi4_ep>
     e90:	a6 1b       	sub	r26, r22
     e92:	b7 0b       	sbc	r27, r23

00000e94 <__udivmodhi4_ep>:
     e94:	88 1f       	adc	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	5a 95       	dec	r21
     e9a:	a9 f7       	brne	.-22     	; 0xe86 <__udivmodhi4_loop>
     e9c:	80 95       	com	r24
     e9e:	90 95       	com	r25
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	08 95       	ret

00000ea6 <__udivmodsi4>:
     ea6:	a1 e2       	ldi	r26, 0x21	; 33
     ea8:	1a 2e       	mov	r1, r26
     eaa:	aa 1b       	sub	r26, r26
     eac:	bb 1b       	sub	r27, r27
     eae:	fd 01       	movw	r30, r26
     eb0:	0d c0       	rjmp	.+26     	; 0xecc <__udivmodsi4_ep>

00000eb2 <__udivmodsi4_loop>:
     eb2:	aa 1f       	adc	r26, r26
     eb4:	bb 1f       	adc	r27, r27
     eb6:	ee 1f       	adc	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	a2 17       	cp	r26, r18
     ebc:	b3 07       	cpc	r27, r19
     ebe:	e4 07       	cpc	r30, r20
     ec0:	f5 07       	cpc	r31, r21
     ec2:	20 f0       	brcs	.+8      	; 0xecc <__udivmodsi4_ep>
     ec4:	a2 1b       	sub	r26, r18
     ec6:	b3 0b       	sbc	r27, r19
     ec8:	e4 0b       	sbc	r30, r20
     eca:	f5 0b       	sbc	r31, r21

00000ecc <__udivmodsi4_ep>:
     ecc:	66 1f       	adc	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	88 1f       	adc	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	1a 94       	dec	r1
     ed6:	69 f7       	brne	.-38     	; 0xeb2 <__udivmodsi4_loop>
     ed8:	60 95       	com	r22
     eda:	70 95       	com	r23
     edc:	80 95       	com	r24
     ede:	90 95       	com	r25
     ee0:	9b 01       	movw	r18, r22
     ee2:	ac 01       	movw	r20, r24
     ee4:	bd 01       	movw	r22, r26
     ee6:	cf 01       	movw	r24, r30
     ee8:	08 95       	ret

00000eea <__subsf3>:
     eea:	50 58       	subi	r21, 0x80	; 128

00000eec <__addsf3>:
     eec:	bb 27       	eor	r27, r27
     eee:	aa 27       	eor	r26, r26
     ef0:	0e d0       	rcall	.+28     	; 0xf0e <__addsf3x>
     ef2:	08 c1       	rjmp	.+528    	; 0x1104 <__fp_round>
     ef4:	f9 d0       	rcall	.+498    	; 0x10e8 <__fp_pscA>
     ef6:	30 f0       	brcs	.+12     	; 0xf04 <__addsf3+0x18>
     ef8:	fe d0       	rcall	.+508    	; 0x10f6 <__fp_pscB>
     efa:	20 f0       	brcs	.+8      	; 0xf04 <__addsf3+0x18>
     efc:	31 f4       	brne	.+12     	; 0xf0a <__addsf3+0x1e>
     efe:	9f 3f       	cpi	r25, 0xFF	; 255
     f00:	11 f4       	brne	.+4      	; 0xf06 <__addsf3+0x1a>
     f02:	1e f4       	brtc	.+6      	; 0xf0a <__addsf3+0x1e>
     f04:	ee c0       	rjmp	.+476    	; 0x10e2 <__fp_nan>
     f06:	0e f4       	brtc	.+2      	; 0xf0a <__addsf3+0x1e>
     f08:	e0 95       	com	r30
     f0a:	e7 fb       	bst	r30, 7
     f0c:	e4 c0       	rjmp	.+456    	; 0x10d6 <__fp_inf>

00000f0e <__addsf3x>:
     f0e:	e9 2f       	mov	r30, r25
     f10:	0a d1       	rcall	.+532    	; 0x1126 <__fp_split3>
     f12:	80 f3       	brcs	.-32     	; 0xef4 <__addsf3+0x8>
     f14:	ba 17       	cp	r27, r26
     f16:	62 07       	cpc	r22, r18
     f18:	73 07       	cpc	r23, r19
     f1a:	84 07       	cpc	r24, r20
     f1c:	95 07       	cpc	r25, r21
     f1e:	18 f0       	brcs	.+6      	; 0xf26 <__addsf3x+0x18>
     f20:	71 f4       	brne	.+28     	; 0xf3e <__addsf3x+0x30>
     f22:	9e f5       	brtc	.+102    	; 0xf8a <__addsf3x+0x7c>
     f24:	22 c1       	rjmp	.+580    	; 0x116a <__fp_zero>
     f26:	0e f4       	brtc	.+2      	; 0xf2a <__addsf3x+0x1c>
     f28:	e0 95       	com	r30
     f2a:	0b 2e       	mov	r0, r27
     f2c:	ba 2f       	mov	r27, r26
     f2e:	a0 2d       	mov	r26, r0
     f30:	0b 01       	movw	r0, r22
     f32:	b9 01       	movw	r22, r18
     f34:	90 01       	movw	r18, r0
     f36:	0c 01       	movw	r0, r24
     f38:	ca 01       	movw	r24, r20
     f3a:	a0 01       	movw	r20, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	ff 27       	eor	r31, r31
     f40:	59 1b       	sub	r21, r25
     f42:	99 f0       	breq	.+38     	; 0xf6a <__addsf3x+0x5c>
     f44:	59 3f       	cpi	r21, 0xF9	; 249
     f46:	50 f4       	brcc	.+20     	; 0xf5c <__addsf3x+0x4e>
     f48:	50 3e       	cpi	r21, 0xE0	; 224
     f4a:	68 f1       	brcs	.+90     	; 0xfa6 <__addsf3x+0x98>
     f4c:	1a 16       	cp	r1, r26
     f4e:	f0 40       	sbci	r31, 0x00	; 0
     f50:	a2 2f       	mov	r26, r18
     f52:	23 2f       	mov	r18, r19
     f54:	34 2f       	mov	r19, r20
     f56:	44 27       	eor	r20, r20
     f58:	58 5f       	subi	r21, 0xF8	; 248
     f5a:	f3 cf       	rjmp	.-26     	; 0xf42 <__addsf3x+0x34>
     f5c:	46 95       	lsr	r20
     f5e:	37 95       	ror	r19
     f60:	27 95       	ror	r18
     f62:	a7 95       	ror	r26
     f64:	f0 40       	sbci	r31, 0x00	; 0
     f66:	53 95       	inc	r21
     f68:	c9 f7       	brne	.-14     	; 0xf5c <__addsf3x+0x4e>
     f6a:	7e f4       	brtc	.+30     	; 0xf8a <__addsf3x+0x7c>
     f6c:	1f 16       	cp	r1, r31
     f6e:	ba 0b       	sbc	r27, r26
     f70:	62 0b       	sbc	r22, r18
     f72:	73 0b       	sbc	r23, r19
     f74:	84 0b       	sbc	r24, r20
     f76:	ba f0       	brmi	.+46     	; 0xfa6 <__addsf3x+0x98>
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	a1 f0       	breq	.+40     	; 0xfa4 <__addsf3x+0x96>
     f7c:	ff 0f       	add	r31, r31
     f7e:	bb 1f       	adc	r27, r27
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	c2 f7       	brpl	.-16     	; 0xf78 <__addsf3x+0x6a>
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <__addsf3x+0x98>
     f8a:	ba 0f       	add	r27, r26
     f8c:	62 1f       	adc	r22, r18
     f8e:	73 1f       	adc	r23, r19
     f90:	84 1f       	adc	r24, r20
     f92:	48 f4       	brcc	.+18     	; 0xfa6 <__addsf3x+0x98>
     f94:	87 95       	ror	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	9e 3f       	cpi	r25, 0xFE	; 254
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <__addsf3x+0x96>
     fa2:	b3 cf       	rjmp	.-154    	; 0xf0a <__addsf3+0x1e>
     fa4:	93 95       	inc	r25
     fa6:	88 0f       	add	r24, r24
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__addsf3x+0x9e>
     faa:	99 27       	eor	r25, r25
     fac:	ee 0f       	add	r30, r30
     fae:	97 95       	ror	r25
     fb0:	87 95       	ror	r24
     fb2:	08 95       	ret

00000fb4 <__cmpsf2>:
     fb4:	6c d0       	rcall	.+216    	; 0x108e <__fp_cmp>
     fb6:	08 f4       	brcc	.+2      	; 0xfba <__cmpsf2+0x6>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 95       	ret

00000fbc <__fixunssfsi>:
     fbc:	bc d0       	rcall	.+376    	; 0x1136 <__fp_splitA>
     fbe:	88 f0       	brcs	.+34     	; 0xfe2 <__fixunssfsi+0x26>
     fc0:	9f 57       	subi	r25, 0x7F	; 127
     fc2:	90 f0       	brcs	.+36     	; 0xfe8 <__fixunssfsi+0x2c>
     fc4:	b9 2f       	mov	r27, r25
     fc6:	99 27       	eor	r25, r25
     fc8:	b7 51       	subi	r27, 0x17	; 23
     fca:	a0 f0       	brcs	.+40     	; 0xff4 <__fixunssfsi+0x38>
     fcc:	d1 f0       	breq	.+52     	; 0x1002 <__fixunssfsi+0x46>
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	1a f0       	brmi	.+6      	; 0xfde <__fixunssfsi+0x22>
     fd8:	ba 95       	dec	r27
     fda:	c9 f7       	brne	.-14     	; 0xfce <__fixunssfsi+0x12>
     fdc:	12 c0       	rjmp	.+36     	; 0x1002 <__fixunssfsi+0x46>
     fde:	b1 30       	cpi	r27, 0x01	; 1
     fe0:	81 f0       	breq	.+32     	; 0x1002 <__fixunssfsi+0x46>
     fe2:	c3 d0       	rcall	.+390    	; 0x116a <__fp_zero>
     fe4:	b1 e0       	ldi	r27, 0x01	; 1
     fe6:	08 95       	ret
     fe8:	c0 c0       	rjmp	.+384    	; 0x116a <__fp_zero>
     fea:	67 2f       	mov	r22, r23
     fec:	78 2f       	mov	r23, r24
     fee:	88 27       	eor	r24, r24
     ff0:	b8 5f       	subi	r27, 0xF8	; 248
     ff2:	39 f0       	breq	.+14     	; 0x1002 <__fixunssfsi+0x46>
     ff4:	b9 3f       	cpi	r27, 0xF9	; 249
     ff6:	cc f3       	brlt	.-14     	; 0xfea <__fixunssfsi+0x2e>
     ff8:	86 95       	lsr	r24
     ffa:	77 95       	ror	r23
     ffc:	67 95       	ror	r22
     ffe:	b3 95       	inc	r27
    1000:	d9 f7       	brne	.-10     	; 0xff8 <__fixunssfsi+0x3c>
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__fixunssfsi+0x56>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	08 95       	ret

00001014 <__floatunsisf>:
    1014:	e8 94       	clt
    1016:	09 c0       	rjmp	.+18     	; 0x102a <__floatsisf+0x12>

00001018 <__floatsisf>:
    1018:	97 fb       	bst	r25, 7
    101a:	3e f4       	brtc	.+14     	; 0x102a <__floatsisf+0x12>
    101c:	90 95       	com	r25
    101e:	80 95       	com	r24
    1020:	70 95       	com	r23
    1022:	61 95       	neg	r22
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	99 23       	and	r25, r25
    102c:	a9 f0       	breq	.+42     	; 0x1058 <__floatsisf+0x40>
    102e:	f9 2f       	mov	r31, r25
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	bb 27       	eor	r27, r27
    1034:	93 95       	inc	r25
    1036:	f6 95       	lsr	r31
    1038:	87 95       	ror	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b7 95       	ror	r27
    1040:	f1 11       	cpse	r31, r1
    1042:	f8 cf       	rjmp	.-16     	; 0x1034 <__floatsisf+0x1c>
    1044:	fa f4       	brpl	.+62     	; 0x1084 <__floatsisf+0x6c>
    1046:	bb 0f       	add	r27, r27
    1048:	11 f4       	brne	.+4      	; 0x104e <__floatsisf+0x36>
    104a:	60 ff       	sbrs	r22, 0
    104c:	1b c0       	rjmp	.+54     	; 0x1084 <__floatsisf+0x6c>
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	8f 4f       	sbci	r24, 0xFF	; 255
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	16 c0       	rjmp	.+44     	; 0x1084 <__floatsisf+0x6c>
    1058:	88 23       	and	r24, r24
    105a:	11 f0       	breq	.+4      	; 0x1060 <__floatsisf+0x48>
    105c:	96 e9       	ldi	r25, 0x96	; 150
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <__floatsisf+0x6a>
    1060:	77 23       	and	r23, r23
    1062:	21 f0       	breq	.+8      	; 0x106c <__floatsisf+0x54>
    1064:	9e e8       	ldi	r25, 0x8E	; 142
    1066:	87 2f       	mov	r24, r23
    1068:	76 2f       	mov	r23, r22
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__floatsisf+0x5e>
    106c:	66 23       	and	r22, r22
    106e:	71 f0       	breq	.+28     	; 0x108c <__floatsisf+0x74>
    1070:	96 e8       	ldi	r25, 0x86	; 134
    1072:	86 2f       	mov	r24, r22
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	2a f0       	brmi	.+10     	; 0x1084 <__floatsisf+0x6c>
    107a:	9a 95       	dec	r25
    107c:	66 0f       	add	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	da f7       	brpl	.-10     	; 0x107a <__floatsisf+0x62>
    1084:	88 0f       	add	r24, r24
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret

0000108e <__fp_cmp>:
    108e:	99 0f       	add	r25, r25
    1090:	00 08       	sbc	r0, r0
    1092:	55 0f       	add	r21, r21
    1094:	aa 0b       	sbc	r26, r26
    1096:	e0 e8       	ldi	r30, 0x80	; 128
    1098:	fe ef       	ldi	r31, 0xFE	; 254
    109a:	16 16       	cp	r1, r22
    109c:	17 06       	cpc	r1, r23
    109e:	e8 07       	cpc	r30, r24
    10a0:	f9 07       	cpc	r31, r25
    10a2:	c0 f0       	brcs	.+48     	; 0x10d4 <__fp_cmp+0x46>
    10a4:	12 16       	cp	r1, r18
    10a6:	13 06       	cpc	r1, r19
    10a8:	e4 07       	cpc	r30, r20
    10aa:	f5 07       	cpc	r31, r21
    10ac:	98 f0       	brcs	.+38     	; 0x10d4 <__fp_cmp+0x46>
    10ae:	62 1b       	sub	r22, r18
    10b0:	73 0b       	sbc	r23, r19
    10b2:	84 0b       	sbc	r24, r20
    10b4:	95 0b       	sbc	r25, r21
    10b6:	39 f4       	brne	.+14     	; 0x10c6 <__fp_cmp+0x38>
    10b8:	0a 26       	eor	r0, r26
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <__fp_cmp+0x46>
    10bc:	23 2b       	or	r18, r19
    10be:	24 2b       	or	r18, r20
    10c0:	25 2b       	or	r18, r21
    10c2:	21 f4       	brne	.+8      	; 0x10cc <__fp_cmp+0x3e>
    10c4:	08 95       	ret
    10c6:	0a 26       	eor	r0, r26
    10c8:	09 f4       	brne	.+2      	; 0x10cc <__fp_cmp+0x3e>
    10ca:	a1 40       	sbci	r26, 0x01	; 1
    10cc:	a6 95       	lsr	r26
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	81 1d       	adc	r24, r1
    10d2:	81 1d       	adc	r24, r1
    10d4:	08 95       	ret

000010d6 <__fp_inf>:
    10d6:	97 f9       	bld	r25, 7
    10d8:	9f 67       	ori	r25, 0x7F	; 127
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	08 95       	ret

000010e2 <__fp_nan>:
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	80 ec       	ldi	r24, 0xC0	; 192
    10e6:	08 95       	ret

000010e8 <__fp_pscA>:
    10e8:	00 24       	eor	r0, r0
    10ea:	0a 94       	dec	r0
    10ec:	16 16       	cp	r1, r22
    10ee:	17 06       	cpc	r1, r23
    10f0:	18 06       	cpc	r1, r24
    10f2:	09 06       	cpc	r0, r25
    10f4:	08 95       	ret

000010f6 <__fp_pscB>:
    10f6:	00 24       	eor	r0, r0
    10f8:	0a 94       	dec	r0
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	14 06       	cpc	r1, r20
    1100:	05 06       	cpc	r0, r21
    1102:	08 95       	ret

00001104 <__fp_round>:
    1104:	09 2e       	mov	r0, r25
    1106:	03 94       	inc	r0
    1108:	00 0c       	add	r0, r0
    110a:	11 f4       	brne	.+4      	; 0x1110 <__fp_round+0xc>
    110c:	88 23       	and	r24, r24
    110e:	52 f0       	brmi	.+20     	; 0x1124 <__fp_round+0x20>
    1110:	bb 0f       	add	r27, r27
    1112:	40 f4       	brcc	.+16     	; 0x1124 <__fp_round+0x20>
    1114:	bf 2b       	or	r27, r31
    1116:	11 f4       	brne	.+4      	; 0x111c <__fp_round+0x18>
    1118:	60 ff       	sbrs	r22, 0
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__fp_round+0x20>
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	08 95       	ret

00001126 <__fp_split3>:
    1126:	57 fd       	sbrc	r21, 7
    1128:	90 58       	subi	r25, 0x80	; 128
    112a:	44 0f       	add	r20, r20
    112c:	55 1f       	adc	r21, r21
    112e:	59 f0       	breq	.+22     	; 0x1146 <__fp_splitA+0x10>
    1130:	5f 3f       	cpi	r21, 0xFF	; 255
    1132:	71 f0       	breq	.+28     	; 0x1150 <__fp_splitA+0x1a>
    1134:	47 95       	ror	r20

00001136 <__fp_splitA>:
    1136:	88 0f       	add	r24, r24
    1138:	97 fb       	bst	r25, 7
    113a:	99 1f       	adc	r25, r25
    113c:	61 f0       	breq	.+24     	; 0x1156 <__fp_splitA+0x20>
    113e:	9f 3f       	cpi	r25, 0xFF	; 255
    1140:	79 f0       	breq	.+30     	; 0x1160 <__fp_splitA+0x2a>
    1142:	87 95       	ror	r24
    1144:	08 95       	ret
    1146:	12 16       	cp	r1, r18
    1148:	13 06       	cpc	r1, r19
    114a:	14 06       	cpc	r1, r20
    114c:	55 1f       	adc	r21, r21
    114e:	f2 cf       	rjmp	.-28     	; 0x1134 <__fp_split3+0xe>
    1150:	46 95       	lsr	r20
    1152:	f1 df       	rcall	.-30     	; 0x1136 <__fp_splitA>
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <__fp_splitA+0x30>
    1156:	16 16       	cp	r1, r22
    1158:	17 06       	cpc	r1, r23
    115a:	18 06       	cpc	r1, r24
    115c:	99 1f       	adc	r25, r25
    115e:	f1 cf       	rjmp	.-30     	; 0x1142 <__fp_splitA+0xc>
    1160:	86 95       	lsr	r24
    1162:	71 05       	cpc	r23, r1
    1164:	61 05       	cpc	r22, r1
    1166:	08 94       	sec
    1168:	08 95       	ret

0000116a <__fp_zero>:
    116a:	e8 94       	clt

0000116c <__fp_szero>:
    116c:	bb 27       	eor	r27, r27
    116e:	66 27       	eor	r22, r22
    1170:	77 27       	eor	r23, r23
    1172:	cb 01       	movw	r24, r22
    1174:	97 f9       	bld	r25, 7
    1176:	08 95       	ret

00001178 <__gesf2>:
    1178:	8a df       	rcall	.-236    	; 0x108e <__fp_cmp>
    117a:	08 f4       	brcc	.+2      	; 0x117e <__gesf2+0x6>
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	08 95       	ret

00001180 <__mulsf3>:
    1180:	0a d0       	rcall	.+20     	; 0x1196 <__mulsf3x>
    1182:	c0 cf       	rjmp	.-128    	; 0x1104 <__fp_round>
    1184:	b1 df       	rcall	.-158    	; 0x10e8 <__fp_pscA>
    1186:	28 f0       	brcs	.+10     	; 0x1192 <__mulsf3+0x12>
    1188:	b6 df       	rcall	.-148    	; 0x10f6 <__fp_pscB>
    118a:	18 f0       	brcs	.+6      	; 0x1192 <__mulsf3+0x12>
    118c:	95 23       	and	r25, r21
    118e:	09 f0       	breq	.+2      	; 0x1192 <__mulsf3+0x12>
    1190:	a2 cf       	rjmp	.-188    	; 0x10d6 <__fp_inf>
    1192:	a7 cf       	rjmp	.-178    	; 0x10e2 <__fp_nan>
    1194:	eb cf       	rjmp	.-42     	; 0x116c <__fp_szero>

00001196 <__mulsf3x>:
    1196:	c7 df       	rcall	.-114    	; 0x1126 <__fp_split3>
    1198:	a8 f3       	brcs	.-22     	; 0x1184 <__mulsf3+0x4>

0000119a <__mulsf3_pse>:
    119a:	99 23       	and	r25, r25
    119c:	d9 f3       	breq	.-10     	; 0x1194 <__mulsf3+0x14>
    119e:	55 23       	and	r21, r21
    11a0:	c9 f3       	breq	.-14     	; 0x1194 <__mulsf3+0x14>
    11a2:	95 0f       	add	r25, r21
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	55 1f       	adc	r21, r21
    11a8:	aa 27       	eor	r26, r26
    11aa:	ee 27       	eor	r30, r30
    11ac:	ff 27       	eor	r31, r31
    11ae:	bb 27       	eor	r27, r27
    11b0:	00 24       	eor	r0, r0
    11b2:	08 94       	sec
    11b4:	67 95       	ror	r22
    11b6:	20 f4       	brcc	.+8      	; 0x11c0 <__mulsf3_pse+0x26>
    11b8:	e2 0f       	add	r30, r18
    11ba:	f3 1f       	adc	r31, r19
    11bc:	b4 1f       	adc	r27, r20
    11be:	0a 1e       	adc	r0, r26
    11c0:	22 0f       	add	r18, r18
    11c2:	33 1f       	adc	r19, r19
    11c4:	44 1f       	adc	r20, r20
    11c6:	aa 1f       	adc	r26, r26
    11c8:	66 95       	lsr	r22
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <__mulsf3_pse+0x1c>
    11cc:	77 95       	ror	r23
    11ce:	30 f4       	brcc	.+12     	; 0x11dc <__mulsf3_pse+0x42>
    11d0:	f3 0f       	add	r31, r19
    11d2:	b4 1f       	adc	r27, r20
    11d4:	0a 1e       	adc	r0, r26
    11d6:	12 1e       	adc	r1, r18
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <__mulsf3_pse+0x42>
    11da:	63 95       	inc	r22
    11dc:	33 0f       	add	r19, r19
    11de:	44 1f       	adc	r20, r20
    11e0:	aa 1f       	adc	r26, r26
    11e2:	22 1f       	adc	r18, r18
    11e4:	76 95       	lsr	r23
    11e6:	99 f7       	brne	.-26     	; 0x11ce <__mulsf3_pse+0x34>
    11e8:	87 95       	ror	r24
    11ea:	20 f4       	brcc	.+8      	; 0x11f4 <__mulsf3_pse+0x5a>
    11ec:	b4 0f       	add	r27, r20
    11ee:	0a 1e       	adc	r0, r26
    11f0:	12 1e       	adc	r1, r18
    11f2:	63 1f       	adc	r22, r19
    11f4:	44 0f       	add	r20, r20
    11f6:	aa 1f       	adc	r26, r26
    11f8:	22 1f       	adc	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	86 95       	lsr	r24
    11fe:	a9 f7       	brne	.-22     	; 0x11ea <__mulsf3_pse+0x50>
    1200:	86 2f       	mov	r24, r22
    1202:	71 2d       	mov	r23, r1
    1204:	60 2d       	mov	r22, r0
    1206:	11 24       	eor	r1, r1
    1208:	9f 57       	subi	r25, 0x7F	; 127
    120a:	50 40       	sbci	r21, 0x00	; 0
    120c:	8a f0       	brmi	.+34     	; 0x1230 <__mulsf3_pse+0x96>
    120e:	e1 f0       	breq	.+56     	; 0x1248 <__mulsf3_pse+0xae>
    1210:	88 23       	and	r24, r24
    1212:	4a f0       	brmi	.+18     	; 0x1226 <__mulsf3_pse+0x8c>
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	bb 1f       	adc	r27, r27
    121a:	66 1f       	adc	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	91 50       	subi	r25, 0x01	; 1
    1222:	50 40       	sbci	r21, 0x00	; 0
    1224:	a9 f7       	brne	.-22     	; 0x1210 <__mulsf3_pse+0x76>
    1226:	9e 3f       	cpi	r25, 0xFE	; 254
    1228:	51 05       	cpc	r21, r1
    122a:	70 f0       	brcs	.+28     	; 0x1248 <__mulsf3_pse+0xae>
    122c:	54 cf       	rjmp	.-344    	; 0x10d6 <__fp_inf>
    122e:	9e cf       	rjmp	.-196    	; 0x116c <__fp_szero>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	ec f3       	brlt	.-6      	; 0x122e <__mulsf3_pse+0x94>
    1234:	98 3e       	cpi	r25, 0xE8	; 232
    1236:	dc f3       	brlt	.-10     	; 0x122e <__mulsf3_pse+0x94>
    1238:	86 95       	lsr	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	b7 95       	ror	r27
    1240:	f7 95       	ror	r31
    1242:	e7 95       	ror	r30
    1244:	9f 5f       	subi	r25, 0xFF	; 255
    1246:	c1 f7       	brne	.-16     	; 0x1238 <__mulsf3_pse+0x9e>
    1248:	fe 2b       	or	r31, r30
    124a:	88 0f       	add	r24, r24
    124c:	91 1d       	adc	r25, r1
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	97 f9       	bld	r25, 7
    1254:	08 95       	ret

00001256 <_exit>:
    1256:	f8 94       	cli

00001258 <__stop_program>:
    1258:	ff cf       	rjmp	.-2      	; 0x1258 <__stop_program>
