
DigisparkPID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001358  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800104  00800104  000013f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ef  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3e  00000000  00000000  00002c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ceb  00000000  00000000  000036c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000043ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093b  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	42 c0       	rjmp	.+132    	; 0x86 <__ctors_end>
       2:	5c c0       	rjmp	.+184    	; 0xbc <__bad_interrupt>
       4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
       6:	5a c0       	rjmp	.+180    	; 0xbc <__bad_interrupt>
       8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
       a:	58 c0       	rjmp	.+176    	; 0xbc <__bad_interrupt>
       c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
       e:	56 c0       	rjmp	.+172    	; 0xbc <__bad_interrupt>
      10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
      12:	54 c0       	rjmp	.+168    	; 0xbc <__bad_interrupt>
      14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
      16:	52 c0       	rjmp	.+164    	; 0xbc <__bad_interrupt>
      18:	67 c1       	rjmp	.+718    	; 0x2e8 <__vector_12>
      1a:	50 c0       	rjmp	.+160    	; 0xbc <__bad_interrupt>
      1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
      1e:	4e c0       	rjmp	.+156    	; 0xbc <__bad_interrupt>
      20:	aa c2       	rjmp	.+1364   	; 0x576 <__vector_16>
      22:	4c c0       	rjmp	.+152    	; 0xbc <__bad_interrupt>
      24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
      26:	4a c0       	rjmp	.+148    	; 0xbc <__bad_interrupt>
      28:	95 c0       	rjmp	.+298    	; 0x154 <segment+0x12>
      2a:	9a c0       	rjmp	.+308    	; 0x160 <segment+0x1e>
      2c:	a0 c0       	rjmp	.+320    	; 0x16e <segment+0x2c>
      2e:	a6 c0       	rjmp	.+332    	; 0x17c <segment+0x3a>
      30:	ac c0       	rjmp	.+344    	; 0x18a <segment+0x48>
      32:	b2 c0       	rjmp	.+356    	; 0x198 <segment+0x56>
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <segment+0x64>
      36:	be c0       	rjmp	.+380    	; 0x1b4 <segment+0x72>
      38:	c4 c0       	rjmp	.+392    	; 0x1c2 <segment+0x80>
      3a:	ca c0       	rjmp	.+404    	; 0x1d0 <segment+0x8e>
      3c:	d0 c0       	rjmp	.+416    	; 0x1de <segment+0x9c>
      3e:	7b c1       	rjmp	.+758    	; 0x336 <__stack+0x37>
      40:	83 c1       	rjmp	.+774    	; 0x348 <__stack+0x49>
      42:	85 c1       	rjmp	.+778    	; 0x34e <__stack+0x4f>
      44:	8a c1       	rjmp	.+788    	; 0x35a <__stack+0x5b>
      46:	8c c1       	rjmp	.+792    	; 0x360 <__stack+0x61>
      48:	94 c1       	rjmp	.+808    	; 0x372 <__stack+0x73>
      4a:	96 c1       	rjmp	.+812    	; 0x378 <__stack+0x79>
      4c:	9b c1       	rjmp	.+822    	; 0x384 <__stack+0x85>
      4e:	9d c1       	rjmp	.+826    	; 0x38a <__stack+0x8b>
      50:	a5 c1       	rjmp	.+842    	; 0x39c <__stack+0x9d>
      52:	a7 c1       	rjmp	.+846    	; 0x3a2 <__stack+0xa3>
      54:	ac c1       	rjmp	.+856    	; 0x3ae <__stack+0xaf>
      56:	c8 c1       	rjmp	.+912    	; 0x3e8 <__stack+0xe9>
      58:	d2 c1       	rjmp	.+932    	; 0x3fe <__stack+0xff>
      5a:	d4 c1       	rjmp	.+936    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
      5c:	d6 c1       	rjmp	.+940    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
      5e:	de c1       	rjmp	.+956    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
      60:	e0 c1       	rjmp	.+960    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
      62:	e2 c1       	rjmp	.+964    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
      64:	ea c1       	rjmp	.+980    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
      66:	ec c1       	rjmp	.+984    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
      68:	ee c1       	rjmp	.+988    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
      6a:	f3 c1       	rjmp	.+998    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
      6c:	f5 c1       	rjmp	.+1002   	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
      6e:	12 c2       	rjmp	.+1060   	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
      70:	1a c2       	rjmp	.+1076   	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
      72:	1c c2       	rjmp	.+1080   	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
      74:	21 c2       	rjmp	.+1090   	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
      76:	23 c2       	rjmp	.+1094   	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
      7a:	2d c2       	rjmp	.+1114   	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
      7e:	34 c2       	rjmp	.+1128   	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
      80:	3c c2       	rjmp	.+1144   	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
      82:	3e c2       	rjmp	.+1148   	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
      84:	43 c2       	rjmp	.+1158   	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d2 e0       	ldi	r29, 0x02	; 2
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	e8 e5       	ldi	r30, 0x58	; 88
      9a:	f3 e1       	ldi	r31, 0x13	; 19
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a4 30       	cpi	r26, 0x04	; 4
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a4 e0       	ldi	r26, 0x04	; 4
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a3 36       	cpi	r26, 0x63	; 99
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	f4 d2       	rcall	.+1512   	; 0x6a2 <main>
      ba:	4c c9       	rjmp	.-3432   	; 0xfffff354 <__eeprom_end+0xff7ef354>

000000bc <__bad_interrupt>:
      bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <ADC_Init>:
      be:	ea e7       	ldi	r30, 0x7A	; 122
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	8f 6a       	ori	r24, 0xAF	; 175
      c6:	80 83       	st	Z, r24
      c8:	ac e7       	ldi	r26, 0x7C	; 124
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	80 7f       	andi	r24, 0xF0	; 240
      d0:	8c 93       	st	X, r24
      d2:	8c 91       	ld	r24, X
      d4:	8f 7b       	andi	r24, 0xBF	; 191
      d6:	8c 93       	st	X, r24
      d8:	80 81       	ld	r24, Z
      da:	80 64       	ori	r24, 0x40	; 64
      dc:	80 83       	st	Z, r24
      de:	08 95       	ret

000000e0 <timer0_Init>:

/*! \brief Initializations
 */
void timer0_Init(void)	// f = 1.6 kHz; T = 624 us
{
	TCCR0A |= (1 << CTC0);		//CTC EN
      e0:	85 b5       	in	r24, 0x25	; 37
      e2:	88 60       	ori	r24, 0x08	; 8
      e4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);	//match A interrupt EN
      e6:	ee e6       	ldi	r30, 0x6E	; 110
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	82 60       	ori	r24, 0x02	; 2
      ee:	80 83       	st	Z, r24
	OCR0A = 39;					//number to compare
      f0:	87 e2       	ldi	r24, 0x27	; 39
      f2:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << CS02);		//256 prescale
      f4:	85 b5       	in	r24, 0x25	; 37
      f6:	84 60       	ori	r24, 0x04	; 4
      f8:	85 bd       	out	0x25, r24	; 37
      fa:	08 95       	ret

000000fc <timer1_Init>:
}
//--------------------------------------------
void timer1_Init(void)
{
	TCCR1A |= (1 << WGM11);		//Fast PWM, 9-bit
      fc:	a0 e8       	ldi	r26, 0x80	; 128
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	8c 91       	ld	r24, X
     102:	82 60       	ori	r24, 0x02	; 2
     104:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM12);		//Fast PWM, 9-bit
     106:	e1 e8       	ldi	r30, 0x81	; 129
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	88 60       	ori	r24, 0x08	; 8
     10e:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);	//clear OC1B on compare
     110:	8c 91       	ld	r24, X
     112:	80 62       	ori	r24, 0x20	; 32
     114:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10);		//1 prescale
     116:	80 81       	ld	r24, Z
     118:	81 60       	ori	r24, 0x01	; 1
     11a:	80 83       	st	Z, r24
     11c:	08 95       	ret

0000011e <port_Init>:
}
//--------------------------------------------
void port_Init(void)
{	
	/*PORT A*/
	DDRA = (1 << 2) | (1 << 3);	//LDP and RDP
     11e:	8c e0       	ldi	r24, 0x0C	; 12
     120:	8d b9       	out	0x0d, r24	; 13
	PORTA &= ~(1 << 2) | (1 << 3);
     122:	8e b1       	in	r24, 0x0e	; 14
     124:	8b 7f       	andi	r24, 0xFB	; 251
     126:	8e b9       	out	0x0e, r24	; 14
	DDRA &= ~(1 << 0);			//TimeRes
     128:	8d b1       	in	r24, 0x0d	; 13
     12a:	8e 7f       	andi	r24, 0xFE	; 254
     12c:	8d b9       	out	0x0d, r24	; 13
	PORTA |= (1 << 0);			//Pull up
     12e:	8e b1       	in	r24, 0x0e	; 14
     130:	81 60       	ori	r24, 0x01	; 1
     132:	8e b9       	out	0x0e, r24	; 14
	/*PORT B*/
	DDRB = (1 << 2);			// PWM
     134:	84 e0       	ldi	r24, 0x04	; 4
     136:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     138:	15 b8       	out	0x05, r1	; 5
	/*PORT D*/
	DDRD = 0xFF;
     13a:	8f ef       	ldi	r24, 0xFF	; 255
     13c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
     13e:	1b b8       	out	0x0b, r1	; 11
     140:	08 95       	ret

00000142 <segment>:
}
//--------------------------------------------
void segment (unsigned char seg)
{
	switch(seg)
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	8b 30       	cpi	r24, 0x0B	; 11
     146:	91 05       	cpc	r25, r1
     148:	08 f0       	brcs	.+2      	; 0x14c <segment+0xa>
     14a:	4b c0       	rjmp	.+150    	; 0x1e2 <segment+0xa0>
     14c:	fc 01       	movw	r30, r24
     14e:	ec 5e       	subi	r30, 0xEC	; 236
     150:	ff 4f       	sbci	r31, 0xFF	; 255
     152:	09 94       	ijmp
	{
		case 0: PORTD &= 0b11100000; PORTD |= 0b00000000; break;
     154:	8b b1       	in	r24, 0x0b	; 11
     156:	80 7e       	andi	r24, 0xE0	; 224
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	8b b1       	in	r24, 0x0b	; 11
     15c:	8b b9       	out	0x0b, r24	; 11
     15e:	08 95       	ret
		case 1: PORTD &= 0b11100000; PORTD |= 0b00000010; break;
     160:	8b b1       	in	r24, 0x0b	; 11
     162:	80 7e       	andi	r24, 0xE0	; 224
     164:	8b b9       	out	0x0b, r24	; 11
     166:	8b b1       	in	r24, 0x0b	; 11
     168:	82 60       	ori	r24, 0x02	; 2
     16a:	8b b9       	out	0x0b, r24	; 11
     16c:	08 95       	ret
		case 2: PORTD &= 0b11100000; PORTD |= 0b00000100; break;
     16e:	8b b1       	in	r24, 0x0b	; 11
     170:	80 7e       	andi	r24, 0xE0	; 224
     172:	8b b9       	out	0x0b, r24	; 11
     174:	8b b1       	in	r24, 0x0b	; 11
     176:	84 60       	ori	r24, 0x04	; 4
     178:	8b b9       	out	0x0b, r24	; 11
     17a:	08 95       	ret
		case 3: PORTD &= 0b11100000; PORTD |= 0b00000110; break;
     17c:	8b b1       	in	r24, 0x0b	; 11
     17e:	80 7e       	andi	r24, 0xE0	; 224
     180:	8b b9       	out	0x0b, r24	; 11
     182:	8b b1       	in	r24, 0x0b	; 11
     184:	86 60       	ori	r24, 0x06	; 6
     186:	8b b9       	out	0x0b, r24	; 11
     188:	08 95       	ret
		case 4: PORTD &= 0b11100000; PORTD |= 0b00001000; break;
     18a:	8b b1       	in	r24, 0x0b	; 11
     18c:	80 7e       	andi	r24, 0xE0	; 224
     18e:	8b b9       	out	0x0b, r24	; 11
     190:	8b b1       	in	r24, 0x0b	; 11
     192:	88 60       	ori	r24, 0x08	; 8
     194:	8b b9       	out	0x0b, r24	; 11
     196:	08 95       	ret
		case 5: PORTD &= 0b11100000; PORTD |= 0b00001010; break;
     198:	8b b1       	in	r24, 0x0b	; 11
     19a:	80 7e       	andi	r24, 0xE0	; 224
     19c:	8b b9       	out	0x0b, r24	; 11
     19e:	8b b1       	in	r24, 0x0b	; 11
     1a0:	8a 60       	ori	r24, 0x0A	; 10
     1a2:	8b b9       	out	0x0b, r24	; 11
     1a4:	08 95       	ret
		case 6: PORTD &= 0b11100000; PORTD |= 0b00001100; break;
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 7e       	andi	r24, 0xE0	; 224
     1aa:	8b b9       	out	0x0b, r24	; 11
     1ac:	8b b1       	in	r24, 0x0b	; 11
     1ae:	8c 60       	ori	r24, 0x0C	; 12
     1b0:	8b b9       	out	0x0b, r24	; 11
     1b2:	08 95       	ret
		case 7: PORTD &= 0b11100000; PORTD |= 0b00001110; break;
     1b4:	8b b1       	in	r24, 0x0b	; 11
     1b6:	80 7e       	andi	r24, 0xE0	; 224
     1b8:	8b b9       	out	0x0b, r24	; 11
     1ba:	8b b1       	in	r24, 0x0b	; 11
     1bc:	8e 60       	ori	r24, 0x0E	; 14
     1be:	8b b9       	out	0x0b, r24	; 11
     1c0:	08 95       	ret
		case 8: PORTD &= 0b11100000; PORTD |= 0b00010000; break;
     1c2:	8b b1       	in	r24, 0x0b	; 11
     1c4:	80 7e       	andi	r24, 0xE0	; 224
     1c6:	8b b9       	out	0x0b, r24	; 11
     1c8:	8b b1       	in	r24, 0x0b	; 11
     1ca:	80 61       	ori	r24, 0x10	; 16
     1cc:	8b b9       	out	0x0b, r24	; 11
     1ce:	08 95       	ret
		case 9: PORTD &= 0b11100000; PORTD |= 0b00010010; break;
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	80 7e       	andi	r24, 0xE0	; 224
     1d4:	8b b9       	out	0x0b, r24	; 11
     1d6:	8b b1       	in	r24, 0x0b	; 11
     1d8:	82 61       	ori	r24, 0x12	; 18
     1da:	8b b9       	out	0x0b, r24	; 11
     1dc:	08 95       	ret
		case 10: PORTD = 0b00011000; break;		//Extraordinary state
     1de:	88 e1       	ldi	r24, 0x18	; 24
     1e0:	8b b9       	out	0x0b, r24	; 11
     1e2:	08 95       	ret

000001e4 <num>:
	}
}
//--------------------------------------------
void num (unsigned char num_send)
{
	digit1 = num_send / 10;
     1e4:	6a e0       	ldi	r22, 0x0A	; 10
     1e6:	74 d8       	rcall	.-3864   	; 0xfffff2d0 <__eeprom_end+0xff7ef2d0>
     1e8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <digit1>
	digit2 = num_send % 10;
     1ec:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <digit2>
     1f0:	08 95       	ret

000001f2 <numTemp>:
}
//--------------------------------------------
void numTemp (uint16_t Temp_send)
{
     1f2:	9c 01       	movw	r18, r24
	digit1 = Temp_send / 10000;
     1f4:	60 e1       	ldi	r22, 0x10	; 16
     1f6:	77 e2       	ldi	r23, 0x27	; 39
     1f8:	77 d8       	rcall	.-3858   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     1fa:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <digit1>
	digit2 = (Temp_send % 10000) / 1000;
     1fe:	e8 ee       	ldi	r30, 0xE8	; 232
     200:	f3 e0       	ldi	r31, 0x03	; 3
     202:	bf 01       	movw	r22, r30
     204:	71 d8       	rcall	.-3870   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     206:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <digit2>
	digit3 = (Temp_send % 1000) / 100;
     20a:	c9 01       	movw	r24, r18
     20c:	bf 01       	movw	r22, r30
     20e:	6c d8       	rcall	.-3880   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     210:	e4 e6       	ldi	r30, 0x64	; 100
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	bf 01       	movw	r22, r30
     216:	68 d8       	rcall	.-3888   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     218:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <digit3>
	digit4 = (Temp_send % 100) / 10;
     21c:	c9 01       	movw	r24, r18
     21e:	bf 01       	movw	r22, r30
     220:	63 d8       	rcall	.-3898   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     222:	6a e0       	ldi	r22, 0x0A	; 10
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	60 d8       	rcall	.-3904   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     228:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <digit4>
     22c:	08 95       	ret

0000022e <SoftStart>:
}
//--------------------------------------------
void SoftStart (void)
{
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
	if ((pause == 0) && (turnOff_stat == 0) && (refSend <= Vout_task)) refSend += 0.02;
     236:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pause>
     23a:	81 11       	cpse	r24, r1
     23c:	24 c0       	rjmp	.+72     	; 0x286 <SoftStart+0x58>
     23e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <turnOff_stat>
     242:	81 11       	cpse	r24, r1
     244:	20 c0       	rjmp	.+64     	; 0x286 <SoftStart+0x58>
     246:	c0 90 35 01 	lds	r12, 0x0135	; 0x800135 <refSend>
     24a:	d0 90 36 01 	lds	r13, 0x0136	; 0x800136 <refSend+0x1>
     24e:	e0 90 37 01 	lds	r14, 0x0137	; 0x800137 <refSend+0x2>
     252:	f0 90 38 01 	lds	r15, 0x0138	; 0x800138 <refSend+0x3>
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	44 e3       	ldi	r20, 0x34	; 52
     25c:	53 e4       	ldi	r21, 0x43	; 67
     25e:	c7 01       	movw	r24, r14
     260:	b6 01       	movw	r22, r12
     262:	7d d6       	rcall	.+3322   	; 0xf5e <__cmpsf2>
     264:	18 16       	cp	r1, r24
     266:	7c f0       	brlt	.+30     	; 0x286 <SoftStart+0x58>
     268:	2a e0       	ldi	r18, 0x0A	; 10
     26a:	37 ed       	ldi	r19, 0xD7	; 215
     26c:	43 ea       	ldi	r20, 0xA3	; 163
     26e:	5c e3       	ldi	r21, 0x3C	; 60
     270:	c7 01       	movw	r24, r14
     272:	b6 01       	movw	r22, r12
     274:	10 d6       	rcall	.+3104   	; 0xe96 <__addsf3>
     276:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <refSend>
     27a:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <refSend+0x1>
     27e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <refSend+0x2>
     282:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <refSend+0x3>
}
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	08 95       	ret

00000290 <SoftTurnoff>:
//--------------------------------------------
void SoftTurnoff (void)
{
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
	if ((turnOff_stat == 1) && (refSend > 0.0)) refSend -= 0.005;
     298:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <turnOff_stat>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	f9 f4       	brne	.+62     	; 0x2de <SoftTurnoff+0x4e>
     2a0:	c0 90 35 01 	lds	r12, 0x0135	; 0x800135 <refSend>
     2a4:	d0 90 36 01 	lds	r13, 0x0136	; 0x800136 <refSend+0x1>
     2a8:	e0 90 37 01 	lds	r14, 0x0137	; 0x800137 <refSend+0x2>
     2ac:	f0 90 38 01 	lds	r15, 0x0138	; 0x800138 <refSend+0x3>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	c7 01       	movw	r24, r14
     2b8:	b6 01       	movw	r22, r12
     2ba:	9b d7       	rcall	.+3894   	; 0x11f2 <__gesf2>
     2bc:	18 16       	cp	r1, r24
     2be:	7c f4       	brge	.+30     	; 0x2de <SoftTurnoff+0x4e>
     2c0:	2a e0       	ldi	r18, 0x0A	; 10
     2c2:	37 ed       	ldi	r19, 0xD7	; 215
     2c4:	43 ea       	ldi	r20, 0xA3	; 163
     2c6:	5b e3       	ldi	r21, 0x3B	; 59
     2c8:	c7 01       	movw	r24, r14
     2ca:	b6 01       	movw	r22, r12
     2cc:	e3 d5       	rcall	.+3014   	; 0xe94 <__subsf3>
     2ce:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <refSend>
     2d2:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <refSend+0x1>
     2d6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <refSend+0x2>
     2da:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <refSend+0x3>
}
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	08 95       	ret

000002e8 <__vector_12>:

ISR (TIMER0_COMPA_vect)							//Interrupt Service Routine
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	2f 93       	push	r18
     2f4:	3f 93       	push	r19
     2f6:	4f 93       	push	r20
     2f8:	5f 93       	push	r21
     2fa:	6f 93       	push	r22
     2fc:	7f 93       	push	r23
     2fe:	8f 93       	push	r24
     300:	9f 93       	push	r25
     302:	af 93       	push	r26
     304:	bf 93       	push	r27
     306:	ef 93       	push	r30
     308:	ff 93       	push	r31
if (pause == 0)
     30a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pause>
     30e:	81 11       	cpse	r24, r1
     310:	21 c1       	rjmp	.+578    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
	{
	if (dispMode == 1)
     312:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dispMode>
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <__stack+0x1d>
     31a:	55 c0       	rjmp	.+170    	; 0x3c6 <__stack+0xc7>
		{switch(count)
     31c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     320:	8e 2f       	mov	r24, r30
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	fc 01       	movw	r30, r24
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	ec 30       	cpi	r30, 0x0C	; 12
     32a:	f1 05       	cpc	r31, r1
     32c:	08 f0       	brcs	.+2      	; 0x330 <__stack+0x31>
     32e:	41 c0       	rjmp	.+130    	; 0x3b2 <__stack+0xb3>
     330:	e1 5e       	subi	r30, 0xE1	; 225
     332:	ff 4f       	sbci	r31, 0xFF	; 255
     334:	09 94       	ijmp
		{
		case 1: PORTD = 0b00111000; num(hour); segment(digit1); break;	//hour1 out
     336:	88 e3       	ldi	r24, 0x38	; 56
     338:	8b b9       	out	0x0b, r24	; 11
     33a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <hour>
     33e:	52 df       	rcall	.-348    	; 0x1e4 <num>
     340:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <digit1>
     344:	fe de       	rcall	.-516    	; 0x142 <segment>
     346:	35 c0       	rjmp	.+106    	; 0x3b2 <__stack+0xb3>
		case 2: segment(10); break;											//DeadTime	
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	fb de       	rcall	.-522    	; 0x142 <segment>
     34c:	32 c0       	rjmp	.+100    	; 0x3b2 <__stack+0xb3>
		case 3: PORTD = 0b01011000; segment(digit2); break;				//hour2 out
     34e:	88 e5       	ldi	r24, 0x58	; 88
     350:	8b b9       	out	0x0b, r24	; 11
     352:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     356:	f5 de       	rcall	.-534    	; 0x142 <segment>
     358:	2c c0       	rjmp	.+88     	; 0x3b2 <__stack+0xb3>
		case 4: segment(10); break;											//DeadTime	
     35a:	8a e0       	ldi	r24, 0x0A	; 10
     35c:	f2 de       	rcall	.-540    	; 0x142 <segment>
     35e:	29 c0       	rjmp	.+82     	; 0x3b2 <__stack+0xb3>
		case 5: PORTD = 0b01111000; num(min); segment(digit1); break;	//min1 out
     360:	88 e7       	ldi	r24, 0x78	; 120
     362:	8b b9       	out	0x0b, r24	; 11
     364:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <min>
     368:	3d df       	rcall	.-390    	; 0x1e4 <num>
     36a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <digit1>
     36e:	e9 de       	rcall	.-558    	; 0x142 <segment>
     370:	20 c0       	rjmp	.+64     	; 0x3b2 <__stack+0xb3>
		case 6: segment(10); break;											//DeadTime	
     372:	8a e0       	ldi	r24, 0x0A	; 10
     374:	e6 de       	rcall	.-564    	; 0x142 <segment>
     376:	1d c0       	rjmp	.+58     	; 0x3b2 <__stack+0xb3>
		case 7: PORTD = 0b10011000; segment(digit2); break;				//min2 out
     378:	88 e9       	ldi	r24, 0x98	; 152
     37a:	8b b9       	out	0x0b, r24	; 11
     37c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     380:	e0 de       	rcall	.-576    	; 0x142 <segment>
     382:	17 c0       	rjmp	.+46     	; 0x3b2 <__stack+0xb3>
		case 8: segment(10); break;											//DeadTime	
     384:	8a e0       	ldi	r24, 0x0A	; 10
     386:	dd de       	rcall	.-582    	; 0x142 <segment>
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <__stack+0xb3>
		case 9: PORTD = 0b10111000; num(sec); segment(digit1); break;	//sec1 out
     38a:	88 eb       	ldi	r24, 0xB8	; 184
     38c:	8b b9       	out	0x0b, r24	; 11
     38e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <sec>
     392:	28 df       	rcall	.-432    	; 0x1e4 <num>
     394:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <digit1>
     398:	d4 de       	rcall	.-600    	; 0x142 <segment>
     39a:	0b c0       	rjmp	.+22     	; 0x3b2 <__stack+0xb3>
		case 10: segment(10); break;										//DeadTime	
     39c:	8a e0       	ldi	r24, 0x0A	; 10
     39e:	d1 de       	rcall	.-606    	; 0x142 <segment>
     3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <__stack+0xb3>
		case 11: PORTD = 0b11011000; segment(digit2); break;			//sec2 out
     3a2:	88 ed       	ldi	r24, 0xD8	; 216
     3a4:	8b b9       	out	0x0b, r24	; 11
     3a6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     3aa:	cb de       	rcall	.-618    	; 0x142 <segment>
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <__stack+0xb3>
		case 12: segment(10); break;										//DeadTime	
     3ae:	8a e0       	ldi	r24, 0x0A	; 10
     3b0:	c8 de       	rcall	.-624    	; 0x142 <segment>
		}
		count ++;
     3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (count > 13) count = 1;
     3bc:	8e 30       	cpi	r24, 0x0E	; 14
     3be:	18 f0       	brcs	.+6      	; 0x3c6 <__stack+0xc7>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
	if (dispMode == 2)
     3c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dispMode>
     3ca:	82 30       	cpi	r24, 0x02	; 2
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <__stack+0xd1>
     3ce:	50 c0       	rjmp	.+160    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{switch(count)
     3d0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3d4:	8e 2f       	mov	r24, r30
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	31 97       	sbiw	r30, 0x01	; 1
     3dc:	ec 30       	cpi	r30, 0x0C	; 12
     3de:	f1 05       	cpc	r31, r1
     3e0:	e8 f5       	brcc	.+122    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     3e2:	e5 5d       	subi	r30, 0xD5	; 213
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	09 94       	ijmp
		{
		case 1: PORTD = 0b01111000; numTemp(Temperature);  segment(digit1); break;	//temperature out
     3e8:	88 e7       	ldi	r24, 0x78	; 120
     3ea:	8b b9       	out	0x0b, r24	; 11
     3ec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Temperature>
     3f0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Temperature+0x1>
     3f4:	fe de       	rcall	.-516    	; 0x1f2 <numTemp>
     3f6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <digit1>
     3fa:	a3 de       	rcall	.-698    	; 0x142 <segment>
     3fc:	2f c0       	rjmp	.+94     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 2: segment(10); break;
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	a0 de       	rcall	.-704    	; 0x142 <segment>
     402:	2c c0       	rjmp	.+88     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 3: segment(10); break;														//2xDeadTime
     404:	8a e0       	ldi	r24, 0x0A	; 10
     406:	9d de       	rcall	.-710    	; 0x142 <segment>
     408:	29 c0       	rjmp	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 4: PORTD = 0b10011000; segment(digit2); PORTA |= (1 << 3); break;		//RDP turn on
     40a:	88 e9       	ldi	r24, 0x98	; 152
     40c:	8b b9       	out	0x0b, r24	; 11
     40e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     412:	97 de       	rcall	.-722    	; 0x142 <segment>
     414:	8e b1       	in	r24, 0x0e	; 14
     416:	88 60       	ori	r24, 0x08	; 8
     418:	8e b9       	out	0x0e, r24	; 14
     41a:	20 c0       	rjmp	.+64     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 5: segment(10); break;	
     41c:	8a e0       	ldi	r24, 0x0A	; 10
     41e:	91 de       	rcall	.-734    	; 0x142 <segment>
     420:	1d c0       	rjmp	.+58     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 6: segment(10); break;														//2xDeadTime
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	8e de       	rcall	.-740    	; 0x142 <segment>
     426:	1a c0       	rjmp	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 7: PORTD = 0b10111000; segment(digit3); PORTA &= ~(1 << 3); break;		//RDP turn off
     428:	88 eb       	ldi	r24, 0xB8	; 184
     42a:	8b b9       	out	0x0b, r24	; 11
     42c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <digit3>
     430:	88 de       	rcall	.-752    	; 0x142 <segment>
     432:	8e b1       	in	r24, 0x0e	; 14
     434:	87 7f       	andi	r24, 0xF7	; 247
     436:	8e b9       	out	0x0e, r24	; 14
     438:	11 c0       	rjmp	.+34     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 8: segment(10); break;	
     43a:	8a e0       	ldi	r24, 0x0A	; 10
     43c:	82 de       	rcall	.-764    	; 0x142 <segment>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 9: segment(10); break;														//2xDeadTime
     440:	8a e0       	ldi	r24, 0x0A	; 10
     442:	7f de       	rcall	.-770    	; 0x142 <segment>
     444:	0b c0       	rjmp	.+22     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 10: PORTD = 0b11011000; segment(digit4); break;
     446:	88 ed       	ldi	r24, 0xD8	; 216
     448:	8b b9       	out	0x0b, r24	; 11
     44a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <digit4>
     44e:	79 de       	rcall	.-782    	; 0x142 <segment>
     450:	05 c0       	rjmp	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 11: segment(10); break;	
     452:	8a e0       	ldi	r24, 0x0A	; 10
     454:	76 de       	rcall	.-788    	; 0x142 <segment>
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		case 12: segment(10); break;													//2xDeadTime
     458:	8a e0       	ldi	r24, 0x0A	; 10
     45a:	73 de       	rcall	.-794    	; 0x142 <segment>
		}
		count ++;
     45c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (count > 13) count = 1;
     466:	8e 30       	cpi	r24, 0x0E	; 14
     468:	18 f0       	brcs	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		 
	if (dispMode == 3)
     470:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dispMode>
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	09 f0       	breq	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	55 c0       	rjmp	.+170    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		{switch(count)
     47a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     47e:	8e 2f       	mov	r24, r30
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	31 97       	sbiw	r30, 0x01	; 1
     486:	ec 30       	cpi	r30, 0x0C	; 12
     488:	f1 05       	cpc	r31, r1
     48a:	08 f0       	brcs	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	41 c0       	rjmp	.+130    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48e:	e9 5c       	subi	r30, 0xC9	; 201
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	09 94       	ijmp
		{
		case 1: num(hourCAD); PORTD = 0b00111000; segment(digit2); break;	//hour CAD
     494:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <hourCAD>
     498:	a5 de       	rcall	.-694    	; 0x1e4 <num>
     49a:	88 e3       	ldi	r24, 0x38	; 56
     49c:	8b b9       	out	0x0b, r24	; 11
     49e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     4a2:	4f de       	rcall	.-866    	; 0x142 <segment>
     4a4:	35 c0       	rjmp	.+106    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 2: segment(10); break;												//DeadTime	
     4a6:	8a e0       	ldi	r24, 0x0A	; 10
     4a8:	4c de       	rcall	.-872    	; 0x142 <segment>
     4aa:	32 c0       	rjmp	.+100    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 3: PORTD = 0b01011000; segment(digit2); break;
     4ac:	88 e5       	ldi	r24, 0x58	; 88
     4ae:	8b b9       	out	0x0b, r24	; 11
     4b0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     4b4:	46 de       	rcall	.-884    	; 0x142 <segment>
     4b6:	2c c0       	rjmp	.+88     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 4: segment(10); break;												//DeadTime
     4b8:	8a e0       	ldi	r24, 0x0A	; 10
     4ba:	43 de       	rcall	.-890    	; 0x142 <segment>
     4bc:	29 c0       	rjmp	.+82     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 5: num(minCAD); PORTD = 0b01111000; segment(digit2); break;	//min CAD
     4be:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <minCAD>
     4c2:	90 de       	rcall	.-736    	; 0x1e4 <num>
     4c4:	88 e7       	ldi	r24, 0x78	; 120
     4c6:	8b b9       	out	0x0b, r24	; 11
     4c8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     4cc:	3a de       	rcall	.-908    	; 0x142 <segment>
     4ce:	20 c0       	rjmp	.+64     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 6: segment(10); break;												//DeadTime
     4d0:	8a e0       	ldi	r24, 0x0A	; 10
     4d2:	37 de       	rcall	.-914    	; 0x142 <segment>
     4d4:	1d c0       	rjmp	.+58     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 7: PORTD = 0b10011000; segment(digit2); break;
     4d6:	88 e9       	ldi	r24, 0x98	; 152
     4d8:	8b b9       	out	0x0b, r24	; 11
     4da:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     4de:	31 de       	rcall	.-926    	; 0x142 <segment>
     4e0:	17 c0       	rjmp	.+46     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 8: segment(10); break; 											//DeadTime
     4e2:	8a e0       	ldi	r24, 0x0A	; 10
     4e4:	2e de       	rcall	.-932    	; 0x142 <segment>
     4e6:	14 c0       	rjmp	.+40     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 9: num(secCAD); PORTD = 0b10111000; segment(digit2); break;	//sec CAD
     4e8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <secCAD>
     4ec:	7b de       	rcall	.-778    	; 0x1e4 <num>
     4ee:	88 eb       	ldi	r24, 0xB8	; 184
     4f0:	8b b9       	out	0x0b, r24	; 11
     4f2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     4f6:	25 de       	rcall	.-950    	; 0x142 <segment>
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 10: segment(10); break;											//DeadTime
     4fa:	8a e0       	ldi	r24, 0x0A	; 10
     4fc:	22 de       	rcall	.-956    	; 0x142 <segment>
     4fe:	08 c0       	rjmp	.+16     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 11: PORTD = 0b11011000; segment(digit2); break;
     500:	88 ed       	ldi	r24, 0xD8	; 216
     502:	8b b9       	out	0x0b, r24	; 11
     504:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <digit2>
     508:	1c de       	rcall	.-968    	; 0x142 <segment>
     50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		case 12: segment(10); break;											//DeadTime
     50c:	8a e0       	ldi	r24, 0x0A	; 10
     50e:	19 de       	rcall	.-974    	; 0x142 <segment>
		}		
		count ++;
     510:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     514:	8f 5f       	subi	r24, 0xFF	; 255
     516:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (count > 13) count = 1;
     51a:	8e 30       	cpi	r24, 0x0E	; 14
     51c:	18 f0       	brcs	.+6      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		} 	
	generalCount ++;
     524:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <generalCount>
     528:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <generalCount+0x1>
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <generalCount+0x1>
     532:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <generalCount>
		//------ Sampling Time Interval ------//
		static unsigned char i = 0;
		if(i < TIME_INTERVAL) i++;
     536:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <i.1892>
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	20 f4       	brcc	.+8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i.1892>
     544:	07 c0       	rjmp	.+14     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		else
		{
			gFlags.pidTimer = TRUE;
     546:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gFlags>
     54a:	81 60       	ori	r24, 0x01	; 1
     54c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <gFlags>
			i = 0;
     550:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i.1892>
		}
	}
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	7f 91       	pop	r23
     562:	6f 91       	pop	r22
     564:	5f 91       	pop	r21
     566:	4f 91       	pop	r20
     568:	3f 91       	pop	r19
     56a:	2f 91       	pop	r18
     56c:	0f 90       	pop	r0
     56e:	0f be       	out	0x3f, r0	; 63
     570:	0f 90       	pop	r0
     572:	1f 90       	pop	r1
     574:	18 95       	reti

00000576 <__vector_16>:
//--------------------------------------------
ISR (ADC_vect)
{
     576:	1f 92       	push	r1
     578:	0f 92       	push	r0
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	0f 92       	push	r0
     57e:	11 24       	eor	r1, r1
     580:	2f 93       	push	r18
     582:	3f 93       	push	r19
     584:	4f 93       	push	r20
     586:	5f 93       	push	r21
     588:	6f 93       	push	r22
     58a:	7f 93       	push	r23
     58c:	8f 93       	push	r24
     58e:	9f 93       	push	r25
     590:	af 93       	push	r26
     592:	bf 93       	push	r27
     594:	ef 93       	push	r30
     596:	ff 93       	push	r31
	/*filtering (cause the overflow)*/
	static uint8_t ADC_cnt = 0;
	/*V1 source*/
	if(ADC_cnt < ADC_samles)	// get ADC_sum by x samples
     598:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     59c:	85 30       	cpi	r24, 0x05	; 5
     59e:	e0 f4       	brcc	.+56     	; 0x5d8 <__vector_16+0x62>
	{
		ADC_sum += ADC;
     5a0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
     5a4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
     5a8:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <ADC_sum>
     5ac:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <ADC_sum+0x1>
     5b0:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <ADC_sum+0x2>
     5b4:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <ADC_sum+0x3>
     5b8:	42 0f       	add	r20, r18
     5ba:	53 1f       	adc	r21, r19
     5bc:	61 1d       	adc	r22, r1
     5be:	71 1d       	adc	r23, r1
     5c0:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <ADC_sum>
     5c4:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <ADC_sum+0x1>
     5c8:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <ADC_sum+0x2>
     5cc:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <ADC_sum+0x3>
		ADC_cnt++;
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     5d6:	41 c0       	rjmp	.+130    	; 0x65a <__vector_16+0xe4>
	}
	else
	{
		ADC_cnt = 0;
     5d8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		ADC_mean = ADC_sum / ADC_samles;
     5dc:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <ADC_sum>
     5e0:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <ADC_sum+0x1>
     5e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADC_sum+0x2>
     5e8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADC_sum+0x3>
     5ec:	25 e0       	ldi	r18, 0x05	; 5
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	8d d6       	rcall	.+3354   	; 0x1310 <__udivmodsi4>
     5f6:	ca 01       	movw	r24, r20
     5f8:	b9 01       	movw	r22, r18
     5fa:	49 d5       	rcall	.+2706   	; 0x108e <__floatunsisf>
     5fc:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <ADC_mean>
     600:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <ADC_mean+0x1>
     604:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_mean+0x2>
     608:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_mean+0x3>
		ADC_sum = 0;
     60c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_sum>
     610:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADC_sum+0x1>
     614:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ADC_sum+0x2>
     618:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ADC_sum+0x3>
		Vsense = (ADC_mean * Vref) / 1023;
     61c:	2d ec       	ldi	r18, 0xCD	; 205
     61e:	3c ec       	ldi	r19, 0xCC	; 204
     620:	4c e8       	ldi	r20, 0x8C	; 140
     622:	5f e3       	ldi	r21, 0x3F	; 63
     624:	ea d5       	rcall	.+3028   	; 0x11fa <__mulsf3>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 ec       	ldi	r19, 0xC0	; 192
     62a:	4f e7       	ldi	r20, 0x7F	; 127
     62c:	54 e4       	ldi	r21, 0x44	; 68
     62e:	9b d4       	rcall	.+2358   	; 0xf66 <__divsf3>
     630:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <Vsense>
     634:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <Vsense+0x1>
     638:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Vsense+0x2>
     63c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <Vsense+0x3>
		Vout = Vsense * ((R1_value + R2_value) / R2_value);
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	43 e5       	ldi	r20, 0x53	; 83
     646:	53 e4       	ldi	r21, 0x43	; 67
     648:	d8 d5       	rcall	.+2992   	; 0x11fa <__mulsf3>
     64a:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <Vout>
     64e:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <Vout+0x1>
     652:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <Vout+0x2>
     656:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <Vout+0x3>
	}
	if (Vout > 200.0) OCR1B = 0;	// Vout Limitation
     65a:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Vout>
     65e:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <Vout+0x1>
     662:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Vout+0x2>
     666:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Vout+0x3>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	48 e4       	ldi	r20, 0x48	; 72
     670:	53 e4       	ldi	r21, 0x43	; 67
     672:	bf d5       	rcall	.+2942   	; 0x11f2 <__gesf2>
     674:	18 16       	cp	r1, r24
     676:	24 f4       	brge	.+8      	; 0x680 <__vector_16+0x10a>
     678:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     67c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>

// 	/*Without filtering*/	
// 	Vsense = (ADC * Vref) / 1023;
// 	Vout = Vsense * ((R1_value + R2_value) / R2_value);
// 	if (Vout > 200) OCR1B = 0;	// Vout Limitation
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <main>:
/******************************************************************************************************
												Main
******************************************************************************************************/
int main(void)
{
	port_Init();
     6a2:	3d dd       	rcall	.-1414   	; 0x11e <port_Init>
	timer0_Init();
     6a4:	1d dd       	rcall	.-1478   	; 0xe0 <timer0_Init>
	timer1_Init();
     6a6:	2a dd       	rcall	.-1452   	; 0xfc <timer1_Init>
  	ADC_Init();
     6a8:	0a dd       	rcall	.-1516   	; 0xbe <ADC_Init>
	pid_Init(K_P, K_I, K_D, &pidData);
     6aa:	0f 2e       	mov	r0, r31
     6ac:	f6 e4       	ldi	r31, 0x46	; 70
     6ae:	cf 2e       	mov	r12, r31
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	df 2e       	mov	r13, r31
     6b4:	f0 2d       	mov	r31, r0
     6b6:	e1 2c       	mov	r14, r1
     6b8:	f1 2c       	mov	r15, r1
     6ba:	87 01       	movw	r16, r14
     6bc:	2d ec       	ldi	r18, 0xCD	; 205
     6be:	3c ec       	ldi	r19, 0xCC	; 204
     6c0:	4c e4       	ldi	r20, 0x4C	; 76
     6c2:	5d e3       	ldi	r21, 0x3D	; 61
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 ea       	ldi	r24, 0xA0	; 160
     6ca:	90 e4       	ldi	r25, 0x40	; 64
     6cc:	5c d2       	rcall	.+1208   	; 0xb86 <pid_Init>
	I2C_Init();
     6ce:	b4 d3       	rcall	.+1896   	; 0xe38 <I2C_Init>
	sei();
     6d0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	83 ed       	ldi	r24, 0xD3	; 211
     6d6:	90 e3       	ldi	r25, 0x30	; 48
     6d8:	21 50       	subi	r18, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <main+0x36>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <main+0x40>
     6e2:	00 00       	nop
	_delay_ms(1000);
	// Read reference temperature
	I2C_StartCondition();
     6e4:	ad d3       	rcall	.+1882   	; 0xe40 <I2C_StartCondition>
	I2C_SendByte(0b10010000);			//device address + write bit
     6e6:	80 e9       	ldi	r24, 0x90	; 144
     6e8:	b7 d3       	rcall	.+1902   	; 0xe58 <I2C_SendByte>
	I2C_SendByte(0x00);					//pointer
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	b5 d3       	rcall	.+1898   	; 0xe58 <I2C_SendByte>
	I2C_StartCondition();				//restart
     6ee:	a8 d3       	rcall	.+1872   	; 0xe40 <I2C_StartCondition>
	I2C_SendByte(0b10010001);			//device address + read bit
     6f0:	81 e9       	ldi	r24, 0x91	; 145
     6f2:	b2 d3       	rcall	.+1892   	; 0xe58 <I2C_SendByte>
	MSByte = I2C_ReadByte();
     6f4:	bb d3       	rcall	.+1910   	; 0xe6c <I2C_ReadByte>
     6f6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <MSByte>
	LSByte = I2C_ReadLastByte();
     6fa:	c2 d3       	rcall	.+1924   	; 0xe80 <I2C_ReadLastByte>
     6fc:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <LSByte>
	I2C_StopCondition();
     700:	a7 d3       	rcall	.+1870   	; 0xe50 <I2C_StopCondition>
	Temperature_Ref = 1000 * (((((MSByte << 8) | LSByte) >> 5) & 0x7FF) * 0.125);
     702:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <MSByte>
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	76 2f       	mov	r23, r22
     70a:	66 27       	eor	r22, r22
     70c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <LSByte>
     710:	68 2b       	or	r22, r24
     712:	76 95       	lsr	r23
     714:	67 95       	ror	r22
     716:	72 95       	swap	r23
     718:	62 95       	swap	r22
     71a:	6f 70       	andi	r22, 0x0F	; 15
     71c:	67 27       	eor	r22, r23
     71e:	7f 70       	andi	r23, 0x0F	; 15
     720:	67 27       	eor	r22, r23
     722:	07 2e       	mov	r0, r23
     724:	00 0c       	add	r0, r0
     726:	88 0b       	sbc	r24, r24
     728:	99 0b       	sbc	r25, r25
     72a:	b3 d4       	rcall	.+2406   	; 0x1092 <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	5e e3       	ldi	r21, 0x3E	; 62
     734:	62 d5       	rcall	.+2756   	; 0x11fa <__mulsf3>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4a e7       	ldi	r20, 0x7A	; 122
     73c:	54 e4       	ldi	r21, 0x44	; 68
     73e:	5d d5       	rcall	.+2746   	; 0x11fa <__mulsf3>
     740:	7a d4       	rcall	.+2292   	; 0x1036 <__fixunssfsi>
     742:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <Temperature_Ref+0x1>
     746:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <Temperature_Ref>
	I2C_SendByte(RTC_DECtoBCD(15));		//hour
	I2C_StopCondition();
#endif

	while(1){
	SoftStart();
     74a:	71 dd       	rcall	.-1310   	; 0x22e <SoftStart>
	//refSend = Vout_task;	// manual control
	 
	//read time
	I2C_StartCondition();
     74c:	79 d3       	rcall	.+1778   	; 0xe40 <I2C_StartCondition>
	I2C_SendByte(0xA2);					//device address + write bit
     74e:	82 ea       	ldi	r24, 0xA2	; 162
     750:	83 d3       	rcall	.+1798   	; 0xe58 <I2C_SendByte>
	I2C_SendByte(0x02);					//pointer
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	81 d3       	rcall	.+1794   	; 0xe58 <I2C_SendByte>
	I2C_StartCondition();				//restart
     756:	74 d3       	rcall	.+1768   	; 0xe40 <I2C_StartCondition>
	I2C_SendByte(0xA3);					//device address + read bit
     758:	83 ea       	ldi	r24, 0xA3	; 163
     75a:	7e d3       	rcall	.+1788   	; 0xe58 <I2C_SendByte>
	tempsec = ((I2C_ReadByte()) & 0b01111111);
     75c:	87 d3       	rcall	.+1806   	; 0xe6c <I2C_ReadByte>
     75e:	8f 77       	andi	r24, 0x7F	; 127
     760:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tempsec>
	tempmin = ((I2C_ReadByte()) & 0b01111111);
     764:	83 d3       	rcall	.+1798   	; 0xe6c <I2C_ReadByte>
     766:	8f 77       	andi	r24, 0x7F	; 127
     768:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tempmin>
	temphour = ((I2C_ReadLastByte()) & 0b00111111);
     76c:	89 d3       	rcall	.+1810   	; 0xe80 <I2C_ReadLastByte>
     76e:	8f 73       	andi	r24, 0x3F	; 63
     770:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <temphour>
	I2C_StopCondition();
     774:	6d d3       	rcall	.+1754   	; 0xe50 <I2C_StopCondition>
	sec = RTC_BCDtoDEC(tempsec);
     776:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tempsec>
     77a:	46 d3       	rcall	.+1676   	; 0xe08 <RTC_BCDtoDEC>
     77c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <sec>
	min = RTC_BCDtoDEC(tempmin);
     780:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tempmin>
     784:	41 d3       	rcall	.+1666   	; 0xe08 <RTC_BCDtoDEC>
     786:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <min>
	hour = RTC_BCDtoDEC(temphour);
     78a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <temphour>
     78e:	3c d3       	rcall	.+1656   	; 0xe08 <RTC_BCDtoDEC>
     790:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <hour>
	I2C_SendByte(RTC_DECtoBCD(sec + 7));		//sec
	I2C_StopCondition();
	}*/
	
	//TimeRes
	if (!(PINA & (1 << PINA0)))
     794:	60 99       	sbic	0x0c, 0	; 12
     796:	19 c0       	rjmp	.+50     	; 0x7ca <main+0x128>
	{
		if (butcount < 0xFF) butcount ++;
     798:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <butcount>
     79c:	8f 3f       	cpi	r24, 0xFF	; 255
     79e:	21 f0       	breq	.+8      	; 0x7a8 <main+0x106>
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <butcount>
     7a6:	11 c0       	rjmp	.+34     	; 0x7ca <main+0x128>
		else
		{
		I2C_StartCondition();
     7a8:	4b d3       	rcall	.+1686   	; 0xe40 <I2C_StartCondition>
		I2C_SendByte(0xA2);					//device address + write bit
     7aa:	82 ea       	ldi	r24, 0xA2	; 162
     7ac:	55 d3       	rcall	.+1706   	; 0xe58 <I2C_SendByte>
		I2C_SendByte(0x02);					//pointer
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	53 d3       	rcall	.+1702   	; 0xe58 <I2C_SendByte>
		I2C_SendByte(RTC_DECtoBCD(00));		//sec
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	35 d3       	rcall	.+1642   	; 0xe20 <RTC_DECtoBCD>
     7b6:	50 d3       	rcall	.+1696   	; 0xe58 <I2C_SendByte>
		I2C_SendByte(RTC_DECtoBCD(00));		//min
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	32 d3       	rcall	.+1636   	; 0xe20 <RTC_DECtoBCD>
     7bc:	4d d3       	rcall	.+1690   	; 0xe58 <I2C_SendByte>
		I2C_SendByte(RTC_DECtoBCD(20));		//hour
     7be:	84 e1       	ldi	r24, 0x14	; 20
     7c0:	2f d3       	rcall	.+1630   	; 0xe20 <RTC_DECtoBCD>
     7c2:	4a d3       	rcall	.+1684   	; 0xe58 <I2C_SendByte>
		I2C_StopCondition();
     7c4:	45 d3       	rcall	.+1674   	; 0xe50 <I2C_StopCondition>
		butcount = 0;
     7c6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <butcount>
		}
	}  	
	
	//Daily turnoff
	if (hour < 6)
     7ca:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <hour>
     7ce:	86 30       	cpi	r24, 0x06	; 6
     7d0:	f8 f5       	brcc	.+126    	; 0x850 <main+0x1ae>
	{
		turnOff_stat = 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <turnOff_stat>
		SoftTurnoff();
     7d8:	5b dd       	rcall	.-1354   	; 0x290 <SoftTurnoff>
		if (refSend < 100.0)
     7da:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <refSend>
     7de:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <refSend+0x1>
     7e2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <refSend+0x2>
     7e6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <refSend+0x3>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	48 ec       	ldi	r20, 0xC8	; 200
     7f0:	52 e4       	ldi	r21, 0x42	; 66
     7f2:	b5 d3       	rcall	.+1898   	; 0xf5e <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <main+0x158>
     7f8:	3f c0       	rjmp	.+126    	; 0x878 <main+0x1d6>
		{
			pause = 1, segment(10);
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <pause>
     800:	8a e0       	ldi	r24, 0x0A	; 10
     802:	9f dc       	rcall	.-1730   	; 0x142 <segment>
			if (OC1B_status == Connected)	// PWM turnoff
     804:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OC1B_status>
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	59 f4       	brne	.+22     	; 0x822 <main+0x180>
			{
			OCR1B = 0;
     80c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     810:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
			TCCR1A &= ~(1 << COM1B1);
     814:	e0 e8       	ldi	r30, 0x80	; 128
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	8f 7d       	andi	r24, 0xDF	; 223
     81c:	80 83       	st	Z, r24
			OC1B_status = Disconnected;	
     81e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <OC1B_status>
			}
			if (sec % 2)	// turnoff status LED blink
     822:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <sec>
     826:	80 ff       	sbrs	r24, 0
     828:	27 c0       	rjmp	.+78     	; 0x878 <main+0x1d6>
			{
			PORTD |= (1 << 0), _delay_us(100), PORTD &= ~(1 << 0), _delay_us(200);
     82a:	8b b1       	in	r24, 0x0b	; 11
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     830:	8f e8       	ldi	r24, 0x8F	; 143
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <main+0x192>
     838:	00 c0       	rjmp	.+0      	; 0x83a <main+0x198>
     83a:	00 00       	nop
     83c:	8b b1       	in	r24, 0x0b	; 11
     83e:	8e 7f       	andi	r24, 0xFE	; 254
     840:	8b b9       	out	0x0b, r24	; 11
     842:	8f e1       	ldi	r24, 0x1F	; 31
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <main+0x1a4>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <main+0x1aa>
     84c:	00 00       	nop
     84e:	14 c0       	rjmp	.+40     	; 0x878 <main+0x1d6>
			}
		}
	}
	else
	{
	pause = 0, turnOff_stat = 0;
     850:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <pause>
     854:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <turnOff_stat>
	if (OC1B_status == Disconnected)	// PWM turn on
     858:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <OC1B_status>
     85c:	81 11       	cpse	r24, r1
     85e:	0c c0       	rjmp	.+24     	; 0x878 <main+0x1d6>
		{
		OCR1B = 0;
     860:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     864:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
		TCCR1A |= (1 << COM1B1);	// clear OC1B on compare
     868:	e0 e8       	ldi	r30, 0x80	; 128
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	80 62       	ori	r24, 0x20	; 32
     870:	80 83       	st	Z, r24
		OC1B_status = Connected;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <OC1B_status>
		}
	}
	
/***************************************************************************************************/	
	if (pause == 0)
     878:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pause>
     87c:	81 11       	cpse	r24, r1
     87e:	65 cf       	rjmp	.-310    	; 0x74a <main+0xa8>
	{
		//Run PID calculations once every PID timer timeout
		if(gFlags.pidTimer)
     880:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gFlags>
     884:	80 ff       	sbrs	r24, 0
     886:	44 c0       	rjmp	.+136    	; 0x910 <main+0x26e>
		{
			measurementValue = Vout;
     888:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <Vout>
     88c:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <Vout+0x1>
     890:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <Vout+0x2>
     894:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <Vout+0x3>
     898:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <measurementValue>
     89c:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <measurementValue+0x1>
     8a0:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <measurementValue+0x2>
     8a4:	50 93 34 01 	sts	0x0134, r21	; 0x800134 <measurementValue+0x3>
			inputValue = pid_Controller(refSend, measurementValue, &pidData);
     8a8:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <refSend>
     8ac:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <refSend+0x1>
     8b0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <refSend+0x2>
     8b4:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <refSend+0x3>
     8b8:	06 e4       	ldi	r16, 0x46	; 70
     8ba:	11 e0       	ldi	r17, 0x01	; 1
     8bc:	96 d1       	rcall	.+812    	; 0xbea <pid_Controller>
     8be:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <inputValue>
     8c2:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <inputValue+0x1>
     8c6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <inputValue+0x2>
     8ca:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <inputValue+0x3>
			Duty = inputValue * 0.368;	// define max duty 70%:(70)/MAX_INT
     8ce:	2f e7       	ldi	r18, 0x7F	; 127
     8d0:	3a e6       	ldi	r19, 0x6A	; 106
     8d2:	4c eb       	ldi	r20, 0xBC	; 188
     8d4:	5e e3       	ldi	r21, 0x3E	; 62
     8d6:	91 d4       	rcall	.+2338   	; 0x11fa <__mulsf3>
     8d8:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <Duty>
     8dc:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <Duty+0x1>
     8e0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Duty+0x2>
     8e4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <Duty+0x3>
			OCR1B = (Duty / 100) * 512;
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	48 ec       	ldi	r20, 0xC8	; 200
     8ee:	52 e4       	ldi	r21, 0x42	; 66
     8f0:	3a d3       	rcall	.+1652   	; 0xf66 <__divsf3>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	54 e4       	ldi	r21, 0x44	; 68
     8fa:	7f d4       	rcall	.+2302   	; 0x11fa <__mulsf3>
     8fc:	9c d3       	rcall	.+1848   	; 0x1036 <__fixunssfsi>
     8fe:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fe08b>
     902:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fe08a>
			gFlags.pidTimer = FALSE;
     906:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gFlags>
     90a:	8e 7f       	andi	r24, 0xFE	; 254
     90c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <gFlags>
		}
//--------------- Temperature sensor processing ---------------//
		//read temperature
		if (sec == 9)
     910:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <sec>
     914:	89 30       	cpi	r24, 0x09	; 9
     916:	09 f0       	breq	.+2      	; 0x91a <main+0x278>
     918:	51 c0       	rjmp	.+162    	; 0x9bc <main+0x31a>
		{
			if (Temp_Ready)
     91a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Temp_Ready>
     91e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Temp_Ready+0x1>
     922:	89 2b       	or	r24, r25
     924:	09 f4       	brne	.+2      	; 0x928 <main+0x286>
     926:	42 c0       	rjmp	.+132    	; 0x9ac <main+0x30a>
			{
			I2C_StartCondition();
     928:	8b d2       	rcall	.+1302   	; 0xe40 <I2C_StartCondition>
			I2C_SendByte(0b10010000);			//device address + write bit
     92a:	80 e9       	ldi	r24, 0x90	; 144
     92c:	95 d2       	rcall	.+1322   	; 0xe58 <I2C_SendByte>
			I2C_SendByte(0x00);					//pointer
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	93 d2       	rcall	.+1318   	; 0xe58 <I2C_SendByte>
			I2C_StartCondition();				//restart
     932:	86 d2       	rcall	.+1292   	; 0xe40 <I2C_StartCondition>
			I2C_SendByte(0b10010001);			//device address + read bit
     934:	81 e9       	ldi	r24, 0x91	; 145
     936:	90 d2       	rcall	.+1312   	; 0xe58 <I2C_SendByte>
			MSByte = I2C_ReadByte();
     938:	99 d2       	rcall	.+1330   	; 0xe6c <I2C_ReadByte>
     93a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <MSByte>
			LSByte = I2C_ReadLastByte();
     93e:	a0 d2       	rcall	.+1344   	; 0xe80 <I2C_ReadLastByte>
     940:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <LSByte>
			I2C_StopCondition();
     944:	85 d2       	rcall	.+1290   	; 0xe50 <I2C_StopCondition>
			Temperature = 1000 * ((((((MSByte << 8) | LSByte) >> 5) & 0x7FF) * 0.125) - Temp_Comp);	
     946:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <MSByte>
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	76 2f       	mov	r23, r22
     94e:	66 27       	eor	r22, r22
     950:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <LSByte>
     954:	68 2b       	or	r22, r24
     956:	76 95       	lsr	r23
     958:	67 95       	ror	r22
     95a:	72 95       	swap	r23
     95c:	62 95       	swap	r22
     95e:	6f 70       	andi	r22, 0x0F	; 15
     960:	67 27       	eor	r22, r23
     962:	7f 70       	andi	r23, 0x0F	; 15
     964:	67 27       	eor	r22, r23
     966:	07 2e       	mov	r0, r23
     968:	00 0c       	add	r0, r0
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	91 d3       	rcall	.+1826   	; 0x1092 <__floatsisf>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	5e e3       	ldi	r21, 0x3E	; 62
     978:	40 d4       	rcall	.+2176   	; 0x11fa <__mulsf3>
     97a:	6b 01       	movw	r12, r22
     97c:	7c 01       	movw	r14, r24
     97e:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Temp_Comp>
     982:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <Temp_Comp+0x1>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	81 d3       	rcall	.+1794   	; 0x108e <__floatunsisf>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	7f d2       	rcall	.+1278   	; 0xe94 <__subsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	4a e7       	ldi	r20, 0x7A	; 122
     99c:	54 e4       	ldi	r21, 0x44	; 68
     99e:	2d d4       	rcall	.+2138   	; 0x11fa <__mulsf3>
     9a0:	4a d3       	rcall	.+1684   	; 0x1036 <__fixunssfsi>
     9a2:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <Temperature+0x1>
     9a6:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <Temperature>
     9aa:	08 c0       	rjmp	.+16     	; 0x9bc <main+0x31a>
			}
			else Temperature = Temperature_Ref;
     9ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Temperature_Ref>
     9b0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Temperature_Ref+0x1>
     9b4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Temperature+0x1>
     9b8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Temperature>
		} 
		//display temperature
		if ((sec > 9) && (sec < 15)) dispMode = 2;
     9bc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <sec>
     9c0:	96 ef       	ldi	r25, 0xF6	; 246
     9c2:	98 0f       	add	r25, r24
     9c4:	95 30       	cpi	r25, 0x05	; 5
     9c6:	18 f4       	brcc	.+6      	; 0x9ce <main+0x32c>
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <dispMode>
		if (sec == 15) dispMode = 1, PORTA &= ~(1 << 3);
     9ce:	8f 30       	cpi	r24, 0x0F	; 15
     9d0:	31 f4       	brne	.+12     	; 0x9de <main+0x33c>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dispMode>
     9d8:	8e b1       	in	r24, 0x0e	; 14
     9da:	87 7f       	andi	r24, 0xF7	; 247
     9dc:	8e b9       	out	0x0e, r24	; 14
		//temperature compensation counter (freq = 1Hz)
		if (!Temp_Ready)
     9de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Temp_Ready>
     9e2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Temp_Ready+0x1>
     9e6:	89 2b       	or	r24, r25
     9e8:	09 f0       	breq	.+2      	; 0x9ec <main+0x34a>
     9ea:	81 c0       	rjmp	.+258    	; 0xaee <main+0x44c>
		{
			if ((sec % 2) && (Temp_Comp_Cnt_Perm == 1)) Temp_Comp_Cnt ++, Temp_Comp_Cnt_Perm = 0;
     9ec:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <sec>
     9f0:	98 2f       	mov	r25, r24
     9f2:	91 70       	andi	r25, 0x01	; 1
     9f4:	80 ff       	sbrs	r24, 0
     9f6:	15 c0       	rjmp	.+42     	; 0xa22 <main+0x380>
     9f8:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <Temp_Comp_Cnt_Perm>
     9fc:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <Temp_Comp_Cnt_Perm+0x1>
     a00:	21 30       	cpi	r18, 0x01	; 1
     a02:	31 05       	cpc	r19, r1
     a04:	71 f4       	brne	.+28     	; 0xa22 <main+0x380>
     a06:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <Temp_Comp_Cnt>
     a0a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <Temp_Comp_Cnt+0x1>
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <Temp_Comp_Cnt+0x1>
     a16:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <Temp_Comp_Cnt>
     a1a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Temp_Comp_Cnt_Perm+0x1>
     a1e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Temp_Comp_Cnt_Perm>
			if (!(sec % 2) && (Temp_Comp_Cnt_Perm == 0)) Temp_Comp_Cnt ++, Temp_Comp_Cnt_Perm = 1;
     a22:	91 11       	cpse	r25, r1
     a24:	15 c0       	rjmp	.+42     	; 0xa50 <main+0x3ae>
     a26:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Temp_Comp_Cnt_Perm>
     a2a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <Temp_Comp_Cnt_Perm+0x1>
     a2e:	89 2b       	or	r24, r25
     a30:	79 f4       	brne	.+30     	; 0xa50 <main+0x3ae>
     a32:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Temp_Comp_Cnt>
     a36:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Temp_Comp_Cnt+0x1>
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Temp_Comp_Cnt+0x1>
     a40:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Temp_Comp_Cnt>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <Temp_Comp_Cnt_Perm+0x1>
     a4c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Temp_Comp_Cnt_Perm>
			if (Temp_Comp_Cnt == 3600)
     a50:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Temp_Comp_Cnt>
     a54:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Temp_Comp_Cnt+0x1>
     a58:	80 31       	cpi	r24, 0x10	; 16
     a5a:	9e 40       	sbci	r25, 0x0E	; 14
     a5c:	09 f0       	breq	.+2      	; 0xa60 <main+0x3be>
     a5e:	47 c0       	rjmp	.+142    	; 0xaee <main+0x44c>
			{
				I2C_StartCondition();
     a60:	ef d1       	rcall	.+990    	; 0xe40 <I2C_StartCondition>
				I2C_SendByte(0b10010000);			//device address + write bit
     a62:	80 e9       	ldi	r24, 0x90	; 144
     a64:	f9 d1       	rcall	.+1010   	; 0xe58 <I2C_SendByte>
				I2C_SendByte(0x00);					//pointer
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	f7 d1       	rcall	.+1006   	; 0xe58 <I2C_SendByte>
				I2C_StartCondition();				//restart
     a6a:	ea d1       	rcall	.+980    	; 0xe40 <I2C_StartCondition>
				I2C_SendByte(0b10010001);			//device address + read bit
     a6c:	81 e9       	ldi	r24, 0x91	; 145
     a6e:	f4 d1       	rcall	.+1000   	; 0xe58 <I2C_SendByte>
				MSByte = I2C_ReadByte();
     a70:	fd d1       	rcall	.+1018   	; 0xe6c <I2C_ReadByte>
     a72:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <MSByte>
				LSByte = I2C_ReadLastByte();
     a76:	04 d2       	rcall	.+1032   	; 0xe80 <I2C_ReadLastByte>
     a78:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <LSByte>
				I2C_StopCondition();
     a7c:	e9 d1       	rcall	.+978    	; 0xe50 <I2C_StopCondition>
				Temperature = 1000 * (((((MSByte << 8) | LSByte) >> 5) & 0x7FF) * 0.125);
     a7e:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <MSByte>
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	76 2f       	mov	r23, r22
     a86:	66 27       	eor	r22, r22
     a88:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <LSByte>
     a8c:	68 2b       	or	r22, r24
     a8e:	76 95       	lsr	r23
     a90:	67 95       	ror	r22
     a92:	72 95       	swap	r23
     a94:	62 95       	swap	r22
     a96:	6f 70       	andi	r22, 0x0F	; 15
     a98:	67 27       	eor	r22, r23
     a9a:	7f 70       	andi	r23, 0x0F	; 15
     a9c:	67 27       	eor	r22, r23
     a9e:	07 2e       	mov	r0, r23
     aa0:	00 0c       	add	r0, r0
     aa2:	88 0b       	sbc	r24, r24
     aa4:	99 0b       	sbc	r25, r25
     aa6:	f5 d2       	rcall	.+1514   	; 0x1092 <__floatsisf>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	5e e3       	ldi	r21, 0x3E	; 62
     ab0:	a4 d3       	rcall	.+1864   	; 0x11fa <__mulsf3>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	4a e7       	ldi	r20, 0x7A	; 122
     ab8:	54 e4       	ldi	r21, 0x44	; 68
     aba:	9f d3       	rcall	.+1854   	; 0x11fa <__mulsf3>
     abc:	bc d2       	rcall	.+1400   	; 0x1036 <__fixunssfsi>
     abe:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <Temperature+0x1>
     ac2:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <Temperature>
				Temp_Comp = (Temperature - Temperature_Ref) / 1000;
     ac6:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <Temperature_Ref>
     aca:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <Temperature_Ref+0x1>
     ace:	cb 01       	movw	r24, r22
     ad0:	82 1b       	sub	r24, r18
     ad2:	93 0b       	sbc	r25, r19
     ad4:	68 ee       	ldi	r22, 0xE8	; 232
     ad6:	73 e0       	ldi	r23, 0x03	; 3
     ad8:	07 d4       	rcall	.+2062   	; 0x12e8 <__udivmodhi4>
     ada:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <Temp_Comp+0x1>
     ade:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <Temp_Comp>
				Temp_Ready = 1;	// Temp_Ready after 3600 sec (60 min)
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Temp_Ready+0x1>
     aea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Temp_Ready>
			}
		}
	
	//cathodes anti-degradation (CAD)
	if (sec == 29) generalCount = 0;	//Slow switch
     aee:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <sec>
     af2:	2d 31       	cpi	r18, 0x1D	; 29
     af4:	21 f4       	brne	.+8      	; 0xafe <main+0x45c>
     af6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <generalCount+0x1>
     afa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <generalCount>
	if ((sec > 29) && (sec < 35))		
     afe:	82 ee       	ldi	r24, 0xE2	; 226
     b00:	82 0f       	add	r24, r18
     b02:	85 30       	cpi	r24, 0x05	; 5
     b04:	88 f4       	brcc	.+34     	; 0xb28 <main+0x486>
	{dispMode = 3;
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dispMode>
	secCAD = generalCount / 392;
     b0c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <generalCount>
     b10:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <generalCount+0x1>
     b14:	68 e8       	ldi	r22, 0x88	; 136
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	e7 d3       	rcall	.+1998   	; 0x12e8 <__udivmodhi4>
     b1a:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <secCAD>
	minCAD = generalCount / 392;
     b1e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <minCAD>
	hourCAD = generalCount / 392;}
     b22:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <hourCAD>
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <main+0x490>
	else if (sec == 35) dispMode = 1;
     b28:	23 32       	cpi	r18, 0x23	; 35
     b2a:	19 f4       	brne	.+6      	; 0xb32 <main+0x490>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dispMode>
	//--------------------------------------------
	if (sec == 54) generalCount = 0;	//Fast switch
     b32:	26 33       	cpi	r18, 0x36	; 54
     b34:	21 f4       	brne	.+8      	; 0xb3e <main+0x49c>
     b36:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <generalCount+0x1>
     b3a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <generalCount>
	if ((sec > 54) && (sec < 60))		
     b3e:	89 ec       	ldi	r24, 0xC9	; 201
     b40:	82 0f       	add	r24, r18
     b42:	85 30       	cpi	r24, 0x05	; 5
     b44:	d0 f4       	brcc	.+52     	; 0xb7a <main+0x4d8>
	{dispMode = 3;
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dispMode>
	secCAD = generalCount / 196;
     b4c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <generalCount>
     b50:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <generalCount+0x1>
     b54:	c9 01       	movw	r24, r18
     b56:	64 ec       	ldi	r22, 0xC4	; 196
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	c6 d3       	rcall	.+1932   	; 0x12e8 <__udivmodhi4>
     b5c:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <secCAD>
	minCAD = generalCount / 98;
     b60:	c9 01       	movw	r24, r18
     b62:	62 e6       	ldi	r22, 0x62	; 98
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	c0 d3       	rcall	.+1920   	; 0x12e8 <__udivmodhi4>
     b68:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <minCAD>
	hourCAD = generalCount / 49;}
     b6c:	c9 01       	movw	r24, r18
     b6e:	61 e3       	ldi	r22, 0x31	; 49
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	ba d3       	rcall	.+1908   	; 0x12e8 <__udivmodhi4>
     b74:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <hourCAD>
     b78:	e8 cd       	rjmp	.-1072   	; 0x74a <main+0xa8>
	else if (sec == 0) dispMode = 1;
     b7a:	21 11       	cpse	r18, r1
     b7c:	e6 cd       	rjmp	.-1076   	; 0x74a <main+0xa8>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dispMode>
     b84:	e2 cd       	rjmp	.-1084   	; 0x74a <main+0xa8>

00000b86 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(float p_factor, float i_factor, float d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	f6 01       	movw	r30, r12
  // Start values for PID controller
  pid->sumError = 0;
     b94:	14 82       	std	Z+4, r1	; 0x04
     b96:	15 82       	std	Z+5, r1	; 0x05
     b98:	16 82       	std	Z+6, r1	; 0x06
     b9a:	17 82       	std	Z+7, r1	; 0x07
  pid->lastProcessValue = 0;
     b9c:	10 82       	st	Z, r1
     b9e:	11 82       	std	Z+1, r1	; 0x01
     ba0:	12 82       	std	Z+2, r1	; 0x02
     ba2:	13 82       	std	Z+3, r1	; 0x03
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
     ba4:	60 87       	std	Z+8, r22	; 0x08
     ba6:	71 87       	std	Z+9, r23	; 0x09
     ba8:	82 87       	std	Z+10, r24	; 0x0a
     baa:	93 87       	std	Z+11, r25	; 0x0b
  pid->I_Factor = i_factor;
     bac:	24 87       	std	Z+12, r18	; 0x0c
     bae:	35 87       	std	Z+13, r19	; 0x0d
     bb0:	46 87       	std	Z+14, r20	; 0x0e
     bb2:	57 87       	std	Z+15, r21	; 0x0f
  pid->D_Factor = d_factor;
     bb4:	e0 8a       	std	Z+16, r14	; 0x10
     bb6:	f1 8a       	std	Z+17, r15	; 0x11
     bb8:	02 8b       	std	Z+18, r16	; 0x12
     bba:	13 8b       	std	Z+19, r17	; 0x13
  // Limits to avoid overflow
  pid->maxError = MAX_INT;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	ae e3       	ldi	r26, 0x3E	; 62
     bc2:	b3 e4       	ldi	r27, 0x43	; 67
     bc4:	84 8b       	std	Z+20, r24	; 0x14
     bc6:	95 8b       	std	Z+21, r25	; 0x15
     bc8:	a6 8b       	std	Z+22, r26	; 0x16
     bca:	b7 8b       	std	Z+23, r27	; 0x17
  pid->maxSumError = MAX_I_TERM;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	aa e7       	ldi	r26, 0x7A	; 122
     bd2:	b5 e4       	ldi	r27, 0x45	; 69
     bd4:	80 8f       	std	Z+24, r24	; 0x18
     bd6:	91 8f       	std	Z+25, r25	; 0x19
     bd8:	a2 8f       	std	Z+26, r26	; 0x1a
     bda:	b3 8f       	std	Z+27, r27	; 0x1b
}
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	08 95       	ret

00000bea <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
float pid_Controller(float setPoint, float processValue, struct PID_DATA *pid_st)
{
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <pid_Controller+0x22>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <pid_Controller+0x24>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <pid_Controller+0x26>
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	69 01       	movw	r12, r18
     c16:	7a 01       	movw	r14, r20
     c18:	1e 83       	std	Y+6, r17	; 0x06
     c1a:	0d 83       	std	Y+5, r16	; 0x05
  float error, p_term, d_term;
  float i_term, ret, temp;

  error = setPoint - processValue;
     c1c:	3b d1       	rcall	.+630    	; 0xe94 <__subsf3>
     c1e:	4b 01       	movw	r8, r22
     c20:	5c 01       	movw	r10, r24

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
     c22:	d8 01       	movw	r26, r16
     c24:	54 96       	adiw	r26, 0x14	; 20
     c26:	4d 90       	ld	r4, X+
     c28:	5d 90       	ld	r5, X+
     c2a:	6d 90       	ld	r6, X+
     c2c:	7c 90       	ld	r7, X
     c2e:	57 97       	sbiw	r26, 0x17	; 23
     c30:	a3 01       	movw	r20, r6
     c32:	92 01       	movw	r18, r4
     c34:	de d2       	rcall	.+1468   	; 0x11f2 <__gesf2>
     c36:	18 16       	cp	r1, r24
     c38:	9c f0       	brlt	.+38     	; 0xc60 <pid_Controller+0x76>
    p_term = MAX_INT;
  }
  else if (error < -pid_st->maxError){
     c3a:	a3 01       	movw	r20, r6
     c3c:	92 01       	movw	r18, r4
     c3e:	50 58       	subi	r21, 0x80	; 128
     c40:	c5 01       	movw	r24, r10
     c42:	b4 01       	movw	r22, r8
     c44:	8c d1       	rcall	.+792    	; 0xf5e <__cmpsf2>
     c46:	88 23       	and	r24, r24
     c48:	a4 f0       	brlt	.+40     	; 0xc72 <pid_Controller+0x88>
    p_term = -MAX_INT;
  }
  else{
    p_term = pid_st->P_Factor * error;
     c4a:	f8 01       	movw	r30, r16
     c4c:	20 85       	ldd	r18, Z+8	; 0x08
     c4e:	31 85       	ldd	r19, Z+9	; 0x09
     c50:	42 85       	ldd	r20, Z+10	; 0x0a
     c52:	53 85       	ldd	r21, Z+11	; 0x0b
     c54:	c5 01       	movw	r24, r10
     c56:	b4 01       	movw	r22, r8
     c58:	d0 d2       	rcall	.+1440   	; 0x11fa <__mulsf3>
     c5a:	2b 01       	movw	r4, r22
     c5c:	3c 01       	movw	r6, r24
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <pid_Controller+0x98>

  error = setPoint - processValue;

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError){
    p_term = MAX_INT;
     c60:	0f 2e       	mov	r0, r31
     c62:	41 2c       	mov	r4, r1
     c64:	51 2c       	mov	r5, r1
     c66:	fe e3       	ldi	r31, 0x3E	; 62
     c68:	6f 2e       	mov	r6, r31
     c6a:	f3 e4       	ldi	r31, 0x43	; 67
     c6c:	7f 2e       	mov	r7, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <pid_Controller+0x98>
  }
  else if (error < -pid_st->maxError){
    p_term = -MAX_INT;
     c72:	0f 2e       	mov	r0, r31
     c74:	41 2c       	mov	r4, r1
     c76:	51 2c       	mov	r5, r1
     c78:	fe e3       	ldi	r31, 0x3E	; 62
     c7a:	6f 2e       	mov	r6, r31
     c7c:	f3 ec       	ldi	r31, 0xC3	; 195
     c7e:	7f 2e       	mov	r7, r31
     c80:	f0 2d       	mov	r31, r0
  else{
    p_term = pid_st->P_Factor * error;
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
     c82:	ad 81       	ldd	r26, Y+5	; 0x05
     c84:	be 81       	ldd	r27, Y+6	; 0x06
     c86:	14 96       	adiw	r26, 0x04	; 4
     c88:	2d 91       	ld	r18, X+
     c8a:	3d 91       	ld	r19, X+
     c8c:	4d 91       	ld	r20, X+
     c8e:	5c 91       	ld	r21, X
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	c5 01       	movw	r24, r10
     c94:	b4 01       	movw	r22, r8
     c96:	ff d0       	rcall	.+510    	; 0xe96 <__addsf3>
     c98:	69 83       	std	Y+1, r22	; 0x01
     c9a:	7a 83       	std	Y+2, r23	; 0x02
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	9c 83       	std	Y+4, r25	; 0x04
  if(temp > pid_st->maxSumError){
     ca0:	ed 81       	ldd	r30, Y+5	; 0x05
     ca2:	fe 81       	ldd	r31, Y+6	; 0x06
     ca4:	80 8c       	ldd	r8, Z+24	; 0x18
     ca6:	91 8c       	ldd	r9, Z+25	; 0x19
     ca8:	a2 8c       	ldd	r10, Z+26	; 0x1a
     caa:	b3 8c       	ldd	r11, Z+27	; 0x1b
     cac:	a5 01       	movw	r20, r10
     cae:	94 01       	movw	r18, r8
     cb0:	a0 d2       	rcall	.+1344   	; 0x11f2 <__gesf2>
     cb2:	18 16       	cp	r1, r24
     cb4:	b4 f4       	brge	.+44     	; 0xce2 <pid_Controller+0xf8>
    //i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
     cb6:	ad 81       	ldd	r26, Y+5	; 0x05
     cb8:	be 81       	ldd	r27, Y+6	; 0x06
     cba:	14 96       	adiw	r26, 0x04	; 4
     cbc:	8d 92       	st	X+, r8
     cbe:	9d 92       	st	X+, r9
     cc0:	ad 92       	st	X+, r10
     cc2:	bc 92       	st	X, r11
     cc4:	17 97       	sbiw	r26, 0x07	; 7
		i_term = pid_st->I_Factor * pid_st->sumError;
     cc6:	1c 96       	adiw	r26, 0x0c	; 12
     cc8:	2d 91       	ld	r18, X+
     cca:	3d 91       	ld	r19, X+
     ccc:	4d 91       	ld	r20, X+
     cce:	5c 91       	ld	r21, X
     cd0:	1f 97       	sbiw	r26, 0x0f	; 15
     cd2:	c5 01       	movw	r24, r10
     cd4:	b4 01       	movw	r22, r8
     cd6:	91 d2       	rcall	.+1314   	; 0x11fa <__mulsf3>
     cd8:	69 83       	std	Y+1, r22	; 0x01
     cda:	7a 83       	std	Y+2, r23	; 0x02
     cdc:	8b 83       	std	Y+3, r24	; 0x03
     cde:	9c 83       	std	Y+4, r25	; 0x04
     ce0:	34 c0       	rjmp	.+104    	; 0xd4a <pid_Controller+0x160>
  }
  else if(temp < -pid_st->maxSumError){
     ce2:	b7 fa       	bst	r11, 7
     ce4:	b0 94       	com	r11
     ce6:	b7 f8       	bld	r11, 7
     ce8:	b0 94       	com	r11
     cea:	a5 01       	movw	r20, r10
     cec:	94 01       	movw	r18, r8
     cee:	69 81       	ldd	r22, Y+1	; 0x01
     cf0:	7a 81       	ldd	r23, Y+2	; 0x02
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	33 d1       	rcall	.+614    	; 0xf5e <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	94 f4       	brge	.+36     	; 0xd20 <pid_Controller+0x136>
    //i_term = -MAX_I_TERM;
    pid_st->sumError = -pid_st->maxSumError;
     cfc:	ed 81       	ldd	r30, Y+5	; 0x05
     cfe:	fe 81       	ldd	r31, Y+6	; 0x06
     d00:	84 82       	std	Z+4, r8	; 0x04
     d02:	95 82       	std	Z+5, r9	; 0x05
     d04:	a6 82       	std	Z+6, r10	; 0x06
     d06:	b7 82       	std	Z+7, r11	; 0x07
		i_term = pid_st->I_Factor * pid_st->sumError;
     d08:	24 85       	ldd	r18, Z+12	; 0x0c
     d0a:	35 85       	ldd	r19, Z+13	; 0x0d
     d0c:	46 85       	ldd	r20, Z+14	; 0x0e
     d0e:	57 85       	ldd	r21, Z+15	; 0x0f
     d10:	c5 01       	movw	r24, r10
     d12:	b4 01       	movw	r22, r8
     d14:	72 d2       	rcall	.+1252   	; 0x11fa <__mulsf3>
     d16:	69 83       	std	Y+1, r22	; 0x01
     d18:	7a 83       	std	Y+2, r23	; 0x02
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	15 c0       	rjmp	.+42     	; 0xd4a <pid_Controller+0x160>
  }
  else{
    pid_st->sumError = temp;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	ab 81       	ldd	r26, Y+3	; 0x03
     d26:	bc 81       	ldd	r27, Y+4	; 0x04
     d28:	ed 81       	ldd	r30, Y+5	; 0x05
     d2a:	fe 81       	ldd	r31, Y+6	; 0x06
     d2c:	84 83       	std	Z+4, r24	; 0x04
     d2e:	95 83       	std	Z+5, r25	; 0x05
     d30:	a6 83       	std	Z+6, r26	; 0x06
     d32:	b7 83       	std	Z+7, r27	; 0x07
    i_term = pid_st->I_Factor * pid_st->sumError;
     d34:	24 85       	ldd	r18, Z+12	; 0x0c
     d36:	35 85       	ldd	r19, Z+13	; 0x0d
     d38:	46 85       	ldd	r20, Z+14	; 0x0e
     d3a:	57 85       	ldd	r21, Z+15	; 0x0f
     d3c:	bc 01       	movw	r22, r24
     d3e:	cd 01       	movw	r24, r26
     d40:	5c d2       	rcall	.+1208   	; 0x11fa <__mulsf3>
     d42:	69 83       	std	Y+1, r22	; 0x01
     d44:	7a 83       	std	Y+2, r23	; 0x02
     d46:	8b 83       	std	Y+3, r24	; 0x03
     d48:	9c 83       	std	Y+4, r25	; 0x04
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     d4a:	ad 81       	ldd	r26, Y+5	; 0x05
     d4c:	be 81       	ldd	r27, Y+6	; 0x06
     d4e:	50 96       	adiw	r26, 0x10	; 16
     d50:	8d 90       	ld	r8, X+
     d52:	9d 90       	ld	r9, X+
     d54:	ad 90       	ld	r10, X+
     d56:	bc 90       	ld	r11, X
     d58:	53 97       	sbiw	r26, 0x13	; 19
     d5a:	6d 91       	ld	r22, X+
     d5c:	7d 91       	ld	r23, X+
     d5e:	8d 91       	ld	r24, X+
     d60:	9c 91       	ld	r25, X
     d62:	a7 01       	movw	r20, r14
     d64:	96 01       	movw	r18, r12
     d66:	96 d0       	rcall	.+300    	; 0xe94 <__subsf3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	c5 01       	movw	r24, r10
     d6e:	b4 01       	movw	r22, r8
     d70:	44 d2       	rcall	.+1160   	; 0x11fa <__mulsf3>
     d72:	4b 01       	movw	r8, r22
     d74:	5c 01       	movw	r10, r24

  pid_st->lastProcessValue = processValue;
     d76:	ed 81       	ldd	r30, Y+5	; 0x05
     d78:	fe 81       	ldd	r31, Y+6	; 0x06
     d7a:	c0 82       	st	Z, r12
     d7c:	d1 82       	std	Z+1, r13	; 0x01
     d7e:	e2 82       	std	Z+2, r14	; 0x02
     d80:	f3 82       	std	Z+3, r15	; 0x03

  ret = (p_term + i_term + d_term);
     d82:	29 81       	ldd	r18, Y+1	; 0x01
     d84:	3a 81       	ldd	r19, Y+2	; 0x02
     d86:	4b 81       	ldd	r20, Y+3	; 0x03
     d88:	5c 81       	ldd	r21, Y+4	; 0x04
     d8a:	c3 01       	movw	r24, r6
     d8c:	b2 01       	movw	r22, r4
     d8e:	83 d0       	rcall	.+262    	; 0xe96 <__addsf3>
     d90:	9b 01       	movw	r18, r22
     d92:	ac 01       	movw	r20, r24
     d94:	c5 01       	movw	r24, r10
     d96:	b4 01       	movw	r22, r8
     d98:	7e d0       	rcall	.+252    	; 0xe96 <__addsf3>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
  if(ret > MAX_INT){
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4e e3       	ldi	r20, 0x3E	; 62
     da4:	53 e4       	ldi	r21, 0x43	; 67
     da6:	25 d2       	rcall	.+1098   	; 0x11f2 <__gesf2>
     da8:	18 16       	cp	r1, r24
     daa:	4c f0       	brlt	.+18     	; 0xdbe <pid_Controller+0x1d4>
    ret = MAX_INT;
  }
  else if(ret < 0){
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	a9 01       	movw	r20, r18
     db2:	c7 01       	movw	r24, r14
     db4:	b6 01       	movw	r22, r12
     db6:	d3 d0       	rcall	.+422    	; 0xf5e <__cmpsf2>
     db8:	88 23       	and	r24, r24
     dba:	6c f4       	brge	.+26     	; 0xdd6 <pid_Controller+0x1ec>
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <pid_Controller+0x1e6>

  pid_st->lastProcessValue = processValue;

  ret = (p_term + i_term + d_term);
  if(ret > MAX_INT){
    ret = MAX_INT;
     dbe:	0f 2e       	mov	r0, r31
     dc0:	c1 2c       	mov	r12, r1
     dc2:	d1 2c       	mov	r13, r1
     dc4:	fe e3       	ldi	r31, 0x3E	; 62
     dc6:	ef 2e       	mov	r14, r31
     dc8:	f3 e4       	ldi	r31, 0x43	; 67
     dca:	ff 2e       	mov	r15, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <pid_Controller+0x1ec>
  }
  else if(ret < 0){
    ret = 0;
     dd0:	c1 2c       	mov	r12, r1
     dd2:	d1 2c       	mov	r13, r1
     dd4:	76 01       	movw	r14, r12
  }

  return((float)ret);
}
     dd6:	c7 01       	movw	r24, r14
     dd8:	b6 01       	movw	r22, r12
     dda:	26 96       	adiw	r28, 0x06	; 6
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	5f 90       	pop	r5
     e04:	4f 90       	pop	r4
     e06:	08 95       	ret

00000e08 <RTC_BCDtoDEC>:
#include "RTC.h"


uint8_t RTC_BCDtoDEC(uint8_t c)
{
	uint8_t ch = ((c>>4)*10+(0b00001111&c));
     e08:	98 2f       	mov	r25, r24
     e0a:	92 95       	swap	r25
     e0c:	9f 70       	andi	r25, 0x0F	; 15
     e0e:	29 2f       	mov	r18, r25
     e10:	22 0f       	add	r18, r18
     e12:	22 0f       	add	r18, r18
     e14:	92 0f       	add	r25, r18
     e16:	29 2f       	mov	r18, r25
     e18:	22 0f       	add	r18, r18
     e1a:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
     e1c:	82 0f       	add	r24, r18
     e1e:	08 95       	ret

00000e20 <RTC_DECtoBCD>:

uint8_t RTC_DECtoBCD(uint8_t c)
{
	uint8_t ch = ((c/10)<<4)|(c%10);
     e20:	6a e0       	ldi	r22, 0x0A	; 10
     e22:	56 d2       	rcall	.+1196   	; 0x12d0 <__udivmodqi4>
     e24:	29 2f       	mov	r18, r25
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	82 95       	swap	r24
     e2a:	92 95       	swap	r25
     e2c:	90 7f       	andi	r25, 0xF0	; 240
     e2e:	98 27       	eor	r25, r24
     e30:	80 7f       	andi	r24, 0xF0	; 240
     e32:	98 27       	eor	r25, r24
	return ch;
     e34:	82 2b       	or	r24, r18
     e36:	08 95       	ret

00000e38 <I2C_Init>:
{
	I2C_StartCondition(); // Отправим условие START
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(c);// Отправим байт данных
	I2C_StopCondition();// Отправим условие STOP
}
     e38:	88 e4       	ldi	r24, 0x48	; 72
     e3a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     e3e:	08 95       	ret

00000e40 <I2C_StartCondition>:
     e40:	84 ea       	ldi	r24, 0xA4	; 164
     e42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e4a:	88 23       	and	r24, r24
     e4c:	e4 f7       	brge	.-8      	; 0xe46 <I2C_StartCondition+0x6>
     e4e:	08 95       	ret

00000e50 <I2C_StopCondition>:
     e50:	84 e9       	ldi	r24, 0x94	; 148
     e52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e56:	08 95       	ret

00000e58 <I2C_SendByte>:
     e58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     e5c:	84 e8       	ldi	r24, 0x84	; 132
     e5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e62:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e66:	88 23       	and	r24, r24
     e68:	e4 f7       	brge	.-8      	; 0xe62 <I2C_SendByte+0xa>
     e6a:	08 95       	ret

00000e6c <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     e6c:	84 ec       	ldi	r24, 0xC4	; 196
     e6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
     e72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e76:	88 23       	and	r24, r24
     e78:	e4 f7       	brge	.-8      	; 0xe72 <I2C_ReadByte+0x6>
	return TWDR;//читаем регистр данных
     e7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}
     e7e:	08 95       	ret

00000e80 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
     e80:	84 e8       	ldi	r24, 0x84	; 132
     e82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
     e86:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     e8a:	88 23       	and	r24, r24
     e8c:	e4 f7       	brge	.-8      	; 0xe86 <I2C_ReadLastByte+0x6>
	return TWDR;//читаем регистр данных
     e8e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     e92:	08 95       	ret

00000e94 <__subsf3>:
     e94:	50 58       	subi	r21, 0x80	; 128

00000e96 <__addsf3>:
     e96:	bb 27       	eor	r27, r27
     e98:	aa 27       	eor	r26, r26
     e9a:	0e d0       	rcall	.+28     	; 0xeb8 <__addsf3x>
     e9c:	70 c1       	rjmp	.+736    	; 0x117e <__fp_round>
     e9e:	61 d1       	rcall	.+706    	; 0x1162 <__fp_pscA>
     ea0:	30 f0       	brcs	.+12     	; 0xeae <__addsf3+0x18>
     ea2:	66 d1       	rcall	.+716    	; 0x1170 <__fp_pscB>
     ea4:	20 f0       	brcs	.+8      	; 0xeae <__addsf3+0x18>
     ea6:	31 f4       	brne	.+12     	; 0xeb4 <__addsf3+0x1e>
     ea8:	9f 3f       	cpi	r25, 0xFF	; 255
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <__addsf3+0x1a>
     eac:	1e f4       	brtc	.+6      	; 0xeb4 <__addsf3+0x1e>
     eae:	56 c1       	rjmp	.+684    	; 0x115c <__fp_nan>
     eb0:	0e f4       	brtc	.+2      	; 0xeb4 <__addsf3+0x1e>
     eb2:	e0 95       	com	r30
     eb4:	e7 fb       	bst	r30, 7
     eb6:	4c c1       	rjmp	.+664    	; 0x1150 <__fp_inf>

00000eb8 <__addsf3x>:
     eb8:	e9 2f       	mov	r30, r25
     eba:	72 d1       	rcall	.+740    	; 0x11a0 <__fp_split3>
     ebc:	80 f3       	brcs	.-32     	; 0xe9e <__addsf3+0x8>
     ebe:	ba 17       	cp	r27, r26
     ec0:	62 07       	cpc	r22, r18
     ec2:	73 07       	cpc	r23, r19
     ec4:	84 07       	cpc	r24, r20
     ec6:	95 07       	cpc	r25, r21
     ec8:	18 f0       	brcs	.+6      	; 0xed0 <__addsf3x+0x18>
     eca:	71 f4       	brne	.+28     	; 0xee8 <__addsf3x+0x30>
     ecc:	9e f5       	brtc	.+102    	; 0xf34 <__addsf3x+0x7c>
     ece:	8a c1       	rjmp	.+788    	; 0x11e4 <__fp_zero>
     ed0:	0e f4       	brtc	.+2      	; 0xed4 <__addsf3x+0x1c>
     ed2:	e0 95       	com	r30
     ed4:	0b 2e       	mov	r0, r27
     ed6:	ba 2f       	mov	r27, r26
     ed8:	a0 2d       	mov	r26, r0
     eda:	0b 01       	movw	r0, r22
     edc:	b9 01       	movw	r22, r18
     ede:	90 01       	movw	r18, r0
     ee0:	0c 01       	movw	r0, r24
     ee2:	ca 01       	movw	r24, r20
     ee4:	a0 01       	movw	r20, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	ff 27       	eor	r31, r31
     eea:	59 1b       	sub	r21, r25
     eec:	99 f0       	breq	.+38     	; 0xf14 <__addsf3x+0x5c>
     eee:	59 3f       	cpi	r21, 0xF9	; 249
     ef0:	50 f4       	brcc	.+20     	; 0xf06 <__addsf3x+0x4e>
     ef2:	50 3e       	cpi	r21, 0xE0	; 224
     ef4:	68 f1       	brcs	.+90     	; 0xf50 <__addsf3x+0x98>
     ef6:	1a 16       	cp	r1, r26
     ef8:	f0 40       	sbci	r31, 0x00	; 0
     efa:	a2 2f       	mov	r26, r18
     efc:	23 2f       	mov	r18, r19
     efe:	34 2f       	mov	r19, r20
     f00:	44 27       	eor	r20, r20
     f02:	58 5f       	subi	r21, 0xF8	; 248
     f04:	f3 cf       	rjmp	.-26     	; 0xeec <__addsf3x+0x34>
     f06:	46 95       	lsr	r20
     f08:	37 95       	ror	r19
     f0a:	27 95       	ror	r18
     f0c:	a7 95       	ror	r26
     f0e:	f0 40       	sbci	r31, 0x00	; 0
     f10:	53 95       	inc	r21
     f12:	c9 f7       	brne	.-14     	; 0xf06 <__addsf3x+0x4e>
     f14:	7e f4       	brtc	.+30     	; 0xf34 <__addsf3x+0x7c>
     f16:	1f 16       	cp	r1, r31
     f18:	ba 0b       	sbc	r27, r26
     f1a:	62 0b       	sbc	r22, r18
     f1c:	73 0b       	sbc	r23, r19
     f1e:	84 0b       	sbc	r24, r20
     f20:	ba f0       	brmi	.+46     	; 0xf50 <__addsf3x+0x98>
     f22:	91 50       	subi	r25, 0x01	; 1
     f24:	a1 f0       	breq	.+40     	; 0xf4e <__addsf3x+0x96>
     f26:	ff 0f       	add	r31, r31
     f28:	bb 1f       	adc	r27, r27
     f2a:	66 1f       	adc	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	88 1f       	adc	r24, r24
     f30:	c2 f7       	brpl	.-16     	; 0xf22 <__addsf3x+0x6a>
     f32:	0e c0       	rjmp	.+28     	; 0xf50 <__addsf3x+0x98>
     f34:	ba 0f       	add	r27, r26
     f36:	62 1f       	adc	r22, r18
     f38:	73 1f       	adc	r23, r19
     f3a:	84 1f       	adc	r24, r20
     f3c:	48 f4       	brcc	.+18     	; 0xf50 <__addsf3x+0x98>
     f3e:	87 95       	ror	r24
     f40:	77 95       	ror	r23
     f42:	67 95       	ror	r22
     f44:	b7 95       	ror	r27
     f46:	f7 95       	ror	r31
     f48:	9e 3f       	cpi	r25, 0xFE	; 254
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <__addsf3x+0x96>
     f4c:	b3 cf       	rjmp	.-154    	; 0xeb4 <__addsf3+0x1e>
     f4e:	93 95       	inc	r25
     f50:	88 0f       	add	r24, r24
     f52:	08 f0       	brcs	.+2      	; 0xf56 <__addsf3x+0x9e>
     f54:	99 27       	eor	r25, r25
     f56:	ee 0f       	add	r30, r30
     f58:	97 95       	ror	r25
     f5a:	87 95       	ror	r24
     f5c:	08 95       	ret

00000f5e <__cmpsf2>:
     f5e:	d4 d0       	rcall	.+424    	; 0x1108 <__fp_cmp>
     f60:	08 f4       	brcc	.+2      	; 0xf64 <__cmpsf2+0x6>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	08 95       	ret

00000f66 <__divsf3>:
     f66:	0c d0       	rcall	.+24     	; 0xf80 <__divsf3x>
     f68:	0a c1       	rjmp	.+532    	; 0x117e <__fp_round>
     f6a:	02 d1       	rcall	.+516    	; 0x1170 <__fp_pscB>
     f6c:	40 f0       	brcs	.+16     	; 0xf7e <__divsf3+0x18>
     f6e:	f9 d0       	rcall	.+498    	; 0x1162 <__fp_pscA>
     f70:	30 f0       	brcs	.+12     	; 0xf7e <__divsf3+0x18>
     f72:	21 f4       	brne	.+8      	; 0xf7c <__divsf3+0x16>
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	19 f0       	breq	.+6      	; 0xf7e <__divsf3+0x18>
     f78:	eb c0       	rjmp	.+470    	; 0x1150 <__fp_inf>
     f7a:	51 11       	cpse	r21, r1
     f7c:	34 c1       	rjmp	.+616    	; 0x11e6 <__fp_szero>
     f7e:	ee c0       	rjmp	.+476    	; 0x115c <__fp_nan>

00000f80 <__divsf3x>:
     f80:	0f d1       	rcall	.+542    	; 0x11a0 <__fp_split3>
     f82:	98 f3       	brcs	.-26     	; 0xf6a <__divsf3+0x4>

00000f84 <__divsf3_pse>:
     f84:	99 23       	and	r25, r25
     f86:	c9 f3       	breq	.-14     	; 0xf7a <__divsf3+0x14>
     f88:	55 23       	and	r21, r21
     f8a:	b1 f3       	breq	.-20     	; 0xf78 <__divsf3+0x12>
     f8c:	95 1b       	sub	r25, r21
     f8e:	55 0b       	sbc	r21, r21
     f90:	bb 27       	eor	r27, r27
     f92:	aa 27       	eor	r26, r26
     f94:	62 17       	cp	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	38 f0       	brcs	.+14     	; 0xfaa <__divsf3_pse+0x26>
     f9c:	9f 5f       	subi	r25, 0xFF	; 255
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	44 1f       	adc	r20, r20
     fa6:	aa 1f       	adc	r26, r26
     fa8:	a9 f3       	breq	.-22     	; 0xf94 <__divsf3_pse+0x10>
     faa:	33 d0       	rcall	.+102    	; 0x1012 <__divsf3_pse+0x8e>
     fac:	0e 2e       	mov	r0, r30
     fae:	3a f0       	brmi	.+14     	; 0xfbe <__divsf3_pse+0x3a>
     fb0:	e0 e8       	ldi	r30, 0x80	; 128
     fb2:	30 d0       	rcall	.+96     	; 0x1014 <__divsf3_pse+0x90>
     fb4:	91 50       	subi	r25, 0x01	; 1
     fb6:	50 40       	sbci	r21, 0x00	; 0
     fb8:	e6 95       	lsr	r30
     fba:	00 1c       	adc	r0, r0
     fbc:	ca f7       	brpl	.-14     	; 0xfb0 <__divsf3_pse+0x2c>
     fbe:	29 d0       	rcall	.+82     	; 0x1012 <__divsf3_pse+0x8e>
     fc0:	fe 2f       	mov	r31, r30
     fc2:	27 d0       	rcall	.+78     	; 0x1012 <__divsf3_pse+0x8e>
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	bb 1f       	adc	r27, r27
     fcc:	26 17       	cp	r18, r22
     fce:	37 07       	cpc	r19, r23
     fd0:	48 07       	cpc	r20, r24
     fd2:	ab 07       	cpc	r26, r27
     fd4:	b0 e8       	ldi	r27, 0x80	; 128
     fd6:	09 f0       	breq	.+2      	; 0xfda <__divsf3_pse+0x56>
     fd8:	bb 0b       	sbc	r27, r27
     fda:	80 2d       	mov	r24, r0
     fdc:	bf 01       	movw	r22, r30
     fde:	ff 27       	eor	r31, r31
     fe0:	93 58       	subi	r25, 0x83	; 131
     fe2:	5f 4f       	sbci	r21, 0xFF	; 255
     fe4:	2a f0       	brmi	.+10     	; 0xff0 <__divsf3_pse+0x6c>
     fe6:	9e 3f       	cpi	r25, 0xFE	; 254
     fe8:	51 05       	cpc	r21, r1
     fea:	68 f0       	brcs	.+26     	; 0x1006 <__divsf3_pse+0x82>
     fec:	b1 c0       	rjmp	.+354    	; 0x1150 <__fp_inf>
     fee:	fb c0       	rjmp	.+502    	; 0x11e6 <__fp_szero>
     ff0:	5f 3f       	cpi	r21, 0xFF	; 255
     ff2:	ec f3       	brlt	.-6      	; 0xfee <__divsf3_pse+0x6a>
     ff4:	98 3e       	cpi	r25, 0xE8	; 232
     ff6:	dc f3       	brlt	.-10     	; 0xfee <__divsf3_pse+0x6a>
     ff8:	86 95       	lsr	r24
     ffa:	77 95       	ror	r23
     ffc:	67 95       	ror	r22
     ffe:	b7 95       	ror	r27
    1000:	f7 95       	ror	r31
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__divsf3_pse+0x74>
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret
    1012:	e1 e0       	ldi	r30, 0x01	; 1
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	bb 1f       	adc	r27, r27
    101c:	62 17       	cp	r22, r18
    101e:	73 07       	cpc	r23, r19
    1020:	84 07       	cpc	r24, r20
    1022:	ba 07       	cpc	r27, r26
    1024:	20 f0       	brcs	.+8      	; 0x102e <__divsf3_pse+0xaa>
    1026:	62 1b       	sub	r22, r18
    1028:	73 0b       	sbc	r23, r19
    102a:	84 0b       	sbc	r24, r20
    102c:	ba 0b       	sbc	r27, r26
    102e:	ee 1f       	adc	r30, r30
    1030:	88 f7       	brcc	.-30     	; 0x1014 <__divsf3_pse+0x90>
    1032:	e0 95       	com	r30
    1034:	08 95       	ret

00001036 <__fixunssfsi>:
    1036:	bc d0       	rcall	.+376    	; 0x11b0 <__fp_splitA>
    1038:	88 f0       	brcs	.+34     	; 0x105c <__fixunssfsi+0x26>
    103a:	9f 57       	subi	r25, 0x7F	; 127
    103c:	90 f0       	brcs	.+36     	; 0x1062 <__fixunssfsi+0x2c>
    103e:	b9 2f       	mov	r27, r25
    1040:	99 27       	eor	r25, r25
    1042:	b7 51       	subi	r27, 0x17	; 23
    1044:	a0 f0       	brcs	.+40     	; 0x106e <__fixunssfsi+0x38>
    1046:	d1 f0       	breq	.+52     	; 0x107c <__fixunssfsi+0x46>
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a f0       	brmi	.+6      	; 0x1058 <__fixunssfsi+0x22>
    1052:	ba 95       	dec	r27
    1054:	c9 f7       	brne	.-14     	; 0x1048 <__fixunssfsi+0x12>
    1056:	12 c0       	rjmp	.+36     	; 0x107c <__fixunssfsi+0x46>
    1058:	b1 30       	cpi	r27, 0x01	; 1
    105a:	81 f0       	breq	.+32     	; 0x107c <__fixunssfsi+0x46>
    105c:	c3 d0       	rcall	.+390    	; 0x11e4 <__fp_zero>
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	08 95       	ret
    1062:	c0 c0       	rjmp	.+384    	; 0x11e4 <__fp_zero>
    1064:	67 2f       	mov	r22, r23
    1066:	78 2f       	mov	r23, r24
    1068:	88 27       	eor	r24, r24
    106a:	b8 5f       	subi	r27, 0xF8	; 248
    106c:	39 f0       	breq	.+14     	; 0x107c <__fixunssfsi+0x46>
    106e:	b9 3f       	cpi	r27, 0xF9	; 249
    1070:	cc f3       	brlt	.-14     	; 0x1064 <__fixunssfsi+0x2e>
    1072:	86 95       	lsr	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b3 95       	inc	r27
    107a:	d9 f7       	brne	.-10     	; 0x1072 <__fixunssfsi+0x3c>
    107c:	3e f4       	brtc	.+14     	; 0x108c <__fixunssfsi+0x56>
    107e:	90 95       	com	r25
    1080:	80 95       	com	r24
    1082:	70 95       	com	r23
    1084:	61 95       	neg	r22
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	08 95       	ret

0000108e <__floatunsisf>:
    108e:	e8 94       	clt
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <__floatsisf+0x12>

00001092 <__floatsisf>:
    1092:	97 fb       	bst	r25, 7
    1094:	3e f4       	brtc	.+14     	; 0x10a4 <__floatsisf+0x12>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	99 23       	and	r25, r25
    10a6:	a9 f0       	breq	.+42     	; 0x10d2 <__floatsisf+0x40>
    10a8:	f9 2f       	mov	r31, r25
    10aa:	96 e9       	ldi	r25, 0x96	; 150
    10ac:	bb 27       	eor	r27, r27
    10ae:	93 95       	inc	r25
    10b0:	f6 95       	lsr	r31
    10b2:	87 95       	ror	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	b7 95       	ror	r27
    10ba:	f1 11       	cpse	r31, r1
    10bc:	f8 cf       	rjmp	.-16     	; 0x10ae <__floatsisf+0x1c>
    10be:	fa f4       	brpl	.+62     	; 0x10fe <__floatsisf+0x6c>
    10c0:	bb 0f       	add	r27, r27
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <__floatsisf+0x36>
    10c4:	60 ff       	sbrs	r22, 0
    10c6:	1b c0       	rjmp	.+54     	; 0x10fe <__floatsisf+0x6c>
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	16 c0       	rjmp	.+44     	; 0x10fe <__floatsisf+0x6c>
    10d2:	88 23       	and	r24, r24
    10d4:	11 f0       	breq	.+4      	; 0x10da <__floatsisf+0x48>
    10d6:	96 e9       	ldi	r25, 0x96	; 150
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <__floatsisf+0x6a>
    10da:	77 23       	and	r23, r23
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <__floatsisf+0x54>
    10de:	9e e8       	ldi	r25, 0x8E	; 142
    10e0:	87 2f       	mov	r24, r23
    10e2:	76 2f       	mov	r23, r22
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <__floatsisf+0x5e>
    10e6:	66 23       	and	r22, r22
    10e8:	71 f0       	breq	.+28     	; 0x1106 <__floatsisf+0x74>
    10ea:	96 e8       	ldi	r25, 0x86	; 134
    10ec:	86 2f       	mov	r24, r22
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	2a f0       	brmi	.+10     	; 0x10fe <__floatsisf+0x6c>
    10f4:	9a 95       	dec	r25
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	da f7       	brpl	.-10     	; 0x10f4 <__floatsisf+0x62>
    10fe:	88 0f       	add	r24, r24
    1100:	96 95       	lsr	r25
    1102:	87 95       	ror	r24
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__fp_cmp>:
    1108:	99 0f       	add	r25, r25
    110a:	00 08       	sbc	r0, r0
    110c:	55 0f       	add	r21, r21
    110e:	aa 0b       	sbc	r26, r26
    1110:	e0 e8       	ldi	r30, 0x80	; 128
    1112:	fe ef       	ldi	r31, 0xFE	; 254
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	e8 07       	cpc	r30, r24
    111a:	f9 07       	cpc	r31, r25
    111c:	c0 f0       	brcs	.+48     	; 0x114e <__fp_cmp+0x46>
    111e:	12 16       	cp	r1, r18
    1120:	13 06       	cpc	r1, r19
    1122:	e4 07       	cpc	r30, r20
    1124:	f5 07       	cpc	r31, r21
    1126:	98 f0       	brcs	.+38     	; 0x114e <__fp_cmp+0x46>
    1128:	62 1b       	sub	r22, r18
    112a:	73 0b       	sbc	r23, r19
    112c:	84 0b       	sbc	r24, r20
    112e:	95 0b       	sbc	r25, r21
    1130:	39 f4       	brne	.+14     	; 0x1140 <__fp_cmp+0x38>
    1132:	0a 26       	eor	r0, r26
    1134:	61 f0       	breq	.+24     	; 0x114e <__fp_cmp+0x46>
    1136:	23 2b       	or	r18, r19
    1138:	24 2b       	or	r18, r20
    113a:	25 2b       	or	r18, r21
    113c:	21 f4       	brne	.+8      	; 0x1146 <__fp_cmp+0x3e>
    113e:	08 95       	ret
    1140:	0a 26       	eor	r0, r26
    1142:	09 f4       	brne	.+2      	; 0x1146 <__fp_cmp+0x3e>
    1144:	a1 40       	sbci	r26, 0x01	; 1
    1146:	a6 95       	lsr	r26
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	81 1d       	adc	r24, r1
    114c:	81 1d       	adc	r24, r1
    114e:	08 95       	ret

00001150 <__fp_inf>:
    1150:	97 f9       	bld	r25, 7
    1152:	9f 67       	ori	r25, 0x7F	; 127
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	08 95       	ret

0000115c <__fp_nan>:
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	80 ec       	ldi	r24, 0xC0	; 192
    1160:	08 95       	ret

00001162 <__fp_pscA>:
    1162:	00 24       	eor	r0, r0
    1164:	0a 94       	dec	r0
    1166:	16 16       	cp	r1, r22
    1168:	17 06       	cpc	r1, r23
    116a:	18 06       	cpc	r1, r24
    116c:	09 06       	cpc	r0, r25
    116e:	08 95       	ret

00001170 <__fp_pscB>:
    1170:	00 24       	eor	r0, r0
    1172:	0a 94       	dec	r0
    1174:	12 16       	cp	r1, r18
    1176:	13 06       	cpc	r1, r19
    1178:	14 06       	cpc	r1, r20
    117a:	05 06       	cpc	r0, r21
    117c:	08 95       	ret

0000117e <__fp_round>:
    117e:	09 2e       	mov	r0, r25
    1180:	03 94       	inc	r0
    1182:	00 0c       	add	r0, r0
    1184:	11 f4       	brne	.+4      	; 0x118a <__fp_round+0xc>
    1186:	88 23       	and	r24, r24
    1188:	52 f0       	brmi	.+20     	; 0x119e <__fp_round+0x20>
    118a:	bb 0f       	add	r27, r27
    118c:	40 f4       	brcc	.+16     	; 0x119e <__fp_round+0x20>
    118e:	bf 2b       	or	r27, r31
    1190:	11 f4       	brne	.+4      	; 0x1196 <__fp_round+0x18>
    1192:	60 ff       	sbrs	r22, 0
    1194:	04 c0       	rjmp	.+8      	; 0x119e <__fp_round+0x20>
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	08 95       	ret

000011a0 <__fp_split3>:
    11a0:	57 fd       	sbrc	r21, 7
    11a2:	90 58       	subi	r25, 0x80	; 128
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	59 f0       	breq	.+22     	; 0x11c0 <__fp_splitA+0x10>
    11aa:	5f 3f       	cpi	r21, 0xFF	; 255
    11ac:	71 f0       	breq	.+28     	; 0x11ca <__fp_splitA+0x1a>
    11ae:	47 95       	ror	r20

000011b0 <__fp_splitA>:
    11b0:	88 0f       	add	r24, r24
    11b2:	97 fb       	bst	r25, 7
    11b4:	99 1f       	adc	r25, r25
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <__fp_splitA+0x20>
    11b8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ba:	79 f0       	breq	.+30     	; 0x11da <__fp_splitA+0x2a>
    11bc:	87 95       	ror	r24
    11be:	08 95       	ret
    11c0:	12 16       	cp	r1, r18
    11c2:	13 06       	cpc	r1, r19
    11c4:	14 06       	cpc	r1, r20
    11c6:	55 1f       	adc	r21, r21
    11c8:	f2 cf       	rjmp	.-28     	; 0x11ae <__fp_split3+0xe>
    11ca:	46 95       	lsr	r20
    11cc:	f1 df       	rcall	.-30     	; 0x11b0 <__fp_splitA>
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <__fp_splitA+0x30>
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	f1 cf       	rjmp	.-30     	; 0x11bc <__fp_splitA+0xc>
    11da:	86 95       	lsr	r24
    11dc:	71 05       	cpc	r23, r1
    11de:	61 05       	cpc	r22, r1
    11e0:	08 94       	sec
    11e2:	08 95       	ret

000011e4 <__fp_zero>:
    11e4:	e8 94       	clt

000011e6 <__fp_szero>:
    11e6:	bb 27       	eor	r27, r27
    11e8:	66 27       	eor	r22, r22
    11ea:	77 27       	eor	r23, r23
    11ec:	cb 01       	movw	r24, r22
    11ee:	97 f9       	bld	r25, 7
    11f0:	08 95       	ret

000011f2 <__gesf2>:
    11f2:	8a df       	rcall	.-236    	; 0x1108 <__fp_cmp>
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <__gesf2+0x6>
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__mulsf3>:
    11fa:	0a d0       	rcall	.+20     	; 0x1210 <__mulsf3x>
    11fc:	c0 cf       	rjmp	.-128    	; 0x117e <__fp_round>
    11fe:	b1 df       	rcall	.-158    	; 0x1162 <__fp_pscA>
    1200:	28 f0       	brcs	.+10     	; 0x120c <__mulsf3+0x12>
    1202:	b6 df       	rcall	.-148    	; 0x1170 <__fp_pscB>
    1204:	18 f0       	brcs	.+6      	; 0x120c <__mulsf3+0x12>
    1206:	95 23       	and	r25, r21
    1208:	09 f0       	breq	.+2      	; 0x120c <__mulsf3+0x12>
    120a:	a2 cf       	rjmp	.-188    	; 0x1150 <__fp_inf>
    120c:	a7 cf       	rjmp	.-178    	; 0x115c <__fp_nan>
    120e:	eb cf       	rjmp	.-42     	; 0x11e6 <__fp_szero>

00001210 <__mulsf3x>:
    1210:	c7 df       	rcall	.-114    	; 0x11a0 <__fp_split3>
    1212:	a8 f3       	brcs	.-22     	; 0x11fe <__mulsf3+0x4>

00001214 <__mulsf3_pse>:
    1214:	99 23       	and	r25, r25
    1216:	d9 f3       	breq	.-10     	; 0x120e <__mulsf3+0x14>
    1218:	55 23       	and	r21, r21
    121a:	c9 f3       	breq	.-14     	; 0x120e <__mulsf3+0x14>
    121c:	95 0f       	add	r25, r21
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	55 1f       	adc	r21, r21
    1222:	aa 27       	eor	r26, r26
    1224:	ee 27       	eor	r30, r30
    1226:	ff 27       	eor	r31, r31
    1228:	bb 27       	eor	r27, r27
    122a:	00 24       	eor	r0, r0
    122c:	08 94       	sec
    122e:	67 95       	ror	r22
    1230:	20 f4       	brcc	.+8      	; 0x123a <__mulsf3_pse+0x26>
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	b4 1f       	adc	r27, r20
    1238:	0a 1e       	adc	r0, r26
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	44 1f       	adc	r20, r20
    1240:	aa 1f       	adc	r26, r26
    1242:	66 95       	lsr	r22
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__mulsf3_pse+0x1c>
    1246:	77 95       	ror	r23
    1248:	30 f4       	brcc	.+12     	; 0x1256 <__mulsf3_pse+0x42>
    124a:	f3 0f       	add	r31, r19
    124c:	b4 1f       	adc	r27, r20
    124e:	0a 1e       	adc	r0, r26
    1250:	12 1e       	adc	r1, r18
    1252:	08 f4       	brcc	.+2      	; 0x1256 <__mulsf3_pse+0x42>
    1254:	63 95       	inc	r22
    1256:	33 0f       	add	r19, r19
    1258:	44 1f       	adc	r20, r20
    125a:	aa 1f       	adc	r26, r26
    125c:	22 1f       	adc	r18, r18
    125e:	76 95       	lsr	r23
    1260:	99 f7       	brne	.-26     	; 0x1248 <__mulsf3_pse+0x34>
    1262:	87 95       	ror	r24
    1264:	20 f4       	brcc	.+8      	; 0x126e <__mulsf3_pse+0x5a>
    1266:	b4 0f       	add	r27, r20
    1268:	0a 1e       	adc	r0, r26
    126a:	12 1e       	adc	r1, r18
    126c:	63 1f       	adc	r22, r19
    126e:	44 0f       	add	r20, r20
    1270:	aa 1f       	adc	r26, r26
    1272:	22 1f       	adc	r18, r18
    1274:	33 1f       	adc	r19, r19
    1276:	86 95       	lsr	r24
    1278:	a9 f7       	brne	.-22     	; 0x1264 <__mulsf3_pse+0x50>
    127a:	86 2f       	mov	r24, r22
    127c:	71 2d       	mov	r23, r1
    127e:	60 2d       	mov	r22, r0
    1280:	11 24       	eor	r1, r1
    1282:	9f 57       	subi	r25, 0x7F	; 127
    1284:	50 40       	sbci	r21, 0x00	; 0
    1286:	8a f0       	brmi	.+34     	; 0x12aa <__mulsf3_pse+0x96>
    1288:	e1 f0       	breq	.+56     	; 0x12c2 <__mulsf3_pse+0xae>
    128a:	88 23       	and	r24, r24
    128c:	4a f0       	brmi	.+18     	; 0x12a0 <__mulsf3_pse+0x8c>
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	bb 1f       	adc	r27, r27
    1294:	66 1f       	adc	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	91 50       	subi	r25, 0x01	; 1
    129c:	50 40       	sbci	r21, 0x00	; 0
    129e:	a9 f7       	brne	.-22     	; 0x128a <__mulsf3_pse+0x76>
    12a0:	9e 3f       	cpi	r25, 0xFE	; 254
    12a2:	51 05       	cpc	r21, r1
    12a4:	70 f0       	brcs	.+28     	; 0x12c2 <__mulsf3_pse+0xae>
    12a6:	54 cf       	rjmp	.-344    	; 0x1150 <__fp_inf>
    12a8:	9e cf       	rjmp	.-196    	; 0x11e6 <__fp_szero>
    12aa:	5f 3f       	cpi	r21, 0xFF	; 255
    12ac:	ec f3       	brlt	.-6      	; 0x12a8 <__mulsf3_pse+0x94>
    12ae:	98 3e       	cpi	r25, 0xE8	; 232
    12b0:	dc f3       	brlt	.-10     	; 0x12a8 <__mulsf3_pse+0x94>
    12b2:	86 95       	lsr	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	b7 95       	ror	r27
    12ba:	f7 95       	ror	r31
    12bc:	e7 95       	ror	r30
    12be:	9f 5f       	subi	r25, 0xFF	; 255
    12c0:	c1 f7       	brne	.-16     	; 0x12b2 <__mulsf3_pse+0x9e>
    12c2:	fe 2b       	or	r31, r30
    12c4:	88 0f       	add	r24, r24
    12c6:	91 1d       	adc	r25, r1
    12c8:	96 95       	lsr	r25
    12ca:	87 95       	ror	r24
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__udivmodqi4>:
    12d0:	99 1b       	sub	r25, r25
    12d2:	79 e0       	ldi	r23, 0x09	; 9
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <__udivmodqi4_ep>

000012d6 <__udivmodqi4_loop>:
    12d6:	99 1f       	adc	r25, r25
    12d8:	96 17       	cp	r25, r22
    12da:	08 f0       	brcs	.+2      	; 0x12de <__udivmodqi4_ep>
    12dc:	96 1b       	sub	r25, r22

000012de <__udivmodqi4_ep>:
    12de:	88 1f       	adc	r24, r24
    12e0:	7a 95       	dec	r23
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <__udivmodqi4_loop>
    12e4:	80 95       	com	r24
    12e6:	08 95       	ret

000012e8 <__udivmodhi4>:
    12e8:	aa 1b       	sub	r26, r26
    12ea:	bb 1b       	sub	r27, r27
    12ec:	51 e1       	ldi	r21, 0x11	; 17
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <__udivmodhi4_ep>

000012f0 <__udivmodhi4_loop>:
    12f0:	aa 1f       	adc	r26, r26
    12f2:	bb 1f       	adc	r27, r27
    12f4:	a6 17       	cp	r26, r22
    12f6:	b7 07       	cpc	r27, r23
    12f8:	10 f0       	brcs	.+4      	; 0x12fe <__udivmodhi4_ep>
    12fa:	a6 1b       	sub	r26, r22
    12fc:	b7 0b       	sbc	r27, r23

000012fe <__udivmodhi4_ep>:
    12fe:	88 1f       	adc	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	5a 95       	dec	r21
    1304:	a9 f7       	brne	.-22     	; 0x12f0 <__udivmodhi4_loop>
    1306:	80 95       	com	r24
    1308:	90 95       	com	r25
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	08 95       	ret

00001310 <__udivmodsi4>:
    1310:	a1 e2       	ldi	r26, 0x21	; 33
    1312:	1a 2e       	mov	r1, r26
    1314:	aa 1b       	sub	r26, r26
    1316:	bb 1b       	sub	r27, r27
    1318:	fd 01       	movw	r30, r26
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <__udivmodsi4_ep>

0000131c <__udivmodsi4_loop>:
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	ee 1f       	adc	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	a2 17       	cp	r26, r18
    1326:	b3 07       	cpc	r27, r19
    1328:	e4 07       	cpc	r30, r20
    132a:	f5 07       	cpc	r31, r21
    132c:	20 f0       	brcs	.+8      	; 0x1336 <__udivmodsi4_ep>
    132e:	a2 1b       	sub	r26, r18
    1330:	b3 0b       	sbc	r27, r19
    1332:	e4 0b       	sbc	r30, r20
    1334:	f5 0b       	sbc	r31, r21

00001336 <__udivmodsi4_ep>:
    1336:	66 1f       	adc	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	1a 94       	dec	r1
    1340:	69 f7       	brne	.-38     	; 0x131c <__udivmodsi4_loop>
    1342:	60 95       	com	r22
    1344:	70 95       	com	r23
    1346:	80 95       	com	r24
    1348:	90 95       	com	r25
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	bd 01       	movw	r22, r26
    1350:	cf 01       	movw	r24, r30
    1352:	08 95       	ret

00001354 <_exit>:
    1354:	f8 94       	cli

00001356 <__stop_program>:
    1356:	ff cf       	rjmp	.-2      	; 0x1356 <__stop_program>
